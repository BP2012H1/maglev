#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

# require 'racc/parser.rb'
module MagRp
  class RubyParser < MagRp::Parser


# require "kernel/parser/lexer.rb"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-483,370,274,275,593,-281,-431,-483,-483,-483,435,592,-281,-483,-483',
'122,-483,-480,89,415,-427,579,503,503,-424,-483,37,-427,425,282,338',
'-424,274,275,284,-483,-483,337,-483,-483,-483,-483,-483,-281,433,770',
'655,473,434,-425,-281,280,-85,503,580,-480,-425,503,-281,719,-86,372',
'373,547,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483',
'-483,-483,-281,-87,-483,-483,-483,-89,560,-281,-281,-281,-483,280,426',
'-281,-281,-91,-281,-483,-281,-483,124,-483,-483,-483,-483,-483,-483',
'-483,3,-483,-483,-483,503,-88,436,-281,-281,748,-281,-281,-281,-281',
'-281,753,-483,-483,282,-80,-79,-483,-483,284,-88,282,282,282,505,505',
'284,284,284,274,275,-86,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,755,692,-281,-281,-281,-78,561,282,-92,505',
'-281,282,284,505,370,579,284,-281,122,-281,-64,-281,-281,-281,-281,-281',
'-281,-281,747,-281,-479,-281,370,-87,-79,-87,766,-89,-87,-89,525,-476',
'-89,530,-281,-281,-276,-82,580,-281,-281,-79,-90,-276,-276,-276,746',
'-74,-276,-276,-276,-81,-276,692,282,-88,505,-88,743,284,-88,-79,-276',
'-276,372,373,-79,-90,312,-89,127,-276,-276,597,-276,-276,-276,-276,-276',
'-92,802,-419,372,373,409,640,644,282,-419,690,579,124,284,-476,525,370',
'312,543,371,-84,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276',
'-276,-276,-276,-476,-81,-276,-276,-276,-85,655,-276,539,580,-276,122',
'-86,-276,742,-276,-480,-276,-81,-276,-419,-276,-276,-276,-276,-276,-276',
'-276,-88,-276,692,-276,-283,-91,-90,282,-89,690,-81,-283,284,372,373',
'-81,-276,-276,-276,-276,761,-276,-276,-479,-479,-479,-82,-479,-81,370',
'525,-479,-479,527,579,-483,-479,-477,-479,-479,-479,-479,-479,-479,-479',
'127,-263,705,-87,-479,-479,-479,-479,-479,-479,-479,282,-283,-85,274',
'275,284,370,-479,-483,-479,124,580,-479,-479,-479,-479,-479,-479,-479',
'-479,-479,-479,-77,-479,-479,-88,-479,-479,-479,-483,-91,-422,-78,372',
'373,541,-483,-86,-422,276,277,-479,282,-477,690,-80,-430,284,-479,730',
'-83,-479,-479,-430,-479,-479,733,-479,-483,-479,764,-479,-483,-479,-477',
'-483,372,373,552,282,-479,-479,525,-87,284,530,-479,-479,-479,-479,-479',
'-479,-483,732,-422,-479,-479,-419,-480,-480,-480,-483,-480,-79,-419',
'-88,-480,-480,738,-430,414,-480,-89,-480,-480,-480,-480,-480,-480,-480',
'568,-483,415,567,-480,-480,-480,-480,-480,-480,-480,430,-431,767,-324',
'453,312,134,428,-87,-480,-324,452,-480,-480,-480,-480,-480,-480,-480',
'-480,-480,-480,593,-480,-480,-92,-480,-480,-480,592,-81,735,537,-79',
'539,-89,308,412,-87,104,290,293,-77,-282,410,415,102,-85,-480,561,-282',
'-480,-480,429,-480,-480,-324,-480,655,-480,774,-480,168,-480,731,445',
'-275,-275,727,280,724,-480,443,-275,-275,-499,-480,-480,-480,-480,-480',
'-480,-499,-499,-499,-480,-480,-499,-499,-499,411,-499,103,-281,473,-90',
'-282,-428,779,-430,-281,-499,-429,-84,-428,-480,-430,282,-92,-429,-499',
'-499,284,-499,-499,-499,-499,-499,444,-275,-275,860,722,-283,388,-282',
'-282,442,858,-499,-283,386,-282,-282,441,-83,-499,-499,-499,781,-91',
'-499,-499,-499,636,-499,-281,641,645,647,-499,-426,-430,720,-422,-499',
'783,-499,-426,786,818,-422,127,-499,-499,-499,127,-499,-499,-499,-499',
'-499,711,818,859,127,-283,387,-282,-282,411,395,636,282,-499,641,645',
'647,284,638,639,640,644,770,655,274,275,-499,395,-499,312,-263,-499',
'539,-499,638,639,640,644,698,699,-499,700,88,92,685,127,-499,638,639',
'640,644,327,328,329,330,331,638,639,640,644,308,274,275,792,290,293',
'460,-499,390,391,458,459,682,794,280,22,26,31,609,39,-499,671,-499,53',
'63,-499,127,127,82,317,91,96,7,13,21,27,28,670,-74,669,666,51,56,60',
'64,69,73,77,312,609,98,312,609,312,808,681,312,41,655,628,48,52,59,67',
'70,74,78,83,88,92,812,10,18,614,30,33,38,312,313,289,292,295,298,301',
'303,305,307,309,609,314,291,280,820,297,300,595,140,280,317,143,590',
'470,72,76,562,87,830,831,308,127,311,24,290,293,296,299,302,304,306',
'61,310,749,-264,544,84,89,93,4,11,19,472,280,523,37,42,282,294,508,-219',
'507,284,22,26,31,34,39,-63,840,841,53,63,842,474,845,82,468,91,96,7',
'13,21,27,28,848,467,465,464,51,56,60,64,69,73,77,461,746,98,854,746',
'748,856,681,32,41,45,47,48,52,59,67,70,74,78,83,88,92,312,10,18,448',
'30,33,38,312,313,289,292,295,298,301,303,305,307,309,447,314,291,427',
'861,297,300,862,44,423,421,54,419,868,72,76,869,87,417,97,308,14,311',
'24,290,293,296,299,302,304,306,61,310,871,416,609,84,89,93,4,11,19,415',
'609,406,37,42,878,294,395,127,467,472,17,22,26,31,34,39,326,393,280',
'53,63,389,365,888,82,362,91,96,7,13,21,27,28,890,346,893,746,51,56,60',
'64,69,73,77,317,315,98,327,328,329,330,331,32,41,45,47,48,52,59,67,70',
'74,78,83,88,92,895,10,18,287,30,33,38,312,313,289,292,295,298,301,303',
'305,307,309,280,-501,-501,180,609,297,300,156,44,609,129,54,99,609,72',
'76,,87,,97,308,14,311,24,290,293,296,299,302,304,306,61,310,,,,84,89',
'93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13,21',
'27,28,,,,,51,56,60,64,69,73,77,,,98,,,312,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,312,-501,-501,-501,-501,298,301,308',
',-501,-501,290,293,296,299,,297,300,,44,,,54,,,72,76,,87,,97,308,14',
'311,24,290,293,296,299,302,304,306,61,310,,,,84,89,93,4,11,19,,,,37',
'42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60',
'64,69,73,77,,,98,,,,312,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,',
'10,18,,30,33,38,312,313,289,292,295,298,301,303,308,307,309,,290,293',
'296,299,297,300,,44,,,54,,,72,76,,87,,97,308,14,311,24,290,293,296,299',
'302,304,306,61,310,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,',
',53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,327',
'328,329,330,331,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30',
'33,38,312,,,,,,,,,,,,,,,,297,300,,44,,,54,,,72,76,,87,,97,308,14,311',
'24,290,293,296,299,,,306,61,310,,,,84,89,93,4,11,19,,,,37,42,17,22,26',
'31,34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77',
',,98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
'312,313,289,292,295,298,301,,,307,309,,,,,,297,300,,44,,,54,,,72,76',
',87,,97,308,14,311,24,290,293,296,299,302,304,306,61,310,,,,84,89,93',
'4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13,21,27',
'28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67,70,74',
'78,83,88,92,,10,18,,30,33,38,312,-501,-501,-501,-501,298,301,,,-501',
'-501,,,,,,297,300,,44,,,54,,,72,76,,87,,97,308,14,311,24,290,293,296',
'299,302,304,306,61,310,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31,34,39',
',,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,',
',,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,312,,',
',,,,,,,,,,,,,297,300,,44,,,54,,,72,76,,87,,97,308,14,311,24,290,293',
'296,299,,,306,61,310,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31,34,39',
',,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,',
',,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,312,,',
',,,,,,,,,,,,,297,300,,44,,,54,,,72,76,,87,,97,308,14,311,24,290,293',
'296,299,,,306,61,310,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31,34,39',
',,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,',
',,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,312,313',
'289,292,295,298,301,303,305,307,309,,-501,-501,,,297,300,,44,,,54,,',
'72,76,,87,,97,308,14,311,24,290,293,296,299,302,304,306,61,310,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,312,-501,-501,-501,-501,298,301,',
',-501,-501,,,,,,297,300,,44,,,324,,,72,76,,87,,97,308,14,311,24,290',
'293,296,299,302,304,306,61,310,,,,84,89,93,4,11,19,,,,37,42,17,22,26',
'31,34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77',
',,98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
'312,-501,-501,-501,-501,298,301,,,-501,-501,,,,,,297,300,,44,,,54,,',
'72,76,,87,,97,308,14,311,24,290,293,296,299,302,304,306,61,310,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,312,-501,-501,-501,-501,298,301,',
',-501,-501,,,,,,297,300,,44,,,54,,,72,76,,87,,97,308,14,311,24,290,293',
'296,299,302,304,306,61,310,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31',
'34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,',
',98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
'312,-501,-501,-501,-501,298,301,,,-501,-501,,,,,,297,300,,44,,,54,,',
'72,76,,87,,97,308,14,311,24,290,293,296,299,302,304,306,61,310,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,312,,,,,,,,,,,,,,,,297,300,,44,,',
'324,,,72,76,,87,,97,308,14,311,24,290,293,296,299,,,306,61,310,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,312,,,,,,,,,,,,,,,,297,300,,44,,',
'54,,,72,76,,87,,97,308,14,,24,290,293,296,299,,,,61,,,,,84,89,93,4,11',
'19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,',
',,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83',
'88,92,,10,18,,30,33,38,312,,,,,,,,,,,,,,,,297,300,,44,,,54,,,72,76,',
'87,,97,308,14,311,24,290,293,296,299,,,,61,,,,,84,89,93,4,11,19,,,,37',
'42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60',
'64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,312,,,,,,,,,,,,,,,,297,300,,44,,,54,,,72,76,,87,,97,308',
'14,311,24,290,293,296,299,,,,61,,,,,84,89,93,4,11,19,,,,37,42,17,22',
'26,31,34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73',
'77,,,98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33',
'38,,,,,,,,,,,,,,,,,,,,44,,,54,,,72,76,,87,,97,,14,,24,,,,,,,,61,,,,',
'84,89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7',
'13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59',
'67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,44,,,54,,,72',
'76,,87,,97,,14,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,17,22,26',
'31,34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77',
',,98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
',,,,,,,,,,,,,,,,,,,44,,,54,,,72,76,,87,,97,,14,,24,,,,,,,,61,,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,44,,,54,,,72,76',
',87,,97,,14,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31',
'34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,',
',98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
',,,,,,,,,,,,,,,,,,,44,,,54,,,72,76,,87,,97,,14,,24,,,,,,,,61,,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,44,,,54,,,72,76',
',87,,97,,14,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31',
'34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,',
',98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
',,,,,,,,,,,,,,,,,,,44,,,54,,,72,76,,87,,97,,14,,24,,,,,,,,61,,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,44,,,54,,,72,76',
',87,,97,,14,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31',
'34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,',
',98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
',,,,,,,,,,,,,,,,,,,44,,,54,,,72,76,,87,,97,,14,,24,,,,,,,,61,,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,44,,,54,,,72,76',
',87,,97,,14,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,17,22,26,31',
'34,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,',
',98,,,,,,32,41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
',,,,,,,,,,,,,,,,,,,44,,,324,,,72,76,,87,,97,,14,,24,,,,,,,,61,,,,,84',
'89,93,4,11,19,,,,37,42,17,22,26,31,34,39,,,,53,63,,,,82,,91,96,7,13',
'21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,44,,,54,,,72,76',
',87,,97,,14,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,64,69,73,77,140,,,143,,,72,76,,87,,,48,52,152,24,70,74,153,83',
',,,145,,,,,84,89,93,4,11,19,,,,37,42,-476,-476,-476,,-476,,,,-476,-476',
',,,-476,,-476,-476,-476,-476,-476,-476,-476,,-476,,,-476,-476,-476,-476',
'-476,-476,-476,,,,,,,,,,-476,,,-476,-476,-476,-476,-476,-476,-476,-476',
'-476,-476,,-476,-476,,-476,-476,-476,,,,,,,,,,,,,,,,,,,,-476,,,-476',
'-476,,-476,-476,,-476,,-476,,-476,,-476,,,,,,,,-476,,-476,,,-476,-476',
'-476,-476,-476,-476,,,,-476,-476,-253,-253,-253,,-253,,,,-253,-253,',
',,-253,,-253,-253,-253,-253,-253,-253,-253,,,,,-253,-253,-253,-253,-253',
'-253,-253,,,,,,,,,,-253,,,-253,-253,-253,-253,-253,-253,-253,-253,-253',
'-253,,-253,-253,,-253,-253,-253,,,,,,,,,,,,,,,,,,,,-253,,,-253,127,',
'-253,-253,,-253,,-253,,-253,,-253,,,,,,,,-253,,,,,-253,-253,-253,-253',
'-253,-253,,,,-253,-253,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27',
'28,,,,,51,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88',
'92,,10,18,,30,33,38,,,,,,,,,,,,,,,,64,69,73,77,140,,,143,,,72,76,,87',
',,48,52,152,24,70,74,153,83,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22',
'26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73',
'77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,',
',,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,61,,,,,84,89,93',
'4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28',
',,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88',
'92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24',
',,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,-253,-253,-253,,-253,,,,-253',
'-253,,,,-253,,-253,-253,-253,-253,-253,-253,-253,,,,,-253,-253,-253',
'-253,-253,-253,-253,,,,,,,,,,-253,,,-253,-253,-253,-253,-253,-253,-253',
'-253,-253,-253,,-253,-253,,-253,-253,-253,,,,,,,,,,,,,,,,,,,,-253,,',
'-253,326,,-253,-253,,-253,,-253,,-253,,-253,,,,,,,,-253,,,,,-253,-253',
'-253,-253,-253,-253,,,,-253,-253,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70',
'74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76',
',87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,',
'53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,56,60,64,69,73,77,,,,,,,',
',,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,',
',,,,,140,,,143,,,72,76,,87,,344,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19',
',,,37,42,-477,-477,-477,,-477,,,,-477,-477,,,,-477,,-477,-477,-477,-477',
'-477,-477,-477,,-477,,,-477,-477,-477,-477,-477,-477,-477,,,,,,,,,,-477',
',,-477,-477,-477,-477,-477,-477,-477,-477,-477,-477,,-477,-477,,-477',
'-477,-477,,,,,,,,,,,,,,,,,,,,-477,,,-477,-477,,-477,-477,,-477,,-477',
',-477,,-477,,,,,,,,-477,,-477,,,-477,-477,-477,-477,-477,-477,,,,-477',
'-477,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116',
'117,64,69,73,77,,,,,,,,,,113,,,48,52,59,67,70,74,78,83,88,92,636,10',
'18,641,645,647,112,,,,,,,,,,,,,,,,,,,,826,,,143,,,72,76,,87,,,649,,',
',,,,638,639,640,644,,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53',
'63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,',
',41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,',
',,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,',
',37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60',
'64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30',
'33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,61,,,',
',84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107',
'108,27,28,,,,,115,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74',
'78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87',
',344,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,',
'53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,',
',,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,',
',,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,149,,134,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26',
'31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73',
'77,,,,,,,,,,113,,,48,52,59,67,70,74,78,83,88,92,636,10,18,641,645,647',
'112,,,,,,,,,,,,,,,,,,,,176,,,143,,,72,76,,87,,,649,,,,,,,638,639,640',
'644,,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70',
'74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76',
',87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,',
'53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,',
',,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,',
',,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56',
'60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18',
',30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,588,,134,,24,,,',
',,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91',
'96,7,107,108,27,28,,,,,115,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59',
'67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,',
',72,76,,87,,344,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26',
'31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73',
'77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,',
',,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93',
'4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28',
',,,,115,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92',
',10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,607,,134',
',24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,',
',,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41',
',,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,',
'140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37',
'42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117',
'64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33',
'38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84',
'89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108',
'27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78',
'83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,',
',,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63',
',,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41',
',,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,',
'140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37',
'42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117',
'64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33',
'38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,778,,,,24,,,,,,,,145,,',
',,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107',
'108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74',
'78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87',
',,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53',
'63,,,,82,,91,96,7,107,108,27,28,,,,,115,56,60,64,69,73,77,,,,,,,,,,41',
',,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,',
'140,,,143,,,72,76,,87,,344,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,',
'37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116',
'117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,',
'30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145',
',,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107',
'108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74',
'78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87',
',,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53',
'63,,,,82,,91,96,7,107,108,27,28,,,,,115,56,60,64,69,73,77,,,,,,,,,,41',
',,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,',
'140,,,143,,,72,76,,87,,344,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,',
'37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,56',
'60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30',
'33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,400,76,,87,,149,,134,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,149,,134,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26',
'31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73',
'77,,,,,,,,,,113,,,48,52,59,67,70,74,78,83,88,92,,10,18,,,,112,,,,,,',
',,,,,,,,,,,,,114,,,54,,,72,76,,87,,97,,14,,,,,,,,,716,,,,,,84,89,93',
'4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,',
',,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92',
',10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,',
',,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91',
'96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59',
'67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,',
',72,76,,87,,607,,134,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22',
'26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69',
'73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,',
',,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89',
'93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27',
'28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83',
'88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,',
',24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,',
',,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41',
',,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,',
'140,,,143,,,72,76,,87,,875,,134,,24,,,,,,,,145,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18',
',30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,344,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,872,,134,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,-253,-253',
'-253,,-253,,,,-253,-253,,,,-253,,-253,-253,-253,-253,-253,-253,-253',
',,,,-253,-253,-253,-253,-253,-253,-253,,,,,,,,,,-253,,,-253,-253,-253',
'-253,-253,-253,-253,-253,-253,-253,,-253,-253,,-253,-253,-253,,,,,,',
',,,,,,,,,,,,,-253,,,-253,127,,-253,-253,,-253,,-253,,-253,,-253,,,,',
',,,-253,,,,,-253,-253,-253,-253,-253,-253,,,,-253,-253,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,',
',,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,',
',,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70',
'74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76',
',87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,',
'53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,',
',,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,',
',,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56',
'60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30',
'33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,',
',,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107',
'108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74',
'78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87',
',,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53',
'63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,',
',113,,,48,52,59,67,70,74,78,83,88,92,,10,18,,,,112,,,,,,,,,,,,,,,,,',
',,114,,,54,,,72,76,,87,,97,,14,,,,,,,,,,,,,,,84,89,93,4,11,19,,,,37',
'42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64',
'69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
',,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89',
'93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28',
',,,,51,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92',
',10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,',
',,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,',
'91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52',
'59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143',
',,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31',
',39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,',
',,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,',
',,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51',
'56,60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',61,,,,,84,89,93,4,11,19,,,,37,42,-481,-481,-481,,-481,,,,-481,-481',
',,,-481,,-481,-481,-481,-481,-481,-481,-481,,,,,-481,-481,-481,-481',
'-481,-481,-481,,,,,,,,,,-481,,,-481,-481,-481,-481,-481,-481,-481,-481',
'-481,-481,,-481,-481,,-481,-481,-481,,,,,,,,,,,,,,,,,,,,-481,,,-481',
'-481,,-481,-481,,-481,,-481,,-481,,-481,,,,,,,,-481,,,,,-481,-481,-481',
'-481,-481,-481,,,,-481,-481,-482,-482,-482,,-482,,,,-482,-482,,,,-482',
',-482,-482,-482,-482,-482,-482,-482,,,,,-482,-482,-482,-482,-482,-482',
'-482,,,,,,,,,,-482,,,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482',
',-482,-482,,-482,-482,-482,,,,,,,,,,,,,,,,,,,,-482,,,-482,-482,,-482',
'-482,,-482,,-482,,-482,,-482,,,,,,,,-482,,,,,-482,-482,-482,-482,-482',
'-482,,,,-482,-482,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28',
',,,,115,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92',
',10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,344,,,,24',
',,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82',
',91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48,52',
'59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143',
',,72,76,,87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31',
',39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,',
',,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,',
',,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51',
'56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18',
',30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145',
',,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107',
'108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74',
'78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87',
',,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53',
'63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,,41',
',,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,',
'140,,,143,,,72,76,,87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42',
'22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64',
'69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
',,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89',
'93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28',
',,,,51,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92',
',10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,536,,,,24',
',,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82',
',91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48',
'52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,',
',143,,,72,76,,87,,688,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42',
'190,194,199,205,209,214,218,223,,,241,244,245,248,253,,,183,186,188',
'196,201,207,210,,,224,228,234,262,265,267,269,254,255,257,182,185,187',
'192,197,203,212,216,220,259,260,261,239,,,268,,,,,,,,198,204,,213,217',
'227,232,,240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189',
'193,202,208,211,215,219,225,229,,238,,,250,270,,,22,26,31,,39,,,42,53',
'63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,',
',41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,',
',,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,',
',37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116',
'117,64,69,73,77,,,,,,,,,,113,,,48,52,59,67,70,74,78,83,88,92,,10,18',
',,,112,,,,,,,,,,,,,,,,,,,,176,,,143,,,72,76,,87,,,,,,,,,,,,,,,,,,,84',
'89,93,4,11,19,,,,37,42,190,194,199,205,209,214,218,223,,,241,244,245',
'248,253,,,183,186,188,196,201,207,210,,,224,228,234,262,265,267,269',
'254,255,257,182,185,187,192,197,203,212,216,220,259,260,261,239,266',
',268,,,,,,,,198,204,,213,217,227,232,,240,243,,,252,,,,,191,195,200',
'206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219,225,229,,238,,',
'250,270,,,22,26,31,,39,,,42,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70',
'74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76',
',87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,',
'53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,',
',,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,',
',,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,679,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31',
',39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77',
',,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,',
',,,,,,,,,,,,140,,,143,,,72,76,,87,,797,,134,,24,,,,,,,,145,,,,,84,89',
'93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27',
'28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83',
'88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,',
',24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,190,194,199,205,209,214',
'218,223,,,241,244,245,248,253,,,183,186,188,196,201,207,210,,,224,228',
'234,262,265,267,269,254,255,257,182,185,187,192,197,203,212,216,220',
'259,260,261,239,,,268,,,,,,,,198,204,,213,217,227,232,,240,243,,,252',
',,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219',
'225,229,,238,,,250,270,,,22,26,31,,39,,,42,53,63,,,,82,,91,96,7,107',
'108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,113,,,48,52,166,67,70',
'74,167,83,88,92,,10,18,,,,112,,,,,,,,,,,,,,,,,,,,163,,,143,,,72,76,',
'87,,,,,,,,,,,,,,,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63',
',,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41',
',,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,',
'140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37',
'42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117',
'64,69,73,77,,,,,,,,,,113,,,48,52,59,67,70,74,78,83,88,92,,10,18,,,,112',
',,,,,,,,,,,,,,,,,,,176,,,177,,,72,76,,87,,178,,172,,,,,,,,,,,,,,,84',
'89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108',
'27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78',
'83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,',
'800,,134,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,',
',,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,',
',,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,',
',,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19,',
',,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60',
'64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30',
'33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,61,,,',
',84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107',
'108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74',
'78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87',
',,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53',
'63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,',
',41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,',
',,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,',
',37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116',
'117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,',
'30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145',
',,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107',
'108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74',
'78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87',
',,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53',
'63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,',
',41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,',
',,,,140,,,143,470,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,',
',,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11',
'19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10',
'18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,',
',145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96',
'7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39',
',,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,',
',,,,,,,113,,,48,52,166,67,70,74,167,83,88,92,,10,18,,,,112,,,,,,,,,',
',,,,,,,161,,,163,,,143,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18',
',30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,149,,134,,24,,,',
',,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91',
'96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59',
'67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,',
',72,76,,87,,536,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26',
'31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73',
'77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,',
',,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,898,,134,,24,,,,,,,,145,,,,,84',
'89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108',
'27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78',
'83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,',
',,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,34,39,,,,53',
'63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32',
'41,45,47,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,',
',,,,,,,44,,,54,,,72,76,,87,,97,,14,,24,,,,,,,,61,,,,,84,89,93,4,11,19',
',,,37,42,190,194,199,205,209,214,218,223,,,241,244,245,248,253,,,183',
'186,188,196,201,207,210,,,224,228,234,262,265,267,269,254,255,257,182',
'185,187,192,197,203,212,216,220,259,260,261,239,,,268,,,,,,,,198,204',
',213,217,227,232,,240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256',
'184,,189,193,202,208,211,215,219,225,229,,238,,,250,270,,,22,26,31,',
'39,,,42,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,56,60,64,69,73,77',
',,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,',
',,,,,,,,,,,,140,,,143,,511,72,76,,87,,149,,134,,24,,,,,,,,145,,,,,84',
'89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27',
'28,,,,,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83',
'88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,',
',24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,',
',82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48',
'52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,',
',143,,,72,76,,87,,,,,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22',
'26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69,73',
'77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,',
',,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,61,,,,,84,89,93',
'4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,',
',,51,56,60,64,69,73,77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92',
',10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,',
',,,,,61,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,34,39,,,,53,63,,,,82',
',91,96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,98,,,,,,32,41,45,47',
'48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,44',
',,54,,,72,76,,87,,97,,14,,24,,,,,,,,61,,,,,84,89,93,4,11,19,,,,37,42',
'22,26,31,,39,,,,53,63,,,,82,,91,96,7,13,21,27,28,,,,,51,56,60,64,69',
'73,77,,,98,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38',
',,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24,,,,,,,,61,,,,,84,89',
'93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27',
'28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83',
'88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,',
',24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,',
',,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41',
',,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,',
'140,,,143,,,72,76,,87,,804,,134,,24,,,,,,,,145,,,,,84,89,93,4,11,19',
',,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115',
'56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18',
',30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,149,,134,,24,,,',
',,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91',
'96,7,13,21,27,28,,,,,51,56,60,64,69,73,77,,,,,,,,,,41,,,48,52,59,67',
'70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72',
'76,,87,,536,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31',
',39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77',
',,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,',
',,,,,,,,,,,,140,,,143,,,72,76,,87,,835,,,,24,,,,,,,,145,,,,,84,89,93',
'4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28',
',,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88',
'92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,,,,,24',
',,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22,26,31,,39,,,,53,63,,,,82',
',91,96,7,107,108,27,28,,,,,115,116,117,64,69,73,77,,,,,,,,,,41,,,48',
'52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,,,,,,,,,,,,,,,,,,,,140,',
',143,,,72,76,,87,,,,,,24,,,,,,,,145,,,,,84,89,93,4,11,19,,,,37,42,22',
'26,31,,39,,,,53,63,,,,82,,91,96,7,107,108,27,28,,,,,115,116,117,64,69',
'73,77,,,,,,,,,,41,,,48,52,59,67,70,74,78,83,88,92,,10,18,,30,33,38,',
',,,,,,,,,,,,,,,,,,140,,,143,,,72,76,,87,,613,,134,,24,,,,,,,,145,,,',
',84,89,93,4,11,19,,,,37,42,190,194,199,205,209,214,218,223,,,241,244',
'245,248,253,,,183,186,188,196,201,207,210,,,224,228,234,262,265,267',
'269,254,255,257,182,185,187,192,197,203,212,216,220,259,260,261,239',
',,268,,,,,,,,198,204,,213,217,227,232,,240,243,,,252,,,,,191,195,200',
'206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219,225,229,,238,,',
'250,190,194,199,205,209,214,218,223,,,241,244,245,248,253,,,183,186',
'188,196,201,207,210,,,224,228,234,262,265,267,269,254,255,257,182,185',
'187,192,197,203,212,216,220,259,260,261,239,353,354,268,355,,,,,,,198',
'204,,213,217,227,232,,240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,',
'256,184,,189,193,202,208,211,215,219,225,229,,238,,,250,190,194,199',
'205,209,214,218,223,,,241,244,245,248,253,,,183,186,188,196,201,207',
'210,,,224,228,234,262,265,267,269,254,255,257,182,185,187,192,197,203',
'212,216,220,259,260,261,239,353,354,268,355,,,,,,,198,204,,213,217,227',
'232,,240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193',
'202,208,211,215,219,225,229,,238,,,250,190,194,199,205,209,214,218,223',
',,241,244,245,248,253,,,183,186,188,196,201,207,210,,,224,228,234,237',
'242,246,249,254,255,257,182,185,187,192,197,203,212,216,220,226,231',
'236,239,70,74,247,83,,,,,,,198,204,,213,217,227,232,,240,243,,,252,',
',,,191,195,200,206,,,,,,233,,,,,,,256,184,,189,193,202,208,211,215,219',
'225,229,,238,616,377,250,,617,,,,,,,,198,204,,213,217,227,232,,240,243',
',,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215',
'219,225,229,,238,885,384,250,,886,,,,,,,,198,204,,213,217,227,232,,240',
'243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211',
'215,219,225,229,,238,574,384,250,,575,,,,,,,,198,204,,213,217,227,232',
',240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202',
'208,211,215,219,225,229,,238,570,377,250,,571,,,,,,,,198,204,,213,217',
'227,232,,240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189',
'193,202,208,211,215,219,225,229,,238,882,377,250,,883,,,,,,,,198,204',
',213,217,227,232,,240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256',
'184,,189,193,202,208,211,215,219,225,229,,238,,,250,312,313,289,292',
'295,298,301,303,305,307,309,,314,291,,,297,300,,,,-219,,,,,,,,,,308',
',311,,290,293,296,299,302,304,306,,310,,,,,,,,,,,,,,,,294,,-219,312',
'313,289,292,295,298,301,303,305,307,309,,314,291,,,297,300,,,,,,,,,',
',,,,308,,311,,290,293,296,299,302,304,306,,310,,,,,,,598,377,,,599,',
',,,294,,609,198,204,,213,217,227,232,,240,243,,,252,,,,,191,195,200',
'206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219,225,229,,238,519',
'384,250,,520,,,,,,,,198,204,,213,217,227,232,,240,243,,,252,,,,,191',
'195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219,225,229',
',238,519,384,250,,520,,,,,,,,198,204,,213,217,227,232,,240,243,,,252',
',,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219',
'225,229,,238,601,384,250,,602,,,,,,,,198,204,,213,217,227,232,,240,243',
',,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215',
'219,225,229,,238,376,377,250,,379,,,,,,,,198,204,,213,217,227,232,,240',
'243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211',
'215,219,225,229,,238,519,384,250,,520,,,,,,,,198,204,,213,217,227,232',
',240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202',
'208,211,215,219,225,229,,238,519,384,250,,520,,,,,,,,198,204,,213,217',
'227,232,,240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189',
'193,202,208,211,215,219,225,229,,238,598,377,250,,599,,,,,,,,198,204',
',213,217,227,232,,240,243,,,252,,,,,191,195,200,206,,,,,,,,,,,,,256',
'184,,189,193,202,208,211,215,219,225,229,,238,601,384,250,,602,,,,,',
',,198,204,,213,217,227,232,,240,243,,,252,,,,,191,195,200,206,,,,,,',
',,,,,,256,184,,189,193,202,208,211,215,219,225,229,,238,623,377,250',
',624,,,,,,,,198,204,,213,217,227,232,,240,243,,,252,,,,,191,195,200',
'206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219,225,229,,238,519',
'384,250,,520,,,,,,,,198,204,,213,217,227,232,,240,243,,,252,,,,,191',
'195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219,225,229',
',238,626,384,250,,627,,,,,,,,198,204,,213,217,227,232,,240,243,,,252',
',,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215,219',
'225,229,,238,383,384,250,,385,,,,,,,,198,204,,213,217,227,232,,240,243',
',,252,,,,,191,195,200,206,,,,,,,,,,,,,256,184,,189,193,202,208,211,215',
'219,225,229,,238,,,250,312,313,289,292,295,298,301,303,305,307,309,',
'314,291,,,297,300,,,,,,,,,,,,,,308,,311,,290,293,296,299,302,304,306',
',310,,312,313,289,292,295,298,301,303,305,307,309,,314,291,294,665,297',
'300,,,,,,,,,,,,,,308,,311,,290,293,296,299,302,304,306,,310,312,313',
'289,292,295,298,301,303,305,307,309,,314,291,,294,297,300,,,,,,,,,,',
',,,308,,311,,290,293,296,299,302,304,306,,310,312,313,289,292,295,298',
'301,303,305,307,309,,314,291,,294,297,300,,,,,,,,,,,,,,308,,311,,290',
'293,296,299,302,304,306,,310,312,313,289,292,295,298,301,303,305,307',
'309,,314,291,280,294,297,300,,,,,,,,,,,,,,308,,311,,290,293,296,299',
'302,304,306,,310,312,313,289,292,295,298,301,303,305,307,309,,314,291',
',294,297,300,,,,,,,,,,,,,,308,,311,,290,293,296,299,302,304,306,,310',
'312,313,289,292,295,298,301,303,305,307,309,,314,291,280,294,297,300',
',,,,,,,,,,,,,308,,311,,290,293,296,299,302,304,306,,310,312,313,289',
'292,295,298,301,303,305,307,309,,314,291,,294,297,300,,,,,,,,,,,,,,308',
',311,,290,293,296,299,302,304,306,,310,312,313,289,292,295,298,301,303',
'305,307,309,,314,291,,294,297,300,,,,,,,,,,,,,,308,,311,,290,293,296',
'299,302,304,306,,310,312,313,289,292,295,298,301,303,305,307,309,,314',
'291,,294,297,300,,,,,,,,,,,,,,308,,311,,290,293,296,299,302,304,306',
',310,312,313,289,292,295,298,301,303,305,307,309,,314,291,,294,297,300',
',,,,,,,,,,,,,308,,311,,290,293,296,299,302,304,306,,310,312,313,289',
'292,295,298,301,303,305,307,309,,314,291,,294,297,300,,,,,,,,,,,,,,308',
',311,,290,293,296,299,302,304,306,,310,312,313,289,292,295,298,301,303',
'305,307,309,,314,291,,294,297,300,,,,,,,,,,,,,,308,,311,,290,293,296',
'299,302,304,306,,310,312,313,289,292,295,298,301,303,305,307,309,,314',
'291,,294,297,300,,,,,,,,,,,,,,308,,311,,290,293,296,299,302,304,306',
',310,312,313,289,292,295,298,301,303,305,307,309,,314,291,,294,297,300',
',,,,,,,,,,,,,308,,311,,290,293,296,299,302,304,306,,310,312,313,289',
'292,295,298,301,303,305,307,309,,314,291,,294,297,300,,,,,,,,,,,,,,308',
',311,,290,293,296,299,302,304,306,,310,,,,,,,,,,,,,,,,294' ]
        racc_action_table = arr = Array.new(23834, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'376,360,650,650,729,883,138,376,376,376,165,729,883,376,376,9,376,883',
'12,585,249,577,336,320,242,376,12,249,155,642,66,242,319,319,642,376',
'376,66,376,376,376,376,376,617,163,887,887,416,163,237,617,729,138,763',
'577,617,237,686,883,585,711,360,360,360,376,376,376,376,376,376,376',
'376,376,376,376,376,376,376,379,885,376,376,376,886,376,379,379,379',
'376,650,155,379,379,416,379,376,617,376,9,376,376,376,376,376,376,376',
'1,376,376,376,829,882,165,379,379,636,379,379,379,379,379,646,376,376',
'435,376,626,376,376,435,376,165,336,320,336,320,165,336,320,662,662',
'711,379,379,379,379,379,379,379,379,379,379,379,379,379,379,648,551',
'379,379,379,711,379,763,109,763,379,686,763,686,407,502,686,379,8,379',
'670,379,379,379,379,379,379,379,635,379,882,379,131,885,626,885,662',
'886,885,886,345,166,886,345,379,379,67,379,502,379,379,626,379,67,67',
'67,631,670,67,67,67,627,67,555,829,882,829,882,629,829,882,626,67,67',
'407,407,626,571,653,575,8,67,67,407,67,67,67,67,67,109,731,166,131,131',
'131,746,746,551,166,551,396,8,551,166,357,100,654,357,100,109,67,67',
'67,67,67,67,67,67,67,67,67,67,67,67,166,627,67,67,67,111,834,67,834',
'396,67,106,731,67,625,67,571,67,627,67,166,67,67,67,67,67,67,67,570',
'67,712,67,742,393,571,555,575,555,627,742,555,100,100,627,67,67,67,67',
'656,67,67,598,598,598,571,598,575,350,343,598,598,343,397,623,598,167',
'598,598,598,598,598,598,598,106,659,562,574,598,598,598,598,598,598',
'598,349,742,111,35,35,349,364,570,616,598,106,397,598,598,598,598,598',
'598,598,598,598,598,111,598,598,570,598,598,598,623,393,167,562,350',
'350,350,623,562,167,38,38,623,712,167,712,570,825,712,598,598,393,598',
'598,825,598,598,602,598,616,598,661,598,623,598,167,616,364,364,364',
'43,616,598,359,574,43,359,598,598,598,598,598,598,623,601,167,598,598',
'236,599,599,599,616,599,574,236,598,599,599,618,825,135,599,602,599',
'599,599,599,599,599,599,385,616,611,383,599,599,599,599,599,599,599',
'159,36,664,79,221,482,609,159,601,599,79,221,599,599,599,599,599,599',
'599,599,599,599,404,599,599,135,599,599,599,404,385,608,347,383,347',
'385,482,133,383,6,482,482,36,861,133,606,6,36,599,599,861,599,599,159',
'599,599,79,599,672,599,677,599,23,599,600,171,173,824,594,404,591,599',
'171,173,824,518,599,599,599,599,599,599,518,518,518,599,599,518,518',
'518,133,518,6,624,287,599,861,231,684,175,624,518,226,23,231,624,175',
'740,23,226,518,518,740,518,518,518,518,518,171,173,824,823,589,895,105',
'434,448,169,823,521,895,105,434,448,169,287,521,521,521,687,287,521',
'521,521,649,521,624,649,649,649,518,246,175,586,247,521,689,518,246',
'695,854,247,518,518,521,521,573,521,521,521,521,521,572,755,823,569',
'895,105,434,448,169,563,753,619,518,753,753,753,619,649,649,649,649',
'668,668,339,339,518,558,518,485,549,518,540,521,854,854,854,854,557',
'557,521,557,557,557,538,521,521,755,755,755,755,154,154,154,154,154',
'753,753,753,753,485,431,431,715,485,485,266,521,112,112,266,266,535',
'718,522,82,82,82,721,82,521,510,521,82,82,521,725,726,82,728,82,82,82',
'82,82,82,82,509,508,506,501,82,82,82,82,82,82,82,498,734,82,494,737',
'479,741,533,476,82,466,449,82,82,82,82,82,82,82,82,82,82,751,82,82,425',
'82,82,82,533,533,533,533,533,533,533,533,533,533,533,422,533,533,756',
'757,533,533,405,82,403,402,82,401,392,82,82,380,82,771,773,533,374,533',
'82,533,533,533,533,533,533,533,82,533,637,777,358,82,82,82,82,82,82',
'348,342,340,82,82,82,533,323,533,322,82,283,283,283,283,283,321,791',
'793,283,283,796,288,798,283,279,283,283,283,283,283,283,283,801,278',
'277,276,283,283,283,283,283,283,283,273,813,283,815,816,818,819,604',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,271,283,283',
'176,283,283,283,604,604,604,604,604,604,604,604,604,604,604,174,604',
'604,156,826,604,604,828,283,150,148,283,147,836,283,283,837,283,146',
'283,604,283,604,283,604,604,604,604,604,604,604,283,604,839,140,844',
'283,283,283,283,283,283,137,847,129,283,283,850,604,121,117,857,283',
'761,761,761,761,761,761,116,114,113,761,761,110,95,870,761,90,761,761',
'761,761,761,761,761,873,81,879,880,761,761,761,761,761,761,761,50,47',
'761,58,58,58,58,58,761,761,761,761,761,761,761,761,761,761,761,761,761',
'761,884,761,761,44,761,761,761,477,477,477,477,477,477,477,477,477,477',
'477,41,477,477,29,889,477,477,19,761,892,11,761,3,900,761,761,,761,',
'761,477,761,477,761,477,477,477,477,477,477,477,761,477,,,,761,761,761',
'761,761,761,,,,761,761,785,785,785,785,785,785,,,,785,785,,,,785,,785',
'785,785,785,785,785,785,,,,,785,785,785,785,785,785,785,,,785,,,486',
',,785,785,785,785,785,785,785,785,785,785,785,785,785,785,,785,785,',
'785,785,785,499,499,499,499,499,499,499,486,,499,499,486,486,486,486',
',499,499,,785,,,785,,,785,785,,785,,785,499,785,499,785,499,499,499',
'499,499,499,499,785,499,,,,785,785,785,785,785,785,,,,785,785,790,790',
'790,790,790,790,,,,790,790,,,,790,,790,790,790,790,790,790,790,,,,,790',
'790,790,790,790,790,790,,,790,,,,483,,790,790,790,790,790,790,790,790',
'790,790,790,790,790,790,,790,790,,790,790,790,491,491,491,491,491,491',
'491,491,483,491,491,,483,483,483,483,491,491,,790,,,790,,,790,790,,790',
',790,491,790,491,790,491,491,491,491,491,491,491,790,491,,,,790,790',
'790,790,790,790,,,,790,790,504,504,504,504,504,504,,,,504,504,,,,504',
',504,504,504,504,504,504,504,,,,,504,504,504,504,504,504,504,,,504,471',
'471,471,471,471,504,504,504,504,504,504,504,504,504,504,504,504,504',
'504,,504,504,,504,504,504,490,,,,,,,,,,,,,,,,490,490,,504,,,504,,,504',
'504,,504,,504,490,504,490,504,490,490,490,490,,,490,504,490,,,,504,504',
'504,504,504,504,,,,504,504,315,315,315,315,315,315,,,,315,315,,,,315',
',315,315,315,315,315,315,315,,,,,315,315,315,315,315,315,315,,,315,',
',,,,315,315,315,315,315,315,315,315,315,315,315,315,315,315,,315,315',
',315,315,315,489,489,489,489,489,489,489,,,489,489,,,,,,489,489,,315',
',,315,,,315,315,,315,,315,489,315,489,315,489,489,489,489,489,489,489',
'315,489,,,,315,315,315,315,315,315,,,,315,315,474,474,474,474,474,474',
',,,474,474,,,,474,,474,474,474,474,474,474,474,,,,,474,474,474,474,474',
'474,474,,,474,,,,,,474,474,474,474,474,474,474,474,474,474,474,474,474',
'474,,474,474,,474,474,474,493,493,493,493,493,493,493,,,493,493,,,,',
',493,493,,474,,,474,,,474,474,,474,,474,493,474,493,474,493,493,493',
'493,493,493,493,474,493,,,,474,474,474,474,474,474,,,,474,474,806,806',
'806,806,806,806,,,,806,806,,,,806,,806,806,806,806,806,806,806,,,,,806',
'806,806,806,806,806,806,,,806,,,,,,806,806,806,806,806,806,806,806,806',
'806,806,806,806,806,,806,806,,806,806,806,488,,,,,,,,,,,,,,,,488,488',
',806,,,806,,,806,806,,806,,806,488,806,488,806,488,488,488,488,,,488',
'806,488,,,,806,806,806,806,806,806,,,,806,806,822,822,822,822,822,822',
',,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,822,822,822,822,822',
'822,822,,,822,,,,,,822,822,822,822,822,822,822,822,822,822,822,822,822',
'822,,822,822,,822,822,822,487,,,,,,,,,,,,,,,,487,487,,822,,,822,,,822',
'822,,822,,822,487,822,487,822,487,487,487,487,,,487,822,487,,,,822,822',
'822,822,822,822,,,,822,822,517,517,517,517,517,517,,,,517,517,,,,517',
',517,517,517,517,517,517,517,,,,,517,517,517,517,517,517,517,,,517,',
',,,,517,517,517,517,517,517,517,517,517,517,517,517,517,517,,517,517',
',517,517,517,500,500,500,500,500,500,500,500,500,500,500,,500,500,,',
'500,500,,517,,,517,,,517,517,,517,,517,500,517,500,517,500,500,500,500',
'500,500,500,517,500,,,,517,517,517,517,517,517,,,,517,517,324,324,324',
'324,324,324,,,,324,324,,,,324,,324,324,324,324,324,324,324,,,,,324,324',
'324,324,324,324,324,,,324,,,,,,324,324,324,324,324,324,324,324,324,324',
'324,324,324,324,,324,324,,324,324,324,495,495,495,495,495,495,495,,',
'495,495,,,,,,495,495,,324,,,324,,,324,324,,324,,324,495,324,495,324',
'495,495,495,495,495,495,495,324,495,,,,324,324,324,324,324,324,,,,324',
'324,784,784,784,784,784,784,,,,784,784,,,,784,,784,784,784,784,784,784',
'784,,,,,784,784,784,784,784,784,784,,,784,,,,,,784,784,784,784,784,784',
'784,784,784,784,784,784,784,784,,784,784,,784,784,784,481,481,481,481',
'481,481,481,,,481,481,,,,,,481,481,,784,,,784,,,784,784,,784,,784,481',
'784,481,784,481,481,481,481,481,481,481,784,481,,,,784,784,784,784,784',
'784,,,,784,784,717,717,717,717,717,717,,,,717,717,,,,717,,717,717,717',
'717,717,717,717,,,,,717,717,717,717,717,717,717,,,717,,,,,,717,717,717',
'717,717,717,717,717,717,717,717,717,717,717,,717,717,,717,717,717,478',
'478,478,478,478,478,478,,,478,478,,,,,,478,478,,717,,,717,,,717,717',
',717,,717,478,717,478,717,478,478,478,478,478,478,478,717,478,,,,717',
'717,717,717,717,717,,,,717,717,537,537,537,537,537,537,,,,537,537,,',
',537,,537,537,537,537,537,537,537,,,,,537,537,537,537,537,537,537,,',
'537,,,,,,537,537,537,537,537,537,537,537,537,537,537,537,537,537,,537',
'537,,537,537,537,475,475,475,475,475,475,475,,,475,475,,,,,,475,475',
',537,,,537,,,537,537,,537,,537,475,537,475,537,475,475,475,475,475,475',
'475,537,475,,,,537,537,537,537,537,537,,,,537,537,177,177,177,177,177',
'177,,,,177,177,,,,177,,177,177,177,177,177,177,177,,,,,177,177,177,177',
'177,177,177,,,177,,,,,,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,,177,177,,177,177,177,484,,,,,,,,,,,,,,,,484,484,,177,,,177',
',,177,177,,177,,177,484,177,484,177,484,484,484,484,,,484,177,484,,',
',177,177,177,177,177,177,,,,177,177,714,714,714,714,714,714,,,,714,714',
',,,714,,714,714,714,714,714,714,714,,,,,714,714,714,714,714,714,714',
',,714,,,,,,714,714,714,714,714,714,714,714,714,714,714,714,714,714,',
'714,714,,714,714,714,497,,,,,,,,,,,,,,,,497,497,,714,,,714,,,714,714',
',714,,714,497,714,,714,497,497,497,497,,,,714,,,,,714,714,714,714,714',
'714,,,,714,714,655,655,655,655,655,655,,,,655,655,,,,655,,655,655,655',
'655,655,655,655,,,,,655,655,655,655,655,655,655,,,655,,,,,,655,655,655',
'655,655,655,655,655,655,655,655,655,655,655,,655,655,,655,655,655,492',
',,,,,,,,,,,,,,,492,492,,655,,,655,,,655,655,,655,,655,492,655,492,655',
'492,492,492,492,,,,655,,,,,655,655,655,655,655,655,,,,655,655,780,780',
'780,780,780,780,,,,780,780,,,,780,,780,780,780,780,780,780,780,,,,,780',
'780,780,780,780,780,780,,,780,,,,,,780,780,780,780,780,780,780,780,780',
'780,780,780,780,780,,780,780,,780,780,780,496,,,,,,,,,,,,,,,,496,496',
',780,,,780,,,780,780,,780,,780,496,780,496,780,496,496,496,496,,,,780',
',,,,780,780,780,780,780,780,,,,780,780,622,622,622,622,622,622,,,,622',
'622,,,,622,,622,622,622,622,622,622,622,,,,,622,622,622,622,622,622',
'622,,,622,,,,,,622,622,622,622,622,622,622,622,622,622,622,622,622,622',
',622,622,,622,622,622,,,,,,,,,,,,,,,,,,,,622,,,622,,,622,622,,622,,622',
',622,,622,,,,,,,,622,,,,,622,622,622,622,622,622,,,,622,622,39,39,39',
'39,39,39,,,,39,39,,,,39,,39,39,39,39,39,39,39,,,,,39,39,39,39,39,39',
'39,,,39,,,,,,39,39,39,39,39,39,39,39,39,39,39,39,39,39,,39,39,,39,39',
'39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,39,,39,,39,,39,,,,,,,,39,,,,',
'39,39,39,39,39,39,,,,39,39,556,556,556,556,556,556,,,,556,556,,,,556',
',556,556,556,556,556,556,556,,,,,556,556,556,556,556,556,556,,,556,',
',,,,556,556,556,556,556,556,556,556,556,556,556,556,556,556,,556,556',
',556,556,556,,,,,,,,,,,,,,,,,,,,556,,,556,,,556,556,,556,,556,,556,',
'556,,,,,,,,556,,,,,556,556,556,556,556,556,,,,556,556,838,838,838,838',
'838,838,,,,838,838,,,,838,,838,838,838,838,838,838,838,,,,,838,838,838',
'838,838,838,838,,,838,,,,,,838,838,838,838,838,838,838,838,838,838,838',
'838,838,838,,838,838,,838,838,838,,,,,,,,,,,,,,,,,,,,838,,,838,,,838',
'838,,838,,838,,838,,838,,,,,,,,838,,,,,838,838,838,838,838,838,,,,838',
'838,143,143,143,143,143,143,,,,143,143,,,,143,,143,143,143,143,143,143',
'143,,,,,143,143,143,143,143,143,143,,,143,,,,,,143,143,143,143,143,143',
'143,143,143,143,143,143,143,143,,143,143,,143,143,143,,,,,,,,,,,,,,',
',,,,,143,,,143,,,143,143,,143,,143,,143,,143,,,,,,,,143,,,,,143,143',
'143,143,143,143,,,,143,143,851,851,851,851,851,851,,,,851,851,,,,851',
',851,851,851,851,851,851,851,,,,,851,851,851,851,851,851,851,,,851,',
',,,,851,851,851,851,851,851,851,851,851,851,851,851,851,851,,851,851',
',851,851,851,,,,,,,,,,,,,,,,,,,,851,,,851,,,851,851,,851,,851,,851,',
'851,,,,,,,,851,,,,,851,851,851,851,851,851,,,,851,851,643,643,643,643',
'643,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,643,643,643',
'643,643,643,643,,,643,,,,,,643,643,643,643,643,643,643,643,643,643,643',
'643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643',
'643,,643,,643,,643,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643',
'643,769,769,769,769,769,769,,,,769,769,,,,769,,769,769,769,769,769,769',
'769,,,,,769,769,769,769,769,769,769,,,769,,,,,,769,769,769,769,769,769',
'769,769,769,769,769,769,769,769,,769,769,,769,769,769,,,,,,,,,,,,,,',
',,,,,769,,,769,,,769,769,,769,,769,,769,,769,,,,,,,,769,,,,,769,769',
'769,769,769,769,,,,769,769,863,863,863,863,863,863,,,,863,863,,,,863',
',863,863,863,863,863,863,863,,,,,863,863,863,863,863,863,863,,,863,',
',,,,863,863,863,863,863,863,863,863,863,863,863,863,863,863,,863,863',
',863,863,863,,,,,,,,,,,,,,,,,,,,863,,,863,,,863,863,,863,,863,,863,',
'863,,,,,,,,863,,,,,863,863,863,863,863,863,,,,863,863,2,2,2,2,2,2,,',
',2,2,,,,2,,2,2,2,2,2,2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2',
'2,2,2,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,2,,2,,2,,2,',
',,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,54,54,54,54,54,54,,,,54,54,,,,54,,54',
'54,54,54,54,54,54,,,,,54,54,54,54,54,54,54,,,54,,,,,,54,54,54,54,54',
'54,54,54,54,54,54,54,54,54,,54,54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,',
'54,,,54,54,,54,,54,,54,,54,,,,,,,,54,,,,,54,54,54,54,54,54,,,,54,54',
'451,451,451,451,451,451,,,,451,451,,,,451,,451,451,451,451,451,451,451',
',,,,451,451,451,451,451,451,451,,,451,,,,,,451,451,451,451,451,451,451',
'451,451,451,451,451,451,451,,451,451,,451,451,451,,,,,,,,,,,,,,,,,,',
',451,,,451,,,451,451,,451,,451,,451,,451,,,,,,,,451,,,,,451,451,451',
'451,451,451,,,,451,451,665,665,665,,665,,,,665,665,,,,665,,665,665,665',
'665,665,665,665,,,,,665,665,665,665,665,665,665,,,,,,,,,,665,,,665,665',
'665,665,665,665,665,665,665,665,,665,665,,665,665,665,,,,,,,,,,,,,,',
',14,14,14,14,665,,,665,,,665,665,,665,,,14,14,14,665,14,14,14,14,,,',
'665,,,,,665,665,665,665,665,665,,,,665,665,59,59,59,,59,,,,59,59,,,',
'59,,59,59,59,59,59,59,59,,59,,,59,59,59,59,59,59,59,,,,,,,,,,59,,,59',
'59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,',
'59,59,,59,59,,59,,59,,59,,59,,,,,,,,59,,59,,,59,59,59,59,59,59,,,,59',
'59,60,60,60,,60,,,,60,60,,,,60,,60,60,60,60,60,60,60,,,,,60,60,60,60',
'60,60,60,,,,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60,60',
',,,,,,,,,,,,,,,,,,,60,,,60,60,,60,60,,60,,60,,60,,60,,,,,,,,60,,,,,60',
'60,60,60,60,60,,,,60,60,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61',
'61,61,,,,,61,61,61,61,61,61,61,,,,,,,,,,61,,,61,61,61,61,61,61,61,61',
'61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,172,172,172,172,61,,,61,,,61,61',
',61,,,172,172,172,61,172,172,172,172,,,,61,,,,,61,61,61,61,61,61,,,',
'61,61,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,63,63,63',
'63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,,63,63,,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,63,,,,,,63,,,,,,,,63,,,,,63',
'63,63,63,63,63,,,,63,63,607,607,607,,607,,,,607,607,,,,607,,607,607',
'607,607,607,607,607,,,,,607,607,607,607,607,607,607,,,,,,,,,,607,,,607',
'607,607,607,607,607,607,607,607,607,,607,607,,607,607,607,,,,,,,,,,',
',,,,,,,,,607,,,607,,,607,607,,607,,,,,,607,,,,,,,,607,,,,,607,607,607',
'607,607,607,,,,607,607,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56',
'56,,,,,56,56,56,56,56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56',
'56,,56,56,,56,56,56,,,,,,,,,,,,,,,,,,,,56,,,56,56,,56,56,,56,,56,,56',
',56,,,,,,,,56,,,,,56,56,56,56,56,56,,,,56,56,72,72,72,,72,,,,72,72,',
',,72,,72,72,72,72,72,72,72,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,',
'72,72,72,72,72,72,72,72,72,72,,72,72,,72,72,72,,,,,,,,,,,,,,,,,,,,72',
',,72,,,72,72,,72,,,,,,72,,,,,,,,72,,,,,72,72,72,72,72,72,,,,72,72,76',
'76,76,,76,,,,76,76,,,,76,,76,76,76,76,76,76,76,,,,,76,76,76,76,76,76',
'76,,,,,,,,,,76,,,76,76,76,76,76,76,76,76,76,76,,76,76,,76,76,76,,,,',
',,,,,,,,,,,,,,,76,,,76,,,76,76,,76,,76,,,,76,,,,,,,,76,,,,,76,76,76',
'76,76,76,,,,76,76,78,78,78,,78,,,,78,78,,,,78,,78,78,78,78,78,78,78',
',78,,,78,78,78,78,78,78,78,,,,,,,,,,78,,,78,78,78,78,78,78,78,78,78',
'78,,78,78,,78,78,78,,,,,,,,,,,,,,,,,,,,78,,,78,78,,78,78,,78,,78,,78',
',78,,,,,,,,78,,78,,,78,78,78,78,78,78,,,,78,78,764,764,764,,764,,,,764',
'764,,,,764,,764,764,764,764,764,764,764,,,,,764,764,764,764,764,764',
'764,,,,,,,,,,764,,,764,764,764,764,764,764,764,764,764,764,455,764,764',
'455,455,455,764,,,,,,,,,,,,,,,,,,,,764,,,764,,,764,764,,764,,,455,,',
',,,,455,455,455,455,,,,,,764,764,764,764,764,764,,,,764,764,875,875',
'875,,875,,,,875,875,,,,875,,875,875,875,875,875,875,875,,,,,875,875',
'875,875,875,875,875,,,,,,,,,,875,,,875,875,875,875,875,875,875,875,875',
'875,,875,875,,875,875,875,,,,,,,,,,,,,,,,,,,,875,,,875,,,875,875,,875',
',,,,,875,,,,,,,,875,,,,,875,875,875,875,875,875,,,,875,875,53,53,53',
',53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,53,53,53,53,53,53,53,,',
'53,,,,,,,53,,,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53,,,,,,,',
',,,,,,,,,,,,53,,,53,,,53,53,,53,,,,,,53,,,,,,,,53,,,,,53,53,53,53,53',
'53,,,,53,53,411,411,411,,411,,,,411,411,,,,411,,411,411,411,411,411',
'411,411,,,,,411,411,411,411,411,411,411,,,,,,,,,,411,,,411,411,411,411',
'411,411,411,411,411,411,,411,411,,411,411,411,,,,,,,,,,,,,,,,,,,,411',
',,411,,,411,411,,411,,411,,,,411,,,,,,,,411,,,,,411,411,411,411,411',
'411,,,,411,411,87,87,87,,87,,,,87,87,,,,87,,87,87,87,87,87,87,87,,,',
',87,87,87,87,87,87,87,,,,,,,,,,87,,,87,87,87,87,87,87,87,87,87,87,,87',
'87,,87,87,87,,,,,,,,,,,,,,,,,,,,87,,,87,,,87,87,,87,,,,,,87,,,,,,,,87',
',,,,87,87,87,87,87,87,,,,87,87,872,872,872,,872,,,,872,872,,,,872,,872',
'872,872,872,872,872,872,,,,,872,872,872,872,872,872,872,,,,,,,,,,872',
',,872,872,872,872,872,872,872,872,872,872,,872,872,,872,872,872,,,,',
',,,,,,,,,,,,,,,872,,,872,,,872,872,,872,,,,,,872,,,,,,,,872,,,,,872',
'872,872,872,872,872,,,,872,872,51,51,51,,51,,,,51,51,,,,51,,51,51,51',
'51,51,51,51,,,,,51,51,51,51,51,51,51,,,,,,,,,,51,,,51,51,51,51,51,51',
'51,51,51,51,,51,51,,51,51,51,,,,,,,,,,,,,,,,,,,,51,,,51,,,51,51,,51',
',51,,51,,51,,,,,,,,51,,,,,51,51,51,51,51,51,,,,51,51,97,97,97,,97,,',
',97,97,,,,97,,97,97,97,97,97,97,97,,,,,97,97,97,97,97,97,97,,,,,,,,',
',97,,,97,97,97,97,97,97,97,97,97,97,809,97,97,809,809,809,97,,,,,,,',
',,,,,,,,,,,,97,,,97,,,97,97,,97,,,809,,,,,,,809,809,809,809,,,,,,97',
'97,97,97,97,97,,,,97,97,98,98,98,,98,,,,98,98,,,,98,,98,98,98,98,98',
'98,98,,,,,98,98,98,98,98,98,98,,,98,,,,,,,98,,,98,98,98,98,98,98,98',
'98,98,98,,98,98,,98,98,98,,,,,,,,,,,,,,,,,,,,98,,,98,,,98,98,,98,,,',
',,98,,,,,,,,98,,,,,98,98,98,98,98,98,,,,98,98,679,679,679,,679,,,,679',
'679,,,,679,,679,679,679,679,679,679,679,,,,,679,679,679,679,679,679',
'679,,,,,,,,,,679,,,679,679,679,679,679,679,679,679,679,679,,679,679',
',679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,679,,,,,,679,,',
',,,,,679,,,,,679,679,679,679,679,679,,,,679,679,400,400,400,,400,,,',
'400,400,,,,400,,400,400,400,400,400,400,400,,,,,400,400,400,400,400',
'400,400,,,400,,,,,,,400,,,400,400,400,400,400,400,400,400,400,400,,400',
'400,,400,400,400,,,,,,,,,,,,,,,,,,,,400,,,400,,,400,400,,400,,400,,400',
',400,,,,,,,,400,,,,,400,400,400,400,400,400,,,,400,400,103,103,103,',
'103,,,,103,103,,,,103,,103,103,103,103,103,103,103,,,,,103,103,103,103',
'103,103,103,,,,,,,,,,103,,,103,103,103,103,103,103,103,103,103,103,',
'103,103,,103,103,103,,,,,,,,,,,,,,,,,,,,103,,,103,,,103,103,,103,,103',
',,,103,,,,,,,,103,,,,,103,103,103,103,103,103,,,,103,103,613,613,613',
',613,,,,613,613,,,,613,,613,613,613,613,613,613,613,,,,,613,613,613',
'613,613,613,613,,,,,,,,,,613,,,613,613,613,613,613,613,613,613,613,613',
',613,613,,613,613,613,,,,,,,,,,,,,,,,,,,,613,,,613,,,613,613,,613,,',
',,,613,,,,,,,,613,,,,,613,613,613,613,613,613,,,,613,613,595,595,595',
',595,,,,595,595,,,,595,,595,595,595,595,595,595,595,,,,,595,595,595',
'595,595,595,595,,,,,,,,,,595,,,595,595,595,595,595,595,595,595,595,595',
',595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,595,,595',
',595,,595,,,,,,,,595,,,,,595,595,595,595,595,595,,,,595,595,414,414',
'414,,414,,,,414,414,,,,414,,414,414,414,414,414,414,414,,,,,414,414',
'414,414,414,414,414,,,,,,,,,,414,,,414,414,414,414,414,414,414,414,414',
'414,,414,414,,414,414,414,,,,,,,,,,,,,,,,,,,,414,,,414,,,414,414,,414',
',,,,,414,,,,,,,,414,,,,,414,414,414,414,414,414,,,,414,414,415,415,415',
',415,,,,415,415,,,,415,,415,415,415,415,415,415,415,,,,,415,415,415',
'415,415,415,415,,,,,,,,,,415,,,415,415,415,415,415,415,415,415,415,415',
',415,415,,415,415,415,,,,,,,,,,,,,,,,,,,,415,,,415,,,415,415,,415,,',
',,,415,,,,,,,,415,,,,,415,415,415,415,415,415,,,,415,415,681,681,681',
',681,,,,681,681,,,,681,,681,681,681,681,681,681,681,,,,,681,681,681',
'681,681,681,681,,,,,,,,,,681,,,681,681,681,681,681,681,681,681,681,681',
',681,681,,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,681,,',
',,,681,,,,,,,,681,,,,,681,681,681,681,681,681,,,,681,681,898,898,898',
',898,,,,898,898,,,,898,,898,898,898,898,898,898,898,,,,,898,898,898',
'898,898,898,898,,,,,,,,,,898,,,898,898,898,898,898,898,898,898,898,898',
',898,898,,898,898,898,,,,,,,,,,,,,,,,,,,,898,,,898,,,898,898,,898,,',
',,,898,,,,,,,,898,,,,,898,898,898,898,898,898,,,,898,898,682,682,682',
',682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,,682,682,682',
'682,682,682,682,,,,,,,,,,682,,,682,682,682,682,682,682,682,682,682,682',
',682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,682,,682',
',,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682,682,417,417,417',
',417,,,,417,417,,,,417,,417,417,417,417,417,417,417,,,,,417,417,417',
'417,417,417,417,,,,,,,,,,417,,,417,417,417,417,417,417,417,417,417,417',
',417,417,,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417,,417,,',
',,,417,,,,,,,,417,,,,,417,417,417,417,417,417,,,,417,417,859,859,859',
',859,,,,859,859,,,,859,,859,859,859,859,859,859,859,,,,,859,859,859',
'859,859,859,859,,,,,,,,,,859,,,859,859,859,859,859,859,859,859,859,859',
',859,859,,859,859,859,,,,,,,,,,,,,,,,,,,,859,,,859,,,859,859,,859,,859',
',,,859,,,,,,,,859,,,,,859,859,859,859,859,859,,,,859,859,588,588,588',
',588,,,,588,588,,,,588,,588,588,588,588,588,588,588,,,,,588,588,588',
'588,588,588,588,,,,,,,,,,588,,,588,588,588,588,588,588,588,588,588,588',
',588,588,,588,588,588,,,,,,,,,,,,,,,,,,,,588,,,588,,,588,588,,588,,',
',,,588,,,,,,,,588,,,,,588,588,588,588,588,588,,,,588,588,688,688,688',
',688,,,,688,688,,,,688,,688,688,688,688,688,688,688,,,,,688,688,688',
'688,688,688,688,,,,,,,,,,688,,,688,688,688,688,688,688,688,688,688,688',
',688,688,,688,688,688,,,,,,,,,,,,,,,,,,,,688,,,688,,,688,688,,688,,',
',,,688,,,,,,,,688,,,,,688,688,688,688,688,688,,,,688,688,387,387,387',
',387,,,,387,387,,,,387,,387,387,387,387,387,387,387,,,,,387,387,387',
'387,387,387,387,,,,,,,,,,387,,,387,387,387,387,387,387,387,387,387,387',
',387,387,,387,387,387,,,,,,,,,,,,,,,,,,,,387,,,387,,,387,387,,387,,387',
',,,387,,,,,,,,387,,,,,387,387,387,387,387,387,,,,387,387,125,125,125',
',125,,,,125,125,,,,125,,125,125,125,125,125,125,125,,,,,125,125,125',
'125,125,125,125,,,,,,,,,,125,,,125,125,125,125,125,125,125,125,125,125',
',125,125,,125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,125,,125',
',125,,125,,,,,,,,125,,,,,125,125,125,125,125,125,,,,125,125,127,127',
'127,,127,,,,127,127,,,,127,,127,127,127,127,127,127,127,,,,,127,127',
'127,127,127,127,127,,,,,,,,,,127,,,127,127,127,127,127,127,127,127,127',
'127,,127,127,,127,127,127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,127',
',127,,127,,127,,,,,,,,127,,,,,127,127,127,127,127,127,,,,127,127,580',
'580,580,,580,,,,580,580,,,,580,,580,580,580,580,580,580,580,,,,,580',
'580,580,580,580,580,580,,,,,,,,,,580,,,580,580,580,580,580,580,580,580',
'580,580,,580,580,,,,580,,,,,,,,,,,,,,,,,,,,580,,,580,,,580,580,,580',
',580,,580,,,,,,,,,580,,,,,,580,580,580,580,580,580,,,,580,580,576,576',
'576,,576,,,,576,576,,,,576,,576,576,576,576,576,576,576,,,,,576,576',
'576,576,576,576,576,,,576,,,,,,,576,,,576,576,576,576,576,576,576,576',
'576,576,,576,576,,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,,,576,576',
',576,,,,,,576,,,,,,,,576,,,,,576,576,576,576,576,576,,,,576,576,419',
'419,419,,419,,,,419,419,,,,419,,419,419,419,419,419,419,419,,,,,419',
'419,419,419,419,419,419,,,,,,,,,,419,,,419,419,419,419,419,419,419,419',
'419,419,,419,419,,419,419,419,,,,,,,,,,,,,,,,,,,,419,,,419,,,419,419',
',419,,419,,419,,419,,,,,,,,419,,,,,419,419,419,419,419,419,,,,419,419',
'134,134,134,,134,,,,134,134,,,,134,,134,134,134,134,134,134,134,,,,',
'134,134,134,134,134,134,134,,,,,,,,,,134,,,134,134,134,134,134,134,134',
'134,134,134,,134,134,,134,134,134,,,,,,,,,,,,,,,,,,,,134,,,134,,,134',
'134,,134,,,,,,134,,,,,,,,134,,,,,134,134,134,134,134,134,,,,134,134',
'421,421,421,,421,,,,421,421,,,,421,,421,421,421,421,421,421,421,,,,',
'421,421,421,421,421,421,421,,,,,,,,,,421,,,421,421,421,421,421,421,421',
'421,421,421,,421,421,,421,421,421,,,,,,,,,,,,,,,,,,,,421,,,421,,,421',
'421,,421,,,,,,421,,,,,,,,421,,,,,421,421,421,421,421,421,,,,421,421',
'845,845,845,,845,,,,845,845,,,,845,,845,845,845,845,845,845,845,,,,',
'845,845,845,845,845,845,845,,,,,,,,,,845,,,845,845,845,845,845,845,845',
'845,845,845,,845,845,,845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845',
'845,,845,,845,,845,,845,,,,,,,,845,,,,,845,845,845,845,845,845,,,,845',
'845,429,429,429,,429,,,,429,429,,,,429,,429,429,429,429,429,429,429',
',,,,429,429,429,429,429,429,429,,,,,,,,,,429,,,429,429,429,429,429,429',
'429,429,429,429,,429,429,,429,429,429,,,,,,,,,,,,,,,,,,,,429,,,429,',
',429,429,,429,,429,,,,429,,,,,,,,429,,,,,429,429,429,429,429,429,,,',
'429,429,842,842,842,,842,,,,842,842,,,,842,,842,842,842,842,842,842',
'842,,,,,842,842,842,842,842,842,842,,,,,,,,,,842,,,842,842,842,842,842',
'842,842,842,842,842,,842,842,,842,842,842,,,,,,,,,,,,,,,,,,,,842,,,842',
',,842,842,,842,,842,,842,,842,,,,,,,,842,,,,,842,842,842,842,842,842',
',,,842,842,381,381,381,,381,,,,381,381,,,,381,,381,381,381,381,381,381',
'381,,,,,381,381,381,381,381,381,381,,,,,,,,,,381,,,381,381,381,381,381',
'381,381,381,381,381,,381,381,,381,381,381,,,,,,,,,,,,,,,,,,,,381,,,381',
'381,,381,381,,381,,381,,381,,381,,,,,,,,381,,,,,381,381,381,381,381',
'381,,,,381,381,770,770,770,,770,,,,770,770,,,,770,,770,770,770,770,770',
'770,770,,,,,770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770',
'770,770,770,770,770,770,770,,770,770,,770,770,770,,,,,,,,,,,,,,,,,,',
',770,,,770,,,770,770,,770,,,,,,770,,,,,,,,770,,,,,770,770,770,770,770',
'770,,,,770,770,145,145,145,,145,,,,145,145,,,,145,,145,145,145,145,145',
'145,145,,,,,145,145,145,145,145,145,145,,,,,,,,,,145,,,145,145,145,145',
'145,145,145,145,145,145,,145,145,,145,145,145,,,,,,,,,,,,,,,,,,,,145',
',,145,,,145,145,,145,,,,,,145,,,,,,,,145,,,,,145,145,145,145,145,145',
',,,145,145,621,621,621,,621,,,,621,621,,,,621,,621,621,621,621,621,621',
'621,,,,,621,621,621,621,621,621,621,,,621,,,,,,,621,,,621,621,621,621',
'621,621,621,621,621,621,,621,621,,621,621,621,,,,,,,,,,,,,,,,,,,,621',
',,621,,,621,621,,621,,,,,,621,,,,,,,,621,,,,,621,621,621,621,621,621',
',,,621,621,835,835,835,,835,,,,835,835,,,,835,,835,835,835,835,835,835',
'835,,,,,835,835,835,835,835,835,835,,,,,,,,,,835,,,835,835,835,835,835',
'835,835,835,835,835,,835,835,,835,835,835,,,,,,,,,,,,,,,,,,,,835,,,835',
',,835,835,,835,,,,,,835,,,,,,,,835,,,,,835,835,835,835,835,835,,,,835',
'835,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705,705,705,705',
',,,,705,705,705,705,705,705,705,,,,,,,,,,705,,,705,705,705,705,705,705',
'705,705,705,705,,705,705,,705,705,705,,,,,,,,,,,,,,,,,,,,705,,,705,',
',705,705,,705,,,,,,705,,,,,,,,705,,,,,705,705,705,705,705,705,,,,705',
'705,149,149,149,,149,,,,149,149,,,,149,,149,149,149,149,149,149,149',
',,,,149,149,149,149,149,149,149,,,,,,,,,,149,,,149,149,149,149,149,149',
'149,149,149,149,,149,149,,149,149,149,,,,,,,,,,,,,,,,,,,,149,,,149,',
',149,149,,149,,,,,,149,,,,,,,,149,,,,,149,149,149,149,149,149,,,,149',
'149,7,7,7,,7,,,,7,7,,,,7,,7,7,7,7,7,7,7,,,,,7,7,7,7,7,7,7,,,,,,,,,,7',
',,7,7,7,7,7,7,7,7,7,7,,7,7,,,,7,,,,,,,,,,,,,,,,,,,,7,,,7,,,7,7,,7,,7',
',7,,,,,,,,,,,,,,,7,7,7,7,7,7,,,,7,7,568,568,568,,568,,,,568,568,,,,568',
',568,568,568,568,568,568,568,,,,,568,568,568,568,568,568,568,,,,,,,',
',,568,,,568,568,568,568,568,568,568,568,568,568,,568,568,,568,568,568',
',,,,,,,,,,,,,,,,,,,568,,,568,,,568,568,,568,,,,,,568,,,,,,,,568,,,,',
'568,568,568,568,568,568,,,,568,568,567,567,567,,567,,,,567,567,,,,567',
',567,567,567,567,567,567,567,,,,,567,567,567,567,567,567,567,,,,,,,',
',,567,,,567,567,567,567,567,567,567,567,567,567,,567,567,,567,567,567',
',,,,,,,,,,,,,,,,,,,567,,,567,,,567,567,,567,,,,,,567,,,,,,,,567,,,,',
'567,567,567,567,567,567,,,,567,567,561,561,561,,561,,,,561,561,,,,561',
',561,561,561,561,561,561,561,,,,,561,561,561,561,561,561,561,,,,,,,',
',,561,,,561,561,561,561,561,561,561,561,561,561,,561,561,,561,561,561',
',,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,561,,,,,,561,,,,,,,,561,,,,',
'561,561,561,561,561,561,,,,561,561,560,560,560,,560,,,,560,560,,,,560',
',560,560,560,560,560,560,560,,,,,560,560,560,560,560,560,560,,,,,,,',
',,560,,,560,560,560,560,560,560,560,560,560,560,,560,560,,560,560,560',
',,,,,,,,,,,,,,,,,,,560,,,560,,,560,560,,560,,,,,,560,,,,,,,,560,,,,',
'560,560,560,560,560,560,,,,560,560,161,161,161,,161,,,,161,161,,,,161',
',161,161,161,161,161,161,161,,,,,161,161,161,161,161,161,161,,,161,',
',,,,,161,,,161,161,161,161,161,161,161,161,161,161,,161,161,,161,161',
'161,,,,,,,,,,,,,,,,,,,,161,,,161,,,161,161,,161,,,,,,161,,,,,,,,161',
',,,,161,161,161,161,161,161,,,,161,161,377,377,377,,377,,,,377,377,',
',,377,,377,377,377,377,377,377,377,,,,,377,377,377,377,377,377,377,',
',,,,,,,,377,,,377,377,377,377,377,377,377,377,377,377,,377,377,,377',
'377,377,,,,,,,,,,,,,,,,,,,,377,,,377,377,,377,377,,377,,377,,377,,377',
',,,,,,,377,,,,,377,377,377,377,377,377,,,,377,377,375,375,375,,375,',
',,375,375,,,,375,,375,375,375,375,375,375,375,,,,,375,375,375,375,375',
'375,375,,,,,,,,,,375,,,375,375,375,375,375,375,375,375,375,375,,375',
'375,,375,375,375,,,,,,,,,,,,,,,,,,,,375,,,375,375,,375,375,,375,,375',
',375,,375,,,,,,,,375,,,,,375,375,375,375,375,375,,,,375,375,444,444',
'444,,444,,,,444,444,,,,444,,444,444,444,444,444,444,444,,,,,444,444',
'444,444,444,444,444,,,,,,,,,,444,,,444,444,444,444,444,444,444,444,444',
'444,,444,444,,444,444,444,,,,,,,,,,,,,,,,,,,,444,,,444,,,444,444,,444',
',444,,,,444,,,,,,,,444,,,,,444,444,444,444,444,444,,,,444,444,366,366',
'366,,366,,,,366,366,,,,366,,366,366,366,366,366,366,366,,,,,366,366',
'366,366,366,366,366,,,366,,,,,,,366,,,366,366,366,366,366,366,366,366',
'366,366,,366,366,,366,366,366,,,,,,,,,,,,,,,,,,,,366,,,366,,,366,366',
',366,,,,,,366,,,,,,,,366,,,,,366,366,366,366,366,366,,,,366,366,168',
'168,168,,168,,,,168,168,,,,168,,168,168,168,168,168,168,168,,,,,168',
'168,168,168,168,168,168,,,,,,,,,,168,,,168,168,168,168,168,168,168,168',
'168,168,,168,168,,168,168,168,,,,,,,,,,,,,,,,,,,,168,,,168,,,168,168',
',168,,,,,,168,,,,,,,,168,,,,,168,168,168,168,168,168,,,,168,168,365',
'365,365,,365,,,,365,365,,,,365,,365,365,365,365,365,365,365,,,,,365',
'365,365,365,365,365,365,,,,,,,,,,365,,,365,365,365,365,365,365,365,365',
'365,365,,365,365,,365,365,365,,,,,,,,,,,,,,,,,,,,365,,,365,,,365,365',
',365,,,,,,365,,,,,,,,365,,,,,365,365,365,365,365,365,,,,365,365,748',
'748,748,,748,,,,748,748,,,,748,,748,748,748,748,748,748,748,,,,,748',
'748,748,748,748,748,748,,,,,,,,,,748,,,748,748,748,748,748,748,748,748',
'748,748,,748,748,,748,748,748,,,,,,,,,,,,,,,,,,,,748,,,748,,,748,748',
',748,,,,,,748,,,,,,,,748,,,,,748,748,748,748,748,748,,,,748,748,363',
'363,363,,363,,,,363,363,,,,363,,363,363,363,363,363,363,363,,,,,363',
'363,363,363,363,363,363,,,363,,,,,,,363,,,363,363,363,363,363,363,363',
'363,363,363,,363,363,,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,,,363',
'363,,363,,,,,,363,,,,,,,,363,,,,,363,363,363,363,363,363,,,,363,363',
'543,543,543,,543,,,,543,543,,,,543,,543,543,543,543,543,543,543,,,,',
'543,543,543,543,543,543,543,,,,,,,,,,543,,,543,543,543,543,543,543,543',
'543,543,543,,543,543,,543,543,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543',
'543,,543,,,,,,543,,,,,,,,543,,,,,543,543,543,543,543,543,,,,543,543',
'362,362,362,,362,,,,362,362,,,,362,,362,362,362,362,362,362,362,,,,',
'362,362,362,362,362,362,362,,,,,,,,,,362,,,362,362,362,362,362,362,362',
'362,362,362,,362,362,,362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362',
'362,,362,,362,,,,362,,,,,,,,362,,,,,362,362,362,362,362,362,,,,362,362',
'539,539,539,,539,,,,539,539,,,,539,,539,539,539,539,539,539,539,,,,',
'539,539,539,539,539,539,539,,,,,,,,,,539,,,539,539,539,539,539,539,539',
'539,539,539,,539,539,,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539',
'539,,539,,539,,,,539,,,,,,,,539,,,,,539,539,539,539,539,539,,,,539,539',
'34,34,34,34,34,34,34,34,,,34,34,34,34,34,,,34,34,34,34,34,34,34,,,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,,',
'34,,,,,,,,34,34,,34,34,34,34,,34,34,,,34,,,,,34,34,34,34,,,,,,,,,,,',
',34,34,,34,34,34,34,34,34,34,34,34,,34,,,34,34,,,33,33,33,,33,,,34,33',
'33,,,,33,,33,33,33,33,33,33,33,,,,,33,33,33,33,33,33,33,,,,,,,,,,33',
',,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,',
'33,,,33,,,33,33,,33,,,,,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33',
'178,178,178,,178,,,,178,178,,,,178,,178,178,178,178,178,178,178,,,,',
'178,178,178,178,178,178,178,,,,,,,,,,178,,,178,178,178,178,178,178,178',
'178,178,178,,178,178,,,,178,,,,,,,,,,,,,,,,,,,,178,,,178,,,178,178,',
'178,,,,,,,,,,,,,,,,,,,178,178,178,178,178,178,,,,178,178,32,32,32,32',
'32,32,32,32,,,32,32,32,32,32,,,32,32,32,32,32,32,32,,,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,,32,,,,,,,',
'32,32,,32,32,32,32,,32,32,,,32,,,,,32,32,32,32,,,,,,,,,,,,,32,32,,32',
'32,32,32,32,32,32,32,32,,32,,,32,32,,,536,536,536,,536,,,32,536,536',
',,,536,,536,536,536,536,536,536,536,,,,,536,536,536,536,536,536,536',
',,,,,,,,,536,,,536,536,536,536,536,536,536,536,536,536,,536,536,,536',
'536,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,536,,,,,,536,,,,,,,',
'536,,,,,536,536,536,536,536,536,,,,536,536,456,456,456,,456,,,,456,456',
',,,456,,456,456,456,456,456,456,456,,,,,456,456,456,456,456,456,456',
',,456,,,,,,,456,,,456,456,456,456,456,456,456,456,456,456,,456,456,',
'456,456,456,,,,,,,,,,,,,,,,,,,,456,,,456,,,456,456,,456,,,,,,456,,,',
',,,,456,,,,,456,456,456,456,456,456,,,,456,456,778,778,778,,778,,,,778',
'778,,,,778,,778,778,778,778,778,778,778,,,,,778,778,778,778,778,778',
'778,,,,,,,,,,778,,,778,778,778,778,778,778,778,778,778,778,,778,778',
',778,778,778,,,,,,,,,,,,,,,,,,,,778,,,778,,,778,778,,778,,,,,,778,,',
',,,,,778,,,,,778,778,778,778,778,778,,,,778,778,530,530,530,,530,,,',
'530,530,,,,530,,530,530,530,530,530,530,530,,,,,530,530,530,530,530',
'530,530,,,,,,,,,,530,,,530,530,530,530,530,530,530,530,530,530,,530',
'530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,530,,,,,,530',
',,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,527,527,527,,527,',
',,527,527,,,,527,,527,527,527,527,527,527,527,,,,,527,527,527,527,527',
'527,527,,,,,,,,,,527,,,527,527,527,527,527,527,527,527,527,527,,527',
'527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,527,,527,,',
',527,,,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527,719,719,719,',
'719,,,,719,719,,,,719,,719,719,719,719,719,719,719,,,,,719,719,719,719',
'719,719,719,,,,,,,,,,719,,,719,719,719,719,719,719,719,719,719,719,',
'719,719,,719,719,719,,,,,,,,,,,,,,,,,,,,719,,,719,,,719,719,,719,,719',
',719,,719,,,,,,,,719,,,,,719,719,719,719,719,719,,,,719,719,30,30,30',
',30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,30,30,30,30,30,30,30,,',
',,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,',
',,,,,,,,,,30,,,30,,,30,30,,30,,,,,,30,,,,,,,,30,,,,,30,30,30,30,30,30',
',,,30,30,457,457,457,457,457,457,457,457,,,457,457,457,457,457,,,457',
'457,457,457,457,457,457,,,457,457,457,457,457,457,457,457,457,457,457',
'457,457,457,457,457,457,457,457,457,457,457,457,,,457,,,,,,,,457,457',
',457,457,457,457,,457,457,,,457,,,,,457,457,457,457,,,,,,,,,,,,,457',
'457,,457,457,457,457,457,457,457,457,457,,457,,,457,457,,,26,26,26,',
'26,,,457,26,26,,,,26,,26,26,26,26,26,26,26,,,,,26,26,26,26,26,26,26',
',,,,,,,,,26,,,26,26,26,26,26,26,26,26,26,26,,26,26,,,,26,,,,,,,,,,,',
',,,,,,,,26,,,26,,,26,26,,26,,,,,,,,,,,,,,,,,,,26,26,26,26,26,26,,,,26',
'26,464,464,464,,464,,,,464,464,,,,464,,464,464,464,464,464,464,464,',
',,,464,464,464,464,464,464,464,,,,,,,,,,464,,,464,464,464,464,464,464',
'464,464,464,464,,464,464,,464,464,464,,,,,,,,,,,,,,,,,,,,464,,,464,',
',464,464,,464,,,,,,464,,,,,,,,464,,,,,464,464,464,464,464,464,,,,464',
'464,25,25,25,,25,,,,25,25,,,,25,,25,25,25,25,25,25,25,,,,,25,25,25,25',
'25,25,25,,,,,,,,,,25,,,25,25,25,25,25,25,25,25,25,25,,25,25,,,,25,,',
',,,,,,,,,,,,,,,,,25,,,25,,,25,25,,25,,25,,25,,,,,,,,,,,,,,,25,25,25',
'25,25,25,,,,25,25,722,722,722,,722,,,,722,722,,,,722,,722,722,722,722',
'722,722,722,,,,,722,722,722,722,722,722,722,,,,,,,,,,722,,,722,722,722',
'722,722,722,722,722,722,722,,722,722,,722,722,722,,,,,,,,,,,,,,,,,,',
',722,,,722,,,722,722,,722,,722,,722,,722,,,,,,,,722,,,,,722,722,722',
'722,722,722,,,,722,722,274,274,274,,274,,,,274,274,,,,274,,274,274,274',
'274,274,274,274,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274',
'274,274,274,274,274,274,274,274,274,,274,274,,274,274,274,,,,,,,,,,',
',,,,,,,,,274,,,274,,,274,274,,274,,,,,,274,,,,,,,,274,,,,,274,274,274',
'274,274,274,,,,274,274,275,275,275,,275,,,,275,275,,,,275,,275,275,275',
'275,275,275,275,,,,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275',
'275,275,275,275,275,275,275,275,275,,275,275,,275,275,275,,,,,,,,,,',
',,,,,,,,,275,,,275,,,275,275,,275,,,,,,275,,,,,,,,275,,,,,275,275,275',
'275,275,275,,,,275,275,24,24,24,,24,,,,24,24,,,,24,,24,24,24,24,24,24',
'24,,,,,24,24,24,24,24,24,24,,,,,,,,,,24,,,24,24,24,24,24,24,24,24,24',
'24,,24,24,,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24,24,,24,,,,,,24,',
',,,,,,24,,,,,24,24,24,24,24,24,,,,24,24,804,804,804,,804,,,,804,804',
',,,804,,804,804,804,804,804,804,804,,,,,804,804,804,804,804,804,804',
',,,,,,,,,804,,,804,804,804,804,804,804,804,804,804,804,,804,804,,804',
'804,804,,,,,,,,,,,,,,,,,,,,804,,,804,,,804,804,,804,,,,,,804,,,,,,,',
'804,,,,,804,804,804,804,804,804,,,,804,804,802,802,802,,802,,,,802,802',
',,,802,,802,802,802,802,802,802,802,,,,,802,802,802,802,802,802,802',
',,,,,,,,,802,,,802,802,802,802,802,802,802,802,802,802,,802,802,,802',
'802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,802,,,,,,802,,,,,,,',
'802,,,,,802,802,802,802,802,802,,,,802,802,800,800,800,,800,,,,800,800',
',,,800,,800,800,800,800,800,800,800,,,,,800,800,800,800,800,800,800',
',,,,,,,,,800,,,800,800,800,800,800,800,800,800,800,800,,800,800,,800',
'800,800,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,800,,800,,,,,,800,,,,,,,',
'800,,,,,800,800,800,800,800,800,,,,800,800,281,281,281,,281,,,,281,281',
',,,281,,281,281,281,281,281,281,281,,,,,281,281,281,281,281,281,281',
',,,,,,,,,281,,,281,281,281,281,281,281,281,281,281,281,,281,281,,281',
'281,281,,,,,,,,,,,,,,,,,,,,281,,,281,281,,281,281,,281,,,,,,281,,,,',
',,,281,,,,,281,281,281,281,281,281,,,,281,281,465,465,465,,465,,,,465',
'465,,,,465,,465,465,465,465,465,465,465,,,,,465,465,465,465,465,465',
'465,,,,,,,,,,465,,,465,465,465,465,465,465,465,465,465,465,,465,465',
',465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,465,,465,,,,,,465,,',
',,,,,465,,,,,465,465,465,465,465,465,,,,465,465,730,730,730,,730,,,',
'730,730,,,,730,,730,730,730,730,730,730,730,,,,,730,730,730,730,730',
'730,730,,,,,,,,,,730,,,730,730,730,730,730,730,730,730,730,730,,730',
'730,,730,730,730,,,,,,,,,,,,,,,,,,,,730,,,730,,,730,730,,730,,,,,,730',
',,,,,,,730,,,,,730,730,730,730,730,730,,,,730,730,797,797,797,,797,',
',,797,797,,,,797,,797,797,797,797,797,797,797,,,,,797,797,797,797,797',
'797,797,,,,,,,,,,797,,,797,797,797,797,797,797,797,797,797,797,,797',
'797,,797,797,797,,,,,,,,,,,,,,,,,,,,797,,,797,,,797,797,,797,,,,,,797',
',,,,,,,797,,,,,797,797,797,797,797,797,,,,797,797,289,289,289,,289,',
',,289,289,,,,289,,289,289,289,289,289,289,289,,,,,289,289,289,289,289',
'289,289,,,,,,,,,,289,,,289,289,289,289,289,289,289,289,289,289,,289',
'289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,289,,,,,,289',
',,,,,,,289,,,,,289,289,289,289,289,289,,,,289,289,290,290,290,,290,',
',,290,290,,,,290,,290,290,290,290,290,290,290,,,,,290,290,290,290,290',
'290,290,,,,,,,,,,290,,,290,290,290,290,290,290,290,290,290,290,,290',
'290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,290,,,,,,290',
',,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,291,291,291,,291,',
',,291,291,,,,291,,291,291,291,291,291,291,291,,,,,291,291,291,291,291',
'291,291,,,,,,,,,,291,,,291,291,291,291,291,291,291,291,291,291,,291',
'291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,291,,,,,,291',
',,,,,,,291,,,,,291,291,291,291,291,291,,,,291,291,292,292,292,,292,',
',,292,292,,,,292,,292,292,292,292,292,292,292,,,,,292,292,292,292,292',
'292,292,,,,,,,,,,292,,,292,292,292,292,292,292,292,292,292,292,,292',
'292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,292,,,,,,292',
',,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292,293,293,293,,293,',
',,293,293,,,,293,,293,293,293,293,293,293,293,,,,,293,293,293,293,293',
'293,293,,,,,,,,,,293,,,293,293,293,293,293,293,293,293,293,293,,293',
'293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,293,,,,,,293',
',,,,,,,293,,,,,293,293,293,293,293,293,,,,293,293,294,294,294,,294,',
',,294,294,,,,294,,294,294,294,294,294,294,294,,,,,294,294,294,294,294',
'294,294,,,,,,,,,,294,,,294,294,294,294,294,294,294,294,294,294,,294',
'294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,294,,,,,,294',
',,,,,,,294,,,,,294,294,294,294,294,294,,,,294,294,295,295,295,,295,',
',,295,295,,,,295,,295,295,295,295,295,295,295,,,,,295,295,295,295,295',
'295,295,,,,,,,,,,295,,,295,295,295,295,295,295,295,295,295,295,,295',
'295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,,,295,295,,295,,,,,,295',
',,,,,,,295,,,,,295,295,295,295,295,295,,,,295,295,296,296,296,,296,',
',,296,296,,,,296,,296,296,296,296,296,296,296,,,,,296,296,296,296,296',
'296,296,,,,,,,,,,296,,,296,296,296,296,296,296,296,296,296,296,,296',
'296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,296,,,,,,296',
',,,,,,,296,,,,,296,296,296,296,296,296,,,,296,296,297,297,297,,297,',
',,297,297,,,,297,,297,297,297,297,297,297,297,,,,,297,297,297,297,297',
'297,297,,,,,,,,,,297,,,297,297,297,297,297,297,297,297,297,297,,297',
'297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,297,,,,,,297',
',,,,,,,297,,,,,297,297,297,297,297,297,,,,297,297,298,298,298,,298,',
',,298,298,,,,298,,298,298,298,298,298,298,298,,,,,298,298,298,298,298',
'298,298,,,,,,,,,,298,,,298,298,298,298,298,298,298,298,298,298,,298',
'298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,298,,,,,,298',
',,,,,,,298,,,,,298,298,298,298,298,298,,,,298,298,299,299,299,,299,',
',,299,299,,,,299,,299,299,299,299,299,299,299,,,,,299,299,299,299,299',
'299,299,,,,,,,,,,299,,,299,299,299,299,299,299,299,299,299,299,,299',
'299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,299,,,,,,299',
',,,,,,,299,,,,,299,299,299,299,299,299,,,,299,299,300,300,300,,300,',
',,300,300,,,,300,,300,300,300,300,300,300,300,,,,,300,300,300,300,300',
'300,300,,,,,,,,,,300,,,300,300,300,300,300,300,300,300,300,300,,300',
'300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,300,,,,,,300',
',,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300,301,301,301,,301,',
',,301,301,,,,301,,301,301,301,301,301,301,301,,,,,301,301,301,301,301',
'301,301,,,,,,,,,,301,,,301,301,301,301,301,301,301,301,301,301,,301',
'301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,301,,,,,,301',
',,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301,302,302,302,,302,',
',,302,302,,,,302,,302,302,302,302,302,302,302,,,,,302,302,302,302,302',
'302,302,,,,,,,,,,302,,,302,302,302,302,302,302,302,302,302,302,,302',
'302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,302,,,,,,302',
',,,,,,,302,,,,,302,302,302,302,302,302,,,,302,302,303,303,303,,303,',
',,303,303,,,,303,,303,303,303,303,303,303,303,,,,,303,303,303,303,303',
'303,303,,,,,,,,,,303,,,303,303,303,303,303,303,303,303,303,303,,303',
'303,,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,303,,,,,,303',
',,,,,,,303,,,,,303,303,303,303,303,303,,,,303,303,304,304,304,,304,',
',,304,304,,,,304,,304,304,304,304,304,304,304,,,,,304,304,304,304,304',
'304,304,,,,,,,,,,304,,,304,304,304,304,304,304,304,304,304,304,,304',
'304,,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,304,,,,,,304',
',,,,,,,304,,,,,304,304,304,304,304,304,,,,304,304,305,305,305,,305,',
',,305,305,,,,305,,305,305,305,305,305,305,305,,,,,305,305,305,305,305',
'305,305,,,,,,,,,,305,,,305,305,305,305,305,305,305,305,305,305,,305',
'305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,,305,305,,305,,,,,,305',
',,,,,,,305,,,,,305,305,305,305,305,305,,,,305,305,306,306,306,,306,',
',,306,306,,,,306,,306,306,306,306,306,306,306,,,,,306,306,306,306,306',
'306,306,,,,,,,,,,306,,,306,306,306,306,306,306,306,306,306,306,,306',
'306,,306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,306,,306,,,,,,306',
',,,,,,,306,,,,,306,306,306,306,306,306,,,,306,306,307,307,307,,307,',
',,307,307,,,,307,,307,307,307,307,307,307,307,,,,,307,307,307,307,307',
'307,307,,,,,,,,,,307,,,307,307,307,307,307,307,307,307,307,307,,307',
'307,,307,307,307,,,,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,307,,,,,,307',
',,,,,,,307,,,,,307,307,307,307,307,307,,,,307,307,308,308,308,,308,',
',,308,308,,,,308,,308,308,308,308,308,308,308,,,,,308,308,308,308,308',
'308,308,,,,,,,,,,308,,,308,308,308,308,308,308,308,308,308,308,,308',
'308,,308,308,308,,,,,,,,,,,,,,,,,,,,308,,,308,,,308,308,,308,,,,,,308',
',,,,,,,308,,,,,308,308,308,308,308,308,,,,308,308,309,309,309,,309,',
',,309,309,,,,309,,309,309,309,309,309,309,309,,,,,309,309,309,309,309',
'309,309,,,,,,,,,,309,,,309,309,309,309,309,309,309,309,309,309,,309',
'309,,309,309,309,,,,,,,,,,,,,,,,,,,,309,,,309,,,309,309,,309,,,,,,309',
',,,,,,,309,,,,,309,309,309,309,309,309,,,,309,309,310,310,310,,310,',
',,310,310,,,,310,,310,310,310,310,310,310,310,,,,,310,310,310,310,310',
'310,310,,,,,,,,,,310,,,310,310,310,310,310,310,310,310,310,310,,310',
'310,,310,310,310,,,,,,,,,,,,,,,,,,,,310,,,310,,,310,310,,310,,,,,,310',
',,,,,,,310,,,,,310,310,310,310,310,310,,,,310,310,311,311,311,,311,',
',,311,311,,,,311,,311,311,311,311,311,311,311,,,,,311,311,311,311,311',
'311,311,,,,,,,,,,311,,,311,311,311,311,311,311,311,311,311,311,,311',
'311,,311,311,311,,,,,,,,,,,,,,,,,,,,311,,,311,,,311,311,,311,,,,,,311',
',,,,,,,311,,,,,311,311,311,311,311,311,,,,311,311,312,312,312,,312,',
',,312,312,,,,312,,312,312,312,312,312,312,312,,,,,312,312,312,312,312',
'312,312,,,,,,,,,,312,,,312,312,312,312,312,312,312,312,312,312,,312',
'312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,312,,312,,,,,,312',
',,,,,,,312,,,,,312,312,312,312,312,312,,,,312,312,313,313,313,,313,',
',,313,313,,,,313,,313,313,313,313,313,313,313,,,,,313,313,313,313,313',
'313,313,,,,,,,,,,313,,,313,313,313,313,313,313,313,313,313,313,,313',
'313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,,,313,313,,313,,,,,,313',
',,,,,,,313,,,,,313,313,313,313,313,313,,,,313,313,314,314,314,,314,',
',,314,314,,,,314,,314,314,314,314,314,314,314,,,,,314,314,314,314,314',
'314,314,,,,,,,,,,314,,,314,314,314,314,314,314,314,314,314,314,,314',
'314,,314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,314,,,,,,314',
',,,,,,,314,,,,,314,314,314,314,314,314,,,,314,314,22,22,22,,22,,,,22',
'22,,,,22,,22,22,22,22,22,22,22,,,,,22,22,22,22,22,22,22,,,,,,,,,,22',
',,22,22,22,22,22,22,22,22,22,22,,22,22,,,,22,,,,,,,,,,,,,,,,,22,,,22',
',,22,,,22,22,,22,,,,,,,,,,,,,,,,,,,22,22,22,22,22,22,,,,22,22,21,21',
'21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,21,21,21,21,21,21,21',
',,,,,,,,,21,,,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,,,',
',,,,,,,,,,,,21,,,21,,,21,21,,21,,21,,21,,21,,,,,,,,21,,,,,21,21,21,21',
'21,21,,,,21,21,467,467,467,,467,,,,467,467,,,,467,,467,467,467,467,467',
'467,467,,,,,467,467,467,467,467,467,467,,,,,,,,,,467,,,467,467,467,467',
'467,467,467,467,467,467,,467,467,,467,467,467,,,,,,,,,,,,,,,,,,,,467',
',,467,,,467,467,,467,,467,,,,467,,,,,,,,467,,,,,467,467,467,467,467',
'467,,,,467,467,890,890,890,,890,,,,890,890,,,,890,,890,890,890,890,890',
'890,890,,,,,890,890,890,890,890,890,890,,,,,,,,,,890,,,890,890,890,890',
'890,890,890,890,890,890,,890,890,,890,890,890,,,,,,,,,,,,,,,,,,,,890',
',,890,,,890,890,,890,,890,,890,,890,,,,,,,,890,,,,,890,890,890,890,890',
'890,,,,890,890,732,732,732,,732,,,,732,732,,,,732,,732,732,732,732,732',
'732,732,,,,,732,732,732,732,732,732,732,,,,,,,,,,732,,,732,732,732,732',
'732,732,732,732,732,732,,732,732,,732,732,732,,,,,,,,,,,,,,,,,,,,732',
',,732,,,732,732,,732,,,,,,732,,,,,,,,732,,,,,732,732,732,732,732,732',
',,,732,732,17,17,17,17,17,,,,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17',
'17,17,17,17,17,17,,,17,,,,,,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
',17,17,,17,17,17,,,,,,,,,,,,,,,,,,,,17,,,17,,,17,17,,17,,17,,17,,17',
',,,,,,,17,,,,,17,17,17,17,17,17,,,,17,17,652,652,652,652,652,652,652',
'652,,,652,652,652,652,652,,,652,652,652,652,652,652,652,,,652,652,652',
'652,652,652,652,652,652,652,652,652,652,652,652,652,652,652,652,652',
'652,652,652,,,652,,,,,,,,652,652,,652,652,652,652,,652,652,,,652,,,',
',652,652,652,652,,,,,,,,,,,,,652,652,,652,652,652,652,652,652,652,652',
'652,,652,,,652,652,,,326,326,326,,326,,,652,326,326,,,,326,,326,326',
'326,326,326,326,326,,,,,326,326,326,326,326,326,326,,,,,,,,,,326,,,326',
'326,326,326,326,326,326,326,326,326,,326,326,,326,326,326,,,,,,,,,,',
',,,,,,,,,326,,,326,,326,326,326,,326,,326,,326,,326,,,,,,,,326,,,,,326',
'326,326,326,326,326,,,,326,326,327,327,327,,327,,,,327,327,,,,327,,327',
'327,327,327,327,327,327,,,,,327,327,327,327,327,327,327,,,327,,,,,,',
'327,,,327,327,327,327,327,327,327,327,327,327,,327,327,,327,327,327',
',,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,327,,,,,,327,,,,,,,,327,,,,',
'327,327,327,327,327,327,,,,327,327,328,328,328,,328,,,,328,328,,,,328',
',328,328,328,328,328,328,328,,,,,328,328,328,328,328,328,328,,,328,',
',,,,,328,,,328,328,328,328,328,328,328,328,328,328,,328,328,,328,328',
'328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,328,,,,,,328,,,,,,,,328',
',,,,328,328,328,328,328,328,,,,328,328,329,329,329,,329,,,,329,329,',
',,329,,329,329,329,329,329,329,329,,,,,329,329,329,329,329,329,329,',
',329,,,,,,,329,,,329,329,329,329,329,329,329,329,329,329,,329,329,,329',
'329,329,,,,,,,,,,,,,,,,,,,,329,,,329,,,329,329,,329,,,,,,329,,,,,,,',
'329,,,,,329,329,329,329,329,329,,,,329,329,330,330,330,,330,,,,330,330',
',,,330,,330,330,330,330,330,330,330,,,,,330,330,330,330,330,330,330',
',,330,,,,,,,330,,,330,330,330,330,330,330,330,330,330,330,,330,330,',
'330,330,330,,,,,,,,,,,,,,,,,,,,330,,,330,,,330,330,,330,,,,,,330,,,',
',,,,330,,,,,330,330,330,330,330,330,,,,330,330,331,331,331,331,331,',
',,331,331,,,,331,,331,331,331,331,331,331,331,,,,,331,331,331,331,331',
'331,331,,,331,,,,,,331,331,331,331,331,331,331,331,331,331,331,331,331',
'331,,331,331,,331,331,331,,,,,,,,,,,,,,,,,,,,331,,,331,,,331,331,,331',
',331,,331,,331,,,,,,,,331,,,,,331,331,331,331,331,331,,,,331,331,470',
'470,470,,470,,,,470,470,,,,470,,470,470,470,470,470,470,470,,,,,470',
'470,470,470,470,470,470,,,470,,,,,,,470,,,470,470,470,470,470,470,470',
'470,470,470,,470,470,,470,470,470,,,,,,,,,,,,,,,,,,,,470,,,470,,,470',
'470,,470,,,,,,470,,,,,,,,470,,,,,470,470,470,470,470,470,,,,470,470',
'733,733,733,,733,,,,733,733,,,,733,,733,733,733,733,733,733,733,,,,',
'733,733,733,733,733,733,733,,,,,,,,,,733,,,733,733,733,733,733,733,733',
'733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733',
'733,,733,,,,,,733,,,,,,,,733,,,,,733,733,733,733,733,733,,,,733,733',
'735,735,735,,735,,,,735,735,,,,735,,735,735,735,735,735,735,735,,,,',
'735,735,735,735,735,735,735,,,,,,,,,,735,,,735,735,735,735,735,735,735',
'735,735,735,,735,735,,735,735,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735',
'735,,735,,735,,735,,735,,,,,,,,735,,,,,735,735,735,735,735,735,,,,735',
'735,13,13,13,,13,,,,13,13,,,,13,,13,13,13,13,13,13,13,,,,,13,13,13,13',
'13,13,13,,,,,,,,,,13,,,13,13,13,13,13,13,13,13,13,13,,13,13,,13,13,13',
',,,,,,,,,,,,,,,,,,,13,,,13,,,13,13,,13,,13,,13,,13,,,,,,,,13,,,,,13',
'13,13,13,13,13,,,,13,13,346,346,346,,346,,,,346,346,,,,346,,346,346',
'346,346,346,346,346,,,,,346,346,346,346,346,346,346,,,,,,,,,,346,,,346',
'346,346,346,346,346,346,346,346,346,,346,346,,346,346,346,,,,,,,,,,',
',,,,,,,,,346,,,346,,,346,346,,346,,346,,,,346,,,,,,,,346,,,,,346,346',
'346,346,346,346,,,,346,346,781,781,781,,781,,,,781,781,,,,781,,781,781',
'781,781,781,781,781,,,,,781,781,781,781,781,781,781,,,,,,,,,,781,,,781',
'781,781,781,781,781,781,781,781,781,,781,781,,781,781,781,,,,,,,,,,',
',,,,,,,,,781,,,781,,,781,781,,781,,781,,,,781,,,,,,,,781,,,,,781,781',
'781,781,781,781,,,,781,781,473,473,473,,473,,,,473,473,,,,473,,473,473',
'473,473,473,473,473,,,,,473,473,473,473,473,473,473,,,,,,,,,,473,,,473',
'473,473,473,473,473,473,473,473,473,,473,473,,473,473,473,,,,,,,,,,',
',,,,,,,,,473,,,473,,,473,473,,473,,,,,,473,,,,,,,,473,,,,,473,473,473',
'473,473,473,,,,473,473,344,344,344,,344,,,,344,344,,,,344,,344,344,344',
'344,344,344,344,,,,,344,344,344,344,344,344,344,,,,,,,,,,344,,,344,344',
'344,344,344,344,344,344,344,344,,344,344,,344,344,344,,,,,,,,,,,,,,',
',,,,,344,,,344,,,344,344,,344,,,,,,344,,,,,,,,344,,,,,344,344,344,344',
'344,344,,,,344,344,423,423,423,,423,,,,423,423,,,,423,,423,423,423,423',
'423,423,423,,,,,423,423,423,423,423,423,423,,,,,,,,,,423,,,423,423,423',
'423,423,423,423,423,423,423,,423,423,,423,423,423,,,,,,,,,,,,,,,,,,',
',423,,,423,,,423,423,,423,,423,,423,,423,,,,,,,,423,,,,,423,423,423',
'423,423,423,,,,423,423,630,630,630,630,630,630,630,630,,,630,630,630',
'630,630,,,630,630,630,630,630,630,630,,,630,630,630,630,630,630,630',
'630,630,630,630,630,630,630,630,630,630,630,630,630,630,630,630,,,630',
',,,,,,,630,630,,630,630,630,630,,630,630,,,630,,,,,630,630,630,630,',
',,,,,,,,,,,630,630,,630,630,630,630,630,630,630,630,630,,630,,,630,270',
'270,270,270,270,270,270,270,,,270,270,270,270,270,,,270,270,270,270',
'270,270,270,,,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,,,,,,,270,270,,270',
'270,270,270,,270,270,,,270,,,,,270,270,270,270,,,,,,,,,,,,,270,270,',
'270,270,270,270,270,270,270,270,270,,270,,,270,84,84,84,84,84,84,84',
'84,,,84,84,84,84,84,,,84,84,84,84,84,84,84,,,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,,,,,,,84,84',
',84,84,84,84,,84,84,,,84,,,,,84,84,84,84,,,,,,,,,,,,,84,84,,84,84,84',
'84,84,84,84,84,84,,84,,,84,31,31,31,31,31,31,31,31,,,31,31,31,31,31',
',,31,31,31,31,31,31,31,,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,31,31,,,,,,,31,31,,31,31,31,31,,31,31',
',,31,,,,,31,31,31,31,,,,,,31,,,,,,,31,31,,31,31,31,31,31,31,31,31,31',
',31,428,428,31,,428,,,,,,,,428,428,,428,428,428,428,,428,428,,,428,',
',,,428,428,428,428,,,,,,,,,,,,,428,428,,428,428,428,428,428,428,428',
'428,428,,428,860,860,428,,860,,,,,,,,860,860,,860,860,860,860,,860,860',
',,860,,,,,860,860,860,860,,,,,,,,,,,,,860,860,,860,860,860,860,860,860',
'860,860,860,,860,388,388,860,,388,,,,,,,,388,388,,388,388,388,388,,388',
'388,,,388,,,,,388,388,388,388,,,,,,,,,,,,,388,388,,388,388,388,388,388',
'388,388,388,388,,388,386,386,388,,386,,,,,,,,386,386,,386,386,386,386',
',386,386,,,386,,,,,386,386,386,386,,,,,,,,,,,,,386,386,,386,386,386',
'386,386,386,386,386,386,,386,858,858,386,,858,,,,,,,,858,858,,858,858',
'858,858,,858,858,,,858,,,,,858,858,858,858,,,,,,,,,,,,,858,858,,858',
'858,858,858,858,858,858,858,858,,858,,,858,587,587,587,587,587,587,587',
'587,587,587,587,,587,587,,,587,587,,,,587,,,,,,,,,,587,,587,,587,587',
'587,587,587,587,587,,587,,,,,,,,,,,,,,,,587,,587,849,849,849,849,849',
'849,849,849,849,849,849,,849,849,,,849,849,,,,,,,,,,,,,,849,,849,,849',
'849,849,849,849,849,849,,849,,,,,,,410,410,,,410,,,,,849,,849,410,410',
',410,410,410,410,,410,410,,,410,,,,,410,410,410,410,,,,,,,,,,,,,410',
'410,,410,410,410,410,410,410,410,410,410,,410,592,592,410,,592,,,,,',
',,592,592,,592,592,592,592,,592,592,,,592,,,,,592,592,592,592,,,,,,',
',,,,,,592,592,,592,592,592,592,592,592,592,592,592,,592,430,430,592',
',430,,,,,,,,430,430,,430,430,430,430,,430,430,,,430,,,,,430,430,430',
'430,,,,,,,,,,,,,430,430,,430,430,430,430,430,430,430,430,430,,430,412',
'412,430,,412,,,,,,,,412,412,,412,412,412,412,,412,412,,,412,,,,,412',
'412,412,412,,,,,,,,,,,,,412,412,,412,412,412,412,412,412,412,412,412',
',412,102,102,412,,102,,,,,,,,102,102,,102,102,102,102,,102,102,,,102',
',,,,102,102,102,102,,,,,,,,,,,,,102,102,,102,102,102,102,102,102,102',
'102,102,,102,337,337,102,,337,,,,,,,,337,337,,337,337,337,337,,337,337',
',,337,,,,,337,337,337,337,,,,,,,,,,,,,337,337,,337,337,337,337,337,337',
'337,337,337,,337,338,338,337,,338,,,,,,,,338,338,,338,338,338,338,,338',
'338,,,338,,,,,338,338,338,338,,,,,,,,,,,,,338,338,,338,338,338,338,338',
'338,338,338,338,,338,441,441,338,,441,,,,,,,,441,441,,441,441,441,441',
',441,441,,,441,,,,,441,441,441,441,,,,,,,,,,,,,441,441,,441,441,441',
'441,441,441,441,441,441,,441,442,442,441,,442,,,,,,,,442,442,,442,442',
'442,442,,442,442,,,442,,,,,442,442,442,442,,,,,,,,,,,,,442,442,,442',
'442,442,442,442,442,442,442,442,,442,443,443,442,,443,,,,,,,,443,443',
',443,443,443,443,,443,443,,,443,,,,,443,443,443,443,,,,,,,,,,,,,443',
'443,,443,443,443,443,443,443,443,443,443,,443,593,593,443,,593,,,,,',
',,593,593,,593,593,593,593,,593,593,,,593,,,,,593,593,593,593,,,,,,',
',,,,,,593,593,,593,593,593,593,593,593,593,593,593,,593,445,445,593',
',445,,,,,,,,445,445,,445,445,445,445,,445,445,,,445,,,,,445,445,445',
'445,,,,,,,,,,,,,445,445,,445,445,445,445,445,445,445,445,445,,445,104',
'104,445,,104,,,,,,,,104,104,,104,104,104,104,,104,104,,,104,,,,,104',
'104,104,104,,,,,,,,,,,,,104,104,,104,104,104,104,104,104,104,104,104',
',104,,,104,480,480,480,480,480,480,480,480,480,480,480,,480,480,,,480',
'480,,,,,,,,,,,,,,480,,480,,480,480,480,480,480,480,480,,480,,709,709',
'709,709,709,709,709,709,709,709,709,,709,709,480,480,709,709,,,,,,,',
',,,,,,709,,709,,709,709,709,709,709,709,709,,709,439,439,439,439,439',
'439,439,439,439,439,439,,439,439,,709,439,439,,,,,,,,,,,,,,439,,439',
',439,439,439,439,439,439,439,,439,528,528,528,528,528,528,528,528,528',
'528,528,,528,528,,439,528,528,,,,,,,,,,,,,,528,,528,,528,528,528,528',
'528,528,528,,528,553,553,553,553,553,553,553,553,553,553,553,,553,553',
'528,528,553,553,,,,,,,,,,,,,,553,,553,,553,553,553,553,553,553,553,',
'553,775,775,775,775,775,775,775,775,775,775,775,,775,775,,553,775,775',
',,,,,,,,,,,,,775,,775,,775,775,775,775,775,775,775,,775,768,768,768',
'768,768,768,768,768,768,768,768,,768,768,775,775,768,768,,,,,,,,,,,',
',,768,,768,,768,768,768,768,768,768,768,,768,787,787,787,787,787,787',
'787,787,787,787,787,,787,787,,768,787,787,,,,,,,,,,,,,,787,,787,,787',
'787,787,787,787,787,787,,787,776,776,776,776,776,776,776,776,776,776',
'776,,776,776,,787,776,776,,,,,,,,,,,,,,776,,776,,776,776,776,776,776',
'776,776,,776,469,469,469,469,469,469,469,469,469,469,469,,469,469,,776',
'469,469,,,,,,,,,,,,,,469,,469,,469,469,469,469,469,469,469,,469,702',
'702,702,702,702,702,702,702,702,702,702,,702,702,,469,702,702,,,,,,',
',,,,,,,702,,702,,702,702,702,702,702,702,702,,702,663,663,663,663,663',
'663,663,663,663,663,663,,663,663,,702,663,663,,,,,,,,,,,,,,663,,663',
',663,663,663,663,663,663,663,,663,707,707,707,707,707,707,707,707,707',
'707,707,,707,707,,663,707,707,,,,,,,,,,,,,,707,,707,,707,707,707,707',
'707,707,707,,707,46,46,46,46,46,46,46,46,46,46,46,,46,46,,707,46,46',
',,,,,,,,,,,,,46,,46,,46,46,46,46,46,46,46,,46,704,704,704,704,704,704',
'704,704,704,704,704,,704,704,,46,704,704,,,,,,,,,,,,,,704,,704,,704',
'704,704,704,704,704,704,,704,141,141,141,141,141,141,141,141,141,141',
'141,,141,141,,704,141,141,,,,,,,,,,,,,,141,,141,,141,141,141,141,141',
'141,141,,141,,,,,,,,,,,,,,,,141' ]
        racc_action_check = arr = Array.new(23834, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   106,  4128,  1069,   nil,   nil,   449, 10610,   149,   -10,
   nil,   941,   -94, 20778,  4538,   nil,   nil, 19466,   nil,   938,
   nil, 18986, 18866,   463, 14786, 14306, 14066,   nil,   nil,   935,
 13834, 21825, 13002, 12762, 12650,   332,   402,   nil,   345,  3160,
   nil,   935,   nil,   311,   989,   nil, 23622,   910,   nil,   nil,
   990,  6410,   nil,  5930,  4249,   nil,  5210,   nil,   982,  4610,
  4730,  4850,   nil,  4970,   nil,   nil,   -45,   202,   nil,   nil,
   nil,   nil,  5330,   nil,   nil,   nil,  5450,   nil,  5570,   413,
   nil,   877,   729,   nil, 21716,   nil,   nil,  6170,   nil,   nil,
   868,   nil,   nil,   nil,   nil,   911,   nil,  6530,  6650,   nil,
   204,   nil, 22530,  7010, 23002,   534,   266,   nil,   nil,   140,
   970,   261,   666,   869,   937,   nil,   902,   893,   nil,   nil,
   nil,   886,   nil,   nil,   nil,  8570,   nil,  8690,   nil,   855,
   nil,   131,   nil,   447,  9170,   380,   nil,   887,   -78,   nil,
   911, 23710,   nil,  3523,   nil, 10010,   818,   817,   856, 10490,
   814,   nil,   nil,   nil,   669,   -29,   814,   nil,   nil,   410,
   nil, 11210,   nil,    -5,   nil,     9,   172,   320, 11810,   537,
   nil,   475,  4898,   476,   805,   509,   862,  2555, 12882,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   414,   nil,   nil,   nil,   nil,   512,   nil,   nil,   nil,
   nil,   507,   nil,   nil,   nil,   nil,   376,   -26,   nil,   nil,
   nil,   nil,   -51,   nil,   nil,   nil,   561,   564,   nil,   -55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   671,   nil,   nil,   nil,
 21607,   848,   nil,   765, 14546, 14666,   818,   817,   873,   862,
   nil, 15266,   nil,   855,   nil,   nil,   nil,   495,   760, 15746,
 15866, 15986, 16106, 16226, 16346, 16466, 16586, 16706, 16826, 16946,
 17066, 17186, 17306, 17426, 17546, 17666, 17786, 17906, 18026, 18146,
 18266, 18386, 18506, 18626, 18746,  1466,   nil,   nil,   nil,    -3,
    11,   774,   767,   765,  2071,   nil, 19698, 19818, 19938, 20058,
 20178, 20298,   nil,   nil,   nil,   nil,    10, 22589, 22648,   645,
   757,   nil,   725,   216, 21258,    74, 20898,   503,   719,   242,
   280,   nil,   nil,   nil,   nil,   nil,   nil,   138,   730,   314,
   -56,   nil, 12410, 12170,   313, 11930, 11690,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   738, 11450,     0, 11330,   nil,    78,
   729,  9770,   nil,   393,   nil,   390, 22061,  8450, 22002,   nil,
   nil,   nil,   730,   289,   nil,   nil,   184,   270,   nil,   nil,
  6890,   728,   787,   691,   432,   686,   nil,   113,   nil,   nil,
 22294,  6050, 22471,   nil,  7370,  7490,   -37,  7970,   nil,  9050,
   nil,  9290,   679, 21378,   nil,   663,   nil,   nil, 21884,  9530,
 22412,   682,   nil,   nil,   535,     2,   nil,   nil,   nil, 23138,
   nil, 22707, 22766, 22825, 11570, 22943,   nil,   nil,   536,   687,
   nil,  4370,   nil,   nil,   nil,  5698, 13234, 13954,   nil,   nil,
   nil,   nil,   nil,   nil, 14186, 15386,   760, 19106,   nil, 23446,
 20418,  1345,   nil, 21138,  1587,  2434,   708,   982,  2313,   705,
 23049,  2192,   426,  1201,  2555,   621,  1079,  1829,  1708,  1466,
  1345,  1224,  2797,  1587,   703,  2071,  2918,  2676,   700,  1103,
  1950,   647,    99,   nil,  1345,   nil,   743,   nil,   629,   665,
   649,   nil,   nil,   nil,   nil,   nil,   nil,  1950,   560,   nil,
   nil,   614,   608,   nil,   nil,   nil,   nil, 13594, 23182,   nil,
 13474,   nil,   nil,   729,   nil,   603, 13114,  2434,   691, 12530,
   672,   nil,   nil, 12290,   nil,   nil,   nil,   nil,   nil,   561,
   nil,   131,   nil, 23226,   nil,   193,  3281,   643,   590,   nil,
 11090, 10970,   271,   573,   nil,   nil,   nil, 10850, 10730,   573,
   284,   209,   566,   564,   332,   211,  8930,   -51,   nil,   nil,
  8810,   nil,   nil,   nil,   nil,   -66,   550, 22167,  8210,   482,
   nil,   467, 22353, 22884,   465,  7250,   nil,   nil,   329,   450,
   458,   363,   336,   nil,   855,   nil,   445,  5090,   391,   395,
   nil,   391,   nil,  7130,   nil,   nil,   347,   -32,   371,   546,
   nil, 10130,  3039,   318,   503,   203,   102,   193,   nil,   215,
 21498,    87,   nil,   nil,   nil,   135,   -15,   788,   nil,   nil,
   nil,   nil,   -93,  3765,   nil,   nil,    -4,   nil,    31,   580,
   -33,   nil, 19586,   170,   198,  2797,   320,   nil,   nil,   229,
   nil,   339,   104, 23534,   378,  4490,   nil,   nil,   665,   nil,
    88,   nil,   529,   nil,   nil,   nil,   nil,   457,   nil,  6770,
   nil,  7610,  7850,   nil,   574,   nil,    45,   499,  8330,   632,
   nil,   nil,   nil,   nil,   nil,   535,   nil,   nil,   nil,   nil,
   nil,   nil, 23490,   nil, 23666, 10370,   nil, 23578,   nil, 23094,
   nil,    36,   284,   nil,  2676,   614,   nil,  2313,   641, 13714,
   nil,   609, 14426,   nil,   nil,   655,   656,   nil,   718,   -71,
 15506,   162, 19346, 20538,   640, 20658,   nil,   643,   nil,   nil,
   470,   761,   237,   nil,   nil,   nil,   155,   nil, 12050,   nil,
   nil,   777,   nil,   618,   nil,   609,   685,   720,   nil,   nil,
   nil,   982,   nil,    41,  5690,   nil,   nil,   nil, 23314,  3886,
  9890,   813,   nil,   814,   nil, 23270, 23402,   713, 13354,   nil,
  2918, 21018,   nil,   nil,  2192,  1103,   nil, 23358,   nil,   nil,
  1224,   854,   nil,   755,   nil,   nil,   742, 15626,   744,   nil,
 15146,   791, 15026,   nil, 14906,   nil,  1708,   nil,   nil,  6538,
   nil,   nil,   nil,   766,   nil,   768,   769,   nil,   765,   808,
   nil,   nil,  1829,   531,   477,   335,   881,   nil,   928,    98,
   nil,   nil,   nil,   nil,   272, 10250,   934,   937,  3402,   854,
   nil,   nil,  9650,   nil,   840,  9410,   nil,   848,   nil, 22229,
   968,  3644,   nil,   nil,   596,   nil,   nil,   974, 22120,  8090,
 21943,   453,   nil,  4007,   nil,   nil,   nil,   nil,   nil,   nil,
   987,   nil,  6290,   881,   nil,  5810,   nil,   nil,   nil,   999,
   884,   nil,    99,   -70,   948,    67,    71,    32,   nil,   936,
 19226,   nil,   941,   nil,   nil,   533,   nil,   nil,  7730,   nil,
   945,   nil ]

racc_action_default = [
    -1,  -501,  -499,  -501,  -499,  -377,  -501,  -501,  -253,  -292,
  -415,  -499,  -378,  -320,  -501,   -61,    -2,  -501,  -416,  -499,
  -379,  -321,  -501,  -275,  -501,   -65,  -501,  -322,  -323,  -501,
  -501,  -501,  -501,  -501,  -501,   -34,  -430,  -382,  -501,  -499,
   -73,  -490,  -409,  -488,  -501,   -20,   -40,  -501,  -429,    -5,
   -42,  -286,  -428,  -501,  -499,   -43,  -289,  -268,    -6,  -419,
  -353,  -501,  -269,  -501,  -425,  -376,   -47,  -478,  -270,  -424,
  -421,  -271,  -501,  -426,  -420,  -272,  -499,  -427,  -422,  -218,
  -273,  -501,  -488,  -423,  -499,  -274,   -35,  -499,  -432,  -499,
  -501,  -296,  -433,  -499,  -375,  -501,  -299,   -72,  -501,   902,
  -501,  -397,  -501,  -499,  -501,  -501,  -501,  -320,  -321,  -275,
  -501,  -430,  -501,  -490,  -501,  -286,  -289,  -353,  -324,  -336,
  -337,   -53,  -357,  -348,  -354,  -501,  -291,  -499,  -293,  -501,
  -387,  -501,  -380,  -501,  -501,  -275,  -240,  -263,  -430,  -473,
  -501,  -219,  -232,  -499,   -45,  -501,  -501,  -500,  -501,  -501,
  -500,   -71,  -419,  -422,    -8,  -501,  -501,  -393,   -46,  -501,
  -275,  -501,  -430,  -501,   -96,  -501,   -93,   -94,  -501,  -501,
  -211,  -501,  -501,   -84,   -66,   -77,  -501,  -499,   -69,  -313,
   -75,  -195,  -170,  -152,  -123,  -171,  -141,  -172,  -155,  -110,
  -143,  -131,  -173,  -128,  -154,  -132,  -159,  -174,  -129,  -144,
  -119,  -161,  -126,  -138,  -130,  -167,  -120,  -153,  -125,  -140,
  -146,  -121,  -145,  -127,  -160,  -122,  -136,  -111,  -150,  -117,
  -137,  -501,  -315,  -149,  -162,  -115,  -134,  -112,  -169,  -108,
  -101,  -135,  -113,  -468,  -164,  -102,   -98,  -163,  -109,  -100,
  -116,  -165,  -156,  -118,  -148,  -147,  -166,   -99,  -142,  -151,
  -133,  -467,  -114,  -168,  -139,  -158,  -124,  -157,  -103,  -134,
  -135,   -98,  -163,  -104,    -9,  -156,  -501,  -166,   -99,  -151,
  -501,  -196,  -105,   -14,  -501,  -501,  -417,  -418,  -367,  -501,
  -491,  -501,  -496,  -489,  -495,  -497,    -4,  -282,  -501,  -501,
  -501,  -501,  -501,  -501,  -501,  -501,  -501,  -501,  -501,  -501,
  -501,  -501,  -501,  -501,  -501,  -501,  -501,  -501,  -501,  -501,
  -501,  -501,  -501,  -501,  -501,  -499,  -345,  -342,   -44,   -41,
  -501,   -61,  -501,  -501,  -499,   -60,  -501,  -501,  -501,  -501,
  -501,  -501,   -59,  -352,  -210,   -39,  -501,  -501,  -501,  -278,
  -501,  -220,  -490,  -492,  -501,  -492,  -501,  -501,  -489,  -488,
  -501,  -410,  -408,  -412,  -411,  -413,  -470,  -492,  -501,  -492,
  -501,  -395,  -501,  -501,  -501,  -501,  -501,   -70,   -38,  -398,
  -399,  -384,  -402,  -400,  -253,  -485,  -479,  -484,  -351,  -480,
  -501,  -499,  -482,  -479,  -481,  -480,  -501,  -499,  -501,  -305,
  -417,  -418,  -501,  -282,   -54,   -50,  -499,  -499,  -254,  -255,
  -256,  -501,  -232,  -490,  -490,  -500,  -385,  -501,  -389,  -386,
  -501,  -499,  -501,  -260,  -501,  -501,  -282,  -501,  -262,  -501,
  -233,  -501,  -500,  -501,  -235,  -501,  -392,  -391,  -501,  -499,
  -501,  -310,   -95,   -93,   -94,  -501,  -435,  -308,  -434,  -184,
   -30,  -501,  -501,  -501,  -499,  -501,   -67,   -76,   -83,  -501,
   -68,  -499,  -487,  -486,  -317,  -448,  -501,  -501,   -13,   -12,
   -11,  -106,   -36,   -37,  -501,  -501,  -499,  -499,  -277,  -216,
  -501,    -7,  -498,  -501,  -499,  -205,  -191,  -186,  -206,  -190,
  -501,  -207,  -187,  -212,  -202,  -188,  -213,  -204,  -203,  -214,
  -201,  -215,  -197,  -208,  -189,  -209,  -198,  -199,  -192,  -200,
  -185,  -501,  -499,  -327,  -499,  -326,  -325,  -280,   -62,  -501,
  -501,  -288,   -15,   -16,   -17,   -18,   -19,  -499,  -253,  -479,
  -480,  -253,  -490,  -284,  -221,  -493,  -222,  -494,  -490,  -224,
  -494,   -31,  -263,  -175,   -23,  -501,  -501,  -499,  -501,  -501,
  -501,  -414,  -472,  -494,  -285,  -471,  -396,  -381,   -33,   -32,
   -24,  -501,  -383,  -177,   -25,  -501,  -499,  -501,   -57,  -350,
  -501,  -501,  -283,   -55,  -231,  -349,  -230,  -501,  -501,  -501,
  -483,  -281,  -501,  -499,  -479,  -480,  -501,  -499,  -358,  -340,
  -501,  -338,  -355,  -252,  -258,  -501,  -501,   -40,  -501,  -500,
  -226,  -501,  -501,  -501,  -501,  -501,  -390,  -388,  -483,  -281,
  -501,  -479,  -480,  -475,  -175,  -261,  -264,  -501,  -500,  -501,
  -239,  -501,  -474,  -501,  -394,   -97,   -93,   -94,  -501,  -501,
  -437,  -501,  -499,   -80,   -82,  -501,  -479,  -480,   -74,  -501,
  -501,  -466,  -447,  -453,  -456,  -461,  -452,  -501,  -459,  -458,
  -463,  -450,  -501,  -499,  -462,  -449,  -466,  -451,  -466,  -448,
  -490,   -10,  -501,  -193,  -194,  -499,  -499,  -334,  -369,  -368,
  -370,  -499,  -501,  -183,  -501,  -501,   -22,  -343,  -499,  -328,
   -62,  -287,  -499,   -49,  -347,   -48,  -346,  -501,  -264,  -501,
  -225,  -501,  -501,  -267,  -501,  -303,  -501,  -361,  -501,  -501,
  -330,  -297,  -331,  -329,  -300,  -501,  -407,  -401,  -404,  -405,
  -406,   -58,  -181,   -29,  -182,  -501,   -56,  -179,   -27,  -180,
   -28,  -283,  -501,   -51,  -499,  -501,  -339,  -499,  -501,  -501,
  -257,  -500,  -501,  -245,  -227,  -499,  -499,  -228,  -501,  -490,
  -501,  -283,  -501,  -501,  -500,  -501,  -237,  -500,  -283,  -311,
  -501,  -501,   -78,  -314,  -318,  -446,  -501,  -460,  -501,  -464,
  -439,  -501,  -443,  -501,  -445,  -501,  -490,  -501,  -107,  -335,
    -3,  -499,  -374,  -501,  -501,  -372,  -290,   -21,  -217,  -499,
  -501,  -501,  -332,  -501,  -279,  -490,  -176,  -265,  -501,  -304,
  -499,  -501,  -363,  -302,  -499,  -499,  -403,  -178,   -26,  -306,
  -499,  -501,  -341,  -501,  -259,  -242,  -500,  -501,  -500,  -251,
  -501,  -501,  -501,  -234,  -501,  -236,  -499,  -436,  -309,  -448,
  -465,  -455,  -316,  -466,  -454,  -466,  -466,  -457,  -501,  -501,
  -469,  -373,  -499,  -501,   -92,   -85,  -501,  -371,  -501,  -501,
  -294,  -295,  -223,  -266,  -499,  -501,  -501,  -501,  -499,  -501,
  -359,  -356,  -501,  -241,  -500,  -501,  -247,  -500,  -229,  -500,
  -501,  -499,  -442,  -441,  -501,  -444,  -438,  -367,  -501,  -499,
  -501,   -91,  -344,  -499,  -360,  -365,  -364,  -362,  -298,  -301,
  -501,   -52,  -501,  -500,  -243,  -501,  -246,  -238,  -312,  -501,
  -466,  -366,  -483,   -90,  -501,  -479,  -480,  -499,  -307,  -500,
  -501,  -248,  -500,  -319,  -440,   -86,  -333,  -244,  -501,  -249,
  -500,  -250 ]

clist = [
'141,142,279,264,118,272,222,466,141,142,263,170,263,340,538,230,230',
'181,230,118,271,335,118,118,110,120,404,147,643,656,121,286,394,320',
'632,147,408,150,141,142,380,323,771,336,817,150,100,321,334,691,154',
'502,123,694,745,432,531,285,281,351,578,582,349,141,342,147,251,367',
'230,752,347,754,548,101,141,150,358,165,325,504,130,179,332,374,128',
'381,375,813,157,816,141,342,586,612,118,517,285,398,584,652,136,357',
'174,437,333,790,577,221,136,144,454,359,141,142,141,402,522,158,363',
'674,784,141,676,366,785,576,350,838,440,622,392,619,334,806,451,364',
'141,455,136,147,630,405,809,817,718,341,769,318,450,150,123,150,397',
'101,717,439,356,396,361,714,686,333,101,319,449,864,667,526,661,529',
'321,763,341,319,132,118,360,658,288,438,131,542,339,545,407,457,155',
'424,880,697,557,556,319,621,756,815,401,273,283,760,612,814,2,456,1',
',,689,368,,789,,136,,136,,,,,,,399,,403,,,,,632,,,,,,,773,852,,853,855',
',713,,,,351,,,,,,,,,230,,,,,,,896,,,,546,,,469,,,431,,,,,475,476,477',
'478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494',
'495,496,497,498,499,500,,894,,,534,512,513,514,515,509,596,141,142,',
'471,321,518,521,615,95,550,,572,554,674,676,,,,528,,533,,,95,540,,,147',
',,551,,,555,,600,141,150,,553,,,,,,95,524,535,,,285,516,,618,16,,573',
'375,,,95,141,342,535,,,,,625,851,,462,463,,587,632,,,374,612,381,375',
',558,866,141,342,,439,141,563,604,612,141,,553,,141,573,375,136,629',
',141,342,559,322,591,594,510,573,589,375,573,375,651,,,141,342,,,263',
',319,319,319,319,230,,608,,780,,,,620,566,653,654,,141,,341,,,610,663',
',95,,,581,581,,,701,,,,319,706,,319,,,,341,535,,,,,,583,,,,,,,729,,95',
',341,,,865,,,,,,,322,,339,,,341,141,612,,141,,,703,,822,141,,,141,708',
'710,,141,,,,,657,660,,,677,673,,322,675,,680,,702,704,,,,,687,707,709',
'712,,,,612,,,,,693,650,,,693,,581,,725,726,141,,118,,,662,,141,728,',
'741,881,566,863,,566,,,,141,,,715,120,,141,740,95,,,744,751,,,,,,,559',
'230,,,,,608,,,,758,,,723,,,,263,,,739,95,,230,,,,,,566,95,,736,581,',
',,95,,768,,,,750,,,,,,,,,788,775,757,776,141,,,,,,141,,,,,501,,,,,,319',
',,322,,,787,,,,,,,,,,,,,,141,,,141,,,,,,,,702,,707,709,,141,,,762,693',
',,6,765,319,,796,105,141,,657,,,133,657,,798,6,,801,,133,159,829,,171',
'159,807,,,,799,,,118,,,,141,6,,141,850,95,803,,819,805,,,,133,,133,6',
',,141,,,141,133,787,133,849,832,95,566,566,884,,,133,,,,133,,,795,,',
'133,,,,,879,,,,,,,,141,95,171,133,,,,141,133,,141,843,,846,95,,,664',
',573,375,,,,141,342,,,,,133,,133,,95,,,141,,,141,,,,873,,,668,6,,,,',
'95,,141,,,319,874,672,,876,141,877,,133,,,,,,36,133,,,,111,,,684,657',
'6,171,151,,,36,891,,,,162,,,175,162,,,695,,162,,,897,,341,899,,36,,',
',,,901,,,,95,,,,,36,,,,,,,,,,657,,,,,,95,,,,,,,,,,,,95,,,,,,,,,,,,,',
',175,,23,,,,,109,,,,,133,133,,,,23,,,,6,160,,,173,160,,,,,759,,,,,,',
',23,,,,,95,,36,95,,,,,,6,23,,,,,,,,6,,133,133,133,133,133,6,,,,,,446',
',,,,36,175,,,133,,,,,,791,95,,793,,,,173,,95,133,133,,133,133,,,,,,95',
',,,95,95,,,,,95,,,,,133,,,,,,,,,,,95,821,133,,,,,23,,828,,,,133,,,95',
',,,834,,,,836,837,,,,,839,133,95,,,,,,,,,23,173,,,95,133,,,,36,,,6,',
',,95,133,,,,857,,,,,,,,,,133,,,,6,,870,,,,36,,,,,,,,,36,,,,,,,36,,,',
',887,,,6,,,,,,,,,,,,,6,,,,,,,,,,,,,,,,,,,81,6,,,,119,,,,23,,,,,,81,',
',,,6,,,,133,,,,,,,133,133,,,,,81,,,133,23,,,105,,,,,,23,,81,,,,,23,',
'133,,,,,,,,,,,,,,,,,,,,,36,,,,,133,6,,,,,,,,,,,,,,,,,36,,,,6,,,,,,,',
',,,,6,,,,,,,,,,,,,,36,,,,,,,,81,,,,,36,,,,,,,,,,,,,,,,,,,,36,,,133,',
',,,,81,,23,6,,,6,,,,36,,,,,,,,,,,,,,,23,,,,,,,,,111,,,,,,,,,,,413,,',
',,6,,,823,,23,,,6,133,422,,,,,,,,23,6,,,,6,6,,36,,,6,,,,,,,,,23,,,,',
',,6,,36,,,,,,,8,,81,23,696,36,,6,,,,8,,,,8,,,,8,,,,6,,,,109,,,,,,,81',
',6,8,,,,,,81,133,,,,6,8,81,8,8,,,,,,,8,,8,,,36,,,36,,23,8,,,,8,,,,,',
'8,,,,,,,,,,23,,,,,,8,,,,,8,23,,,,,,,,,36,,,825,,,,,36,,,,8,,8,,,,,36',
',,,36,36,,,,,36,8,,,,,,,,,,,,532,,,36,,,8,,23,,,23,,8,,,549,81,,36,',
',8,,,,,,,,,,,,,36,,,,,81,,,,,,,,36,,,,,,585,23,,,824,,36,,,23,,,,,,603',
'81,,,606,23,,,611,23,23,,,,81,23,,,,,,,,,,,,,,,,23,,,81,,,,,,,,,,,,',
'23,,,8,8,659,81,,,,,,8,,,,23,,,,,,,,,,,,,23,119,,,,,,,,,,,23,,,8,,,',
',,,,,8,,8,8,8,8,8,8,,,,,678,,,611,,,,81,,683,8,,532,,,,678,,,,,,,,,',
'8,8,81,8,8,,,,,,,,,,81,,,,,,,,,,,8,,,,,,,,,,721,,,8,,,,606,,,,,,,8,',
',,,734,,,,,,737,,,,,,,8,,,,,,81,,,81,,,,,,8,,,,,,,8,,,,,8,,,,,,,,,,',
',,,8,,,,8,,,,,,,,81,,,827,,,,,81,777,,,,,,782,,,,81,,,8,81,81,,,,,81',
',,,,,8,,,,,,,,,,81,,,,611,,,,,,8,,,,,,81,611,,,,,,,,,,,,8,811,,81,8',
',,,,,,8,8,,,,81,,,,8,,,,,,,,81,,,833,,,678,,,,,8,,,,,,,,,,,844,,,847',
',,,,,,,,,,,8,8,,,,,,,,,,,,,,,,,,,,,8,867,,,,,,,606,,,611,8,,,,,,,,,',
',,,,,,,,,,,,,,,,889,,,892,,,,,,,,,,,,,,,611,,,,,,8,,900,,,,,,,8,,,8',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,,,,,,,,8,8,,,,,,,,,,8,',
',,8,8,,,,,8,,,,,,,,,,,,,,,,8,,,,,,,,,,,,,,,,8,,,,,,,,,,,,,,,,8,,,,,',
',,,,,,,8,,,,,,,,8,,,,8' ]
        racc_goto_table = arr = Array.new(2404, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,29,3,13,54,13,48,5,28,29,51,28,51,21,81,49,49,28,49,54,28,17,54,54',
'82,18,32,55,85,6,34,9,35,15,134,55,122,57,28,29,21,41,79,15,136,57,119',
'40,28,80,11,103,58,80,133,46,23,84,53,48,36,36,15,28,29,55,74,45,49',
'133,9,133,23,10,28,57,75,47,34,78,10,47,34,33,76,33,49,132,10,132,28',
'29,65,140,54,78,84,63,62,52,61,55,43,83,58,38,37,86,61,31,87,57,28,29',
'28,29,88,31,89,59,90,28,59,91,92,93,119,94,17,95,53,96,28,97,98,119',
'28,99,61,55,100,55,101,136,66,10,104,31,45,57,58,57,106,10,107,28,10',
'108,10,109,110,58,10,25,41,111,36,56,112,56,40,113,10,25,117,54,118',
'23,27,84,120,56,25,56,121,26,123,60,132,124,125,126,25,128,129,131,10',
'14,12,7,140,135,4,139,1,,,81,25,,80,,61,,61,,,,,,,31,,31,,,,,134,,,',
',,,6,133,,133,133,,36,,,,48,,,,,,,,,49,,,,,,,79,,,,122,,,28,,,25,,,',
',28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,,133,,,17,15,15,15,15,41,122,28,29,,11,40,33,33,46,19,17,,21',
'17,59,59,,,,28,,28,,,19,9,,,55,,,15,,,15,,21,28,57,,28,,,,,,19,53,55',
',,84,11,,21,2,,33,49,,,19,28,29,55,,,,,21,85,,25,25,,28,134,,,33,140',
'33,49,,34,6,28,29,,28,28,34,28,140,28,,28,,28,33,49,61,3,,28,29,58,2',
'53,53,31,33,57,49,33,49,13,,,28,29,,,51,,25,25,25,25,49,,57,,78,,,,84',
'10,28,28,,28,,10,,,60,28,,19,,,10,10,,,35,,,,25,35,,25,,,,10,55,,,,',
',61,,,,,,,32,,19,,10,,,81,,,,,,,2,,25,,,10,28,140,,28,,,17,,78,28,,',
'28,17,17,,28,,,,,10,10,,,53,34,,2,34,,53,,28,28,,,,,55,28,28,15,,,,140',
',,,,84,25,,,84,,10,,33,33,28,,54,,,25,,28,29,,3,5,10,78,,10,,,,28,,',
'82,18,,28,15,19,,,48,3,,,,,,,58,49,,,,,57,,,,13,,,60,,,,51,,,84,19,',
'49,,,,,,10,19,,60,10,,,,19,,28,,,,84,,,,,,,,,17,28,53,28,28,,,,,,28',
',,,,2,,,,,,25,,,2,,,28,,,,,,,,,,,,,,28,,,28,,,,,,,,28,,28,28,,28,,,10',
'84,,,20,10,25,,55,20,28,,10,,,20,10,,57,20,,53,,20,20,15,,20,20,84,',
',,60,,,54,,,,28,20,,28,3,19,60,,53,60,,,,20,,20,20,,,28,,,28,20,28,20',
'28,53,19,10,10,21,,,20,,,,20,,,61,,,20,,,,,3,,,,,,,,28,19,20,20,,,,28',
'20,,28,60,,60,19,,,2,,33,49,,,,28,29,,,,,20,,20,,19,,,28,,,28,,,,57',
',,2,20,,,,,19,,28,,,25,60,2,,60,28,60,,20,,,,,,44,20,,,,44,,,2,10,20',
'20,44,,,44,60,,,,44,,,44,44,,,2,,44,,,60,,10,60,,44,,,,,,60,,,,19,,',
',,44,,,,,,,,,,10,,,,,,19,,,,,,,,,,,,19,,,,,,,,,,,,,,,44,,22,,,,,22,',
',,,20,20,,,,22,,,,20,22,,,22,22,,,,,2,,,,,,,,22,,,,,19,,44,19,,,,,,20',
'22,,,,,,,,20,,20,20,20,20,20,20,,,,,,44,,,,,44,44,,,20,,,,,,2,19,,2',
',,,22,,19,20,20,,20,20,,,,,,19,,,,19,19,,,,,19,,,,,20,,,,,,,,,,,19,2',
'20,,,,,22,,2,,,,20,,,19,,,,2,,,,2,2,,,,,2,20,19,,,,,,,,,22,22,,,19,20',
',,,44,,,20,,,,19,20,,,,2,,,,,,,,,,20,,,,20,,2,,,,44,,,,,,,,,44,,,,,',
',44,,,,,2,,,20,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,16,20,,,,16,,,,22,,',
',,,16,,,,,20,,,,20,,,,,,,20,20,,,,,16,,,20,22,,,20,,,,,,22,,16,,,,,22',
',20,,,,,,,,,,,,,,,,,,,,,44,,,,,20,20,,,,,,,,,,,,,,,,,44,,,,20,,,,,,',
',,,,,20,,,,,,,,,,,,,,44,,,,,,,,16,,,,,44,,,,,,,,,,,,,,,,,,,,44,,,20',
',,,,,16,,22,20,,,20,,,,44,,,,,,,,,,,,,,,22,,,,,,,,,44,,,,,,,,,,,24,',
',,,20,,,20,,22,,,20,20,24,,,,,,,,22,20,,,,20,20,,44,,,20,,,,,,,,,22',
',,,,,,20,,44,,,,,,,39,,16,22,22,44,,20,,,,39,,,,39,,,,39,,,,20,,,,22',
',,,,,,16,,20,39,,,,,,16,20,,,,20,39,16,39,39,,,,,,,39,,39,,,44,,,44',
',22,39,,,,39,,,,,,39,,,,,,,,,,22,,,,,,39,,,,,39,22,,,,,,,,,44,,,44,',
',,,44,,,,39,,39,,,,,44,,,,44,44,,,,,44,39,,,,,,,,,,,,24,,,44,,,39,,22',
',,22,,39,,,24,16,,44,,,39,,,,,,,,,,,,,44,,,,,16,,,,,,,,44,,,,,,24,22',
',,22,,44,,,22,,,,,,24,16,,,24,22,,,24,22,22,,,,16,22,,,,,,,,,,,,,,,',
'22,,,16,,,,,,,,,,,,,22,,,39,39,24,16,,,,,,39,,,,22,,,,,,,,,,,,,22,16',
',,,,,,,,,,22,,,39,,,,,,,,,39,,39,39,39,39,39,39,,,,,24,,,24,,,,16,,24',
'39,,24,,,,24,,,,,,,,,,39,39,16,39,39,,,,,,,,,,16,,,,,,,,,,,39,,,,,,',
',,,24,,,39,,,,24,,,,,,,39,,,,,24,,,,,,24,,,,,,,39,,,,,,16,,,16,,,,,',
'39,,,,,,,39,,,,,39,,,,,,,,,,,,,,39,,,,39,,,,,,,,16,,,16,,,,,16,24,,',
',,,24,,,,16,,,39,16,16,,,,,16,,,,,,39,,,,,,,,,,16,,,,24,,,,,,39,,,,',
',16,24,,,,,,,,,,,,39,24,,16,39,,,,,,,39,39,,,,16,,,,39,,,,,,,,16,,,24',
',,24,,,,,39,,,,,,,,,,,24,,,24,,,,,,,,,,,,39,39,,,,,,,,,,,,,,,,,,,,,39',
'24,,,,,,,24,,,24,39,,,,,,,,,,,,,,,,,,,,,,,,,,24,,,24,,,,,,,,,,,,,,,24',
',,,,,39,,24,,,,,,,39,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',39,,,,,,,,39,39,,,,,,,,,,39,,,,39,39,,,,,39,,,,,,,,,,,,,,,,39,,,,,',
',,,,,,,,,,39,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,39,,,,,,,,39,,,,39' ]
        racc_goto_check = arr = Array.new(2404, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   204,   365,   -37,   202,  -271,  -437,  -457,   nil,   -12,
    69,    33,   155,   -29,   163,   -20,  1261,   -40,    18,   319,
   727,   -63,   989,  -290,  1349,   110,   -79,   133,   -13,   -12,
   nil,    96,  -101,   -19,    22,   -89,  -336,  -289,  -608,  1540,
    -7,   -13,   nil,    77,   892,   -30,  -108,    55,   -25,   -16,
   nil,   -22,  -362,    17,    -3,    14,  -176,    24,    44,  -399,
    37,    87,  -302,   -28,   nil,  -308,  -440,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    35,   -11,    75,   nil,  -241,  -626,
  -502,  -333,    17,   -62,    14,  -427,    76,  -111,  -223,    27,
  -571,    27,  -570,  -264,  -662,  -308,  -300,  -606,   -45,   -85,
  -314,  -602,   nil,  -266,  -521,   nil,    28,  -428,    35,  -419,
  -379,  -669,  -299,  -490,   nil,   nil,   nil,   162,    87,    42,
   169,    53,   -95,   167,  -368,  -183,  -181,   nil,  -243,  -455,
   nil,  -558,  -666,  -577,  -421,  -552,  -711,   nil,   nil,   -30,
  -330 ]

racc_goto_default = [
   nil,   nil,   278,   nil,   nil,   nil,   772,   nil,    43,   nil,
    49,    58,   348,   nil,   nil,   nil,   146,    86,    90,   148,
   169,   nil,   135,   nil,   137,    35,   nil,   nil,    46,    50,
    55,   nil,    66,   569,   nil,   nil,   nil,   nil,   nil,   106,
    15,   nil,    25,    29,   138,    40,   164,   nil,   258,   382,
   235,    65,   nil,   nil,    79,   343,   nil,   345,   564,   565,
   420,   605,   nil,   nil,   125,   nil,   nil,   418,    57,    62,
    68,    71,    75,    80,    85,   nil,   126,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   506,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   316,   nil,   nil,   378,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    94,     5,    12,    20,   nil,   nil,
   nil,   nil,   369,   nil,   nil,   nil,   nil,   352,   nil,   642,
   646,   648,   631,   nil,   810,   633,   634,   635,   637,   nil,
   139 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  3, 172, :_reduce_68,
  2, 172, :_reduce_69,
  2, 172, :_reduce_70,
  2, 172, :_reduce_71,
  1, 172, :_reduce_72,
  1, 175, :_reduce_none,
  3, 175, :_reduce_74,
  2, 174, :_reduce_75,
  3, 174, :_reduce_76,
  1, 177, :_reduce_77,
  4, 177, :_reduce_78,
  3, 177, :_reduce_79,
  3, 177, :_reduce_80,
  3, 177, :_reduce_81,
  3, 177, :_reduce_82,
  2, 177, :_reduce_83,
  1, 177, :_reduce_84,
  1, 148, :_reduce_85,
  4, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  3, 148, :_reduce_89,
  3, 148, :_reduce_90,
  2, 148, :_reduce_91,
  1, 148, :_reduce_92,
  1, 178, :_reduce_93,
  1, 178, :_reduce_none,
  2, 179, :_reduce_95,
  1, 179, :_reduce_96,
  3, 179, :_reduce_97,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_101,
  1, 180, :_reduce_102,
  1, 145, :_reduce_103,
  1, 145, :_reduce_104,
  1, 146, :_reduce_105,
  0, 184, :_reduce_106,
  4, 146, :_reduce_107,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_175,
  5, 160, :_reduce_176,
  3, 160, :_reduce_177,
  6, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  5, 160, :_reduce_181,
  5, 160, :_reduce_182,
  4, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  3, 160, :_reduce_191,
  3, 160, :_reduce_192,
  4, 160, :_reduce_193,
  4, 160, :_reduce_194,
  2, 160, :_reduce_195,
  2, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  3, 160, :_reduce_208,
  3, 160, :_reduce_209,
  2, 160, :_reduce_210,
  2, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  3, 160, :_reduce_215,
  3, 160, :_reduce_216,
  5, 160, :_reduce_217,
  1, 160, :_reduce_none,
  1, 156, :_reduce_219,
  1, 153, :_reduce_none,
  2, 153, :_reduce_221,
  2, 153, :_reduce_222,
  5, 153, :_reduce_223,
  2, 153, :_reduce_224,
  3, 153, :_reduce_225,
  3, 190, :_reduce_226,
  4, 190, :_reduce_227,
  4, 190, :_reduce_228,
  6, 190, :_reduce_229,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 163, :_reduce_232,
  2, 163, :_reduce_233,
  5, 163, :_reduce_234,
  2, 163, :_reduce_235,
  5, 163, :_reduce_236,
  4, 163, :_reduce_237,
  7, 163, :_reduce_238,
  3, 163, :_reduce_239,
  1, 163, :_reduce_none,
  4, 194, :_reduce_241,
  3, 194, :_reduce_242,
  5, 194, :_reduce_243,
  7, 194, :_reduce_244,
  2, 194, :_reduce_245,
  5, 194, :_reduce_246,
  4, 194, :_reduce_247,
  6, 194, :_reduce_248,
  7, 194, :_reduce_249,
  9, 194, :_reduce_250,
  3, 194, :_reduce_251,
  1, 194, :_reduce_none,
  0, 196, :_reduce_253,
  2, 166, :_reduce_254,
  1, 195, :_reduce_none,
  0, 197, :_reduce_256,
  3, 195, :_reduce_257,
  0, 198, :_reduce_258,
  4, 195, :_reduce_259,
  2, 193, :_reduce_260,
  2, 192, :_reduce_261,
  1, 192, :_reduce_none,
  1, 187, :_reduce_263,
  3, 187, :_reduce_264,
  3, 155, :_reduce_265,
  4, 155, :_reduce_266,
  2, 155, :_reduce_267,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_276,
  3, 186, :_reduce_277,
  0, 220, :_reduce_278,
  5, 186, :_reduce_279,
  3, 186, :_reduce_280,
  3, 186, :_reduce_281,
  2, 186, :_reduce_282,
  4, 186, :_reduce_283,
  3, 186, :_reduce_284,
  3, 186, :_reduce_285,
  1, 186, :_reduce_286,
  4, 186, :_reduce_287,
  3, 186, :_reduce_288,
  1, 186, :_reduce_289,
  5, 186, :_reduce_290,
  2, 186, :_reduce_291,
  1, 186, :_reduce_none,
  2, 186, :_reduce_293,
  6, 186, :_reduce_294,
  6, 186, :_reduce_295,
  0, 221, :_reduce_296,
  0, 222, :_reduce_297,
  7, 186, :_reduce_298,
  0, 223, :_reduce_299,
  0, 224, :_reduce_300,
  7, 186, :_reduce_301,
  5, 186, :_reduce_302,
  4, 186, :_reduce_303,
  5, 186, :_reduce_304,
  0, 225, :_reduce_305,
  0, 226, :_reduce_306,
  9, 186, :_reduce_307,
  0, 227, :_reduce_308,
  6, 186, :_reduce_309,
  0, 228, :_reduce_310,
  0, 229, :_reduce_311,
  8, 186, :_reduce_312,
  0, 230, :_reduce_313,
  5, 186, :_reduce_314,
  0, 231, :_reduce_315,
  6, 186, :_reduce_316,
  0, 232, :_reduce_317,
  0, 233, :_reduce_318,
  9, 186, :_reduce_319,
  1, 186, :_reduce_320,
  1, 186, :_reduce_321,
  1, 186, :_reduce_322,
  1, 186, :_reduce_323,
  1, 152, :_reduce_324,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 211, :_reduce_none,
  5, 211, :_reduce_333,
  1, 138, :_reduce_none,
  2, 138, :_reduce_335,
  1, 214, :_reduce_none,
  1, 214, :_reduce_337,
  1, 168, :_reduce_none,
  2, 168, :_reduce_339,
  1, 168, :_reduce_340,
  3, 168, :_reduce_341,
  0, 235, :_reduce_342,
  0, 236, :_reduce_343,
  6, 234, :_reduce_344,
  2, 164, :_reduce_345,
  4, 164, :_reduce_346,
  4, 164, :_reduce_347,
  2, 209, :_reduce_348,
  4, 209, :_reduce_349,
  4, 209, :_reduce_350,
  3, 209, :_reduce_351,
  2, 209, :_reduce_352,
  1, 209, :_reduce_353,
  0, 238, :_reduce_354,
  0, 239, :_reduce_355,
  6, 208, :_reduce_356,
  0, 240, :_reduce_357,
  0, 241, :_reduce_358,
  6, 208, :_reduce_359,
  5, 213, :_reduce_360,
  1, 242, :_reduce_none,
  4, 242, :_reduce_362,
  2, 242, :_reduce_363,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  6, 137, :_reduce_366,
  0, 137, :_reduce_367,
  1, 244, :_reduce_368,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  2, 245, :_reduce_371,
  1, 245, :_reduce_none,
  2, 139, :_reduce_373,
  1, 139, :_reduce_none,
  1, 200, :_reduce_375,
  1, 200, :_reduce_376,
  1, 200, :_reduce_none,
  1, 201, :_reduce_378,
  1, 248, :_reduce_none,
  2, 248, :_reduce_380,
  3, 249, :_reduce_381,
  1, 249, :_reduce_382,
  3, 202, :_reduce_383,
  3, 203, :_reduce_384,
  3, 204, :_reduce_385,
  3, 204, :_reduce_386,
  1, 252, :_reduce_387,
  3, 252, :_reduce_388,
  1, 253, :_reduce_none,
  2, 253, :_reduce_390,
  3, 205, :_reduce_391,
  3, 205, :_reduce_392,
  1, 255, :_reduce_393,
  3, 255, :_reduce_394,
  1, 250, :_reduce_395,
  2, 250, :_reduce_396,
  1, 251, :_reduce_397,
  2, 251, :_reduce_398,
  1, 254, :_reduce_399,
  0, 257, :_reduce_400,
  3, 254, :_reduce_401,
  0, 258, :_reduce_402,
  4, 254, :_reduce_403,
  1, 256, :_reduce_404,
  1, 256, :_reduce_405,
  1, 256, :_reduce_406,
  1, 256, :_reduce_none,
  2, 183, :_reduce_408,
  1, 183, :_reduce_409,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  3, 247, :_reduce_414,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  2, 246, :_reduce_417,
  2, 246, :_reduce_418,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_424,
  1, 176, :_reduce_425,
  1, 176, :_reduce_426,
  1, 176, :_reduce_427,
  1, 176, :_reduce_428,
  1, 176, :_reduce_429,
  1, 206, :_reduce_430,
  1, 151, :_reduce_431,
  1, 154, :_reduce_432,
  1, 154, :_reduce_433,
  1, 215, :_reduce_434,
  0, 260, :_reduce_435,
  4, 215, :_reduce_436,
  2, 215, :_reduce_437,
  4, 217, :_reduce_438,
  2, 217, :_reduce_439,
  6, 261, :_reduce_440,
  4, 261, :_reduce_441,
  4, 261, :_reduce_442,
  2, 261, :_reduce_443,
  4, 261, :_reduce_444,
  2, 261, :_reduce_445,
  2, 261, :_reduce_446,
  1, 261, :_reduce_447,
  0, 261, :_reduce_448,
  1, 267, :_reduce_449,
  1, 267, :_reduce_450,
  1, 267, :_reduce_451,
  1, 267, :_reduce_452,
  1, 262, :_reduce_453,
  3, 262, :_reduce_454,
  3, 268, :_reduce_455,
  1, 263, :_reduce_456,
  3, 263, :_reduce_457,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  2, 264, :_reduce_460,
  1, 264, :_reduce_461,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  2, 266, :_reduce_464,
  2, 265, :_reduce_465,
  0, 265, :_reduce_466,
  1, 218, :_reduce_none,
  0, 271, :_reduce_468,
  5, 218, :_reduce_469,
  1, 207, :_reduce_470,
  2, 207, :_reduce_471,
  2, 207, :_reduce_472,
  1, 189, :_reduce_none,
  3, 189, :_reduce_474,
  3, 272, :_reduce_475,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 216, :_reduce_495,
  1, 216, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_498,
  0, 142, :_reduce_499,
  0, 199, :_reduce_500 ]

Parser::Racc_reduce_n = 501

Parser::Racc_shift_n = 902

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :t_STRING => 120,
  :tSYMBOL => 121,
  :tNL => 122,
  :tEH => 123,
  :tCOLON => 124,
  :tCOMMA => 125,
  :tSPACE => 126,
  :tSEMI => 127,
  :tLBRACK_STR => 128,
  :tLAST_TOKEN => 129,
  :tEQL => 130,
  :tLOWEST => 131 }

Parser::Racc_nt_base = 132

Racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  Parser::Racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  Parser::Racc_shift_n,
  Parser::Racc_reduce_n,
  Racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "t_STRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLBRACK_STR",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "comp_stamt",
  "body_stamt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "sttmts",
  "opt_termms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mLhs",
  "varLhs",
  "primary_value",
  "aref__args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "variable",
  "mlhs_node",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_blck",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "blck_var",
  "superclass",
  "Term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "do_block",
  "@24",
  "@25",
  "operation3",
  "@26",
  "@27",
  "@28",
  "@29",
  "when_args",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@30",
  "@31",
  "sym",
  "@32",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_blck_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@33",
  "assoc" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, vofs)
		      # "program: "  
                      @lexer.lex_state=( Expr_beg )
                      result = val[vofs]
                    
    result
end

def _reduce_2(val, vofs)
		      # "program: comp_stamt" 
                      result = val[vofs+ 1]
                    
    result
end

def _reduce_3(val, vofs)
		      # "body_stamt: comp_stamt " 
                      result = new_body( val, vofs)
                    
    result
end

def _reduce_4(val, vofs)
                      # "comp_stamt: sttmts opt_termms" 
                      result = new_compstamt(val[vofs])
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, vofs)
		      # "sttmts: | sttmts terms stmt " 
                      result = self.block_append( val[vofs], val[vofs + 2])
                    
    result
end

def _reduce_8(val, vofs)
		      # "sttmts: | error stmt" 
                      result = val[vofs + 1]
                    
    result
end

def _reduce_9(val, vofs)
		      # "stmt: kALIAS fitem" 
                      lx = @lexer
                      lx.lex_state=( Expr_fname )
                      result = -901 # lx.lineno_
                    
    result
end

def _reduce_10(val, vofs)
		      # "stmt: fitem" 
                      result = RubyAliasNode.s(val[vofs + 1], val[vofs + 3])
                      result.src_offset=( val[vofs].src_offset ) # of kALIAS RpNameToken
                    
    result
end

def _reduce_11(val, vofs)
		      # "stmt: | kALIAS tGVAR tGVAR" 
                      result = RubyGlobalVarAliasNode.s( val[vofs + 1].symval, val[vofs + 2].symval) # s(:valias)
                    
    result
end

def _reduce_12(val, vofs)
		      # "stmt: | kALIAS tGVAR tBACK_REF" 
                      result = RubyGlobalVarAliasNode.s( val[vofs + 1].symval, :"$#{val[vofs + 2]}" )  # s(:valias)
                    
    result
end

def _reduce_13(val, vofs)
		      # "stmt: | kALIAS tGVAR tNTH_REF" 
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, vofs)
		      # "stmt: | kUNDEF undef_list" 
                      result = val[vofs + 1]
                    
    result
end

def _reduce_15(val, vofs)
		      # "stmt: | stmt kIF_MOD expr_value" 
                      result = new_if(val[vofs + 2], val[vofs ], nil ) 
                      result.src_offset=( val[vofs + 1].src_offset )
                    
    result
end

def _reduce_16(val, vofs)
		      # "stmt: | stmt kUNLESS_MOD expr_value" 
                      result = new_if( val[vofs + 2], nil, val[vofs])
                      result.src_offset=( val[vofs + 1].src_offset )
                    
    result
end

def _reduce_17(val, vofs)
		      # "stmt: | stmt kWHILE_MOD expr_value"   
                      # val_[1] is kWHILE_MOD RpNameToken
                      result = new_while( val[vofs ], val[vofs + 2] )
                      result.src_offset=( val[vofs + 1].src_offset) # kWHILE_MOD  RpNameToken
                    
    result
end

def _reduce_18(val, vofs)
		      # "stmt: | stmt kUNTIL_MOD expr_value" 
                      # val_[1] is kUNTIL_MOD RpNameToken
                      result = new_until( val[vofs ], val[vofs + 2] )
                      result.src_offset=( val[vofs + 1].src_offset )
                    
    result
end

def _reduce_19(val, vofs)
		      # "stmt: | stmt kRESCUE_MOD stmt" 
                      # result = s(:rescue, val_[0], s(:resbody, s(:array), val_[2]))
                      resbody = RubyRescueBodyNode.s(nil, val[vofs + 2])
                      result = RubyRescueNode.s( val[vofs ], resbody, nil)
                      ofs = val[vofs + 1].src_offset  # kRESCUE position
                      result.src_offset=( ofs )
                      resbody.src_offset=( ofs )
                    
    result
end

def _reduce_20(val, vofs)
		      # "stmt: | klBEGIN" 
                      if (@in_def || @in_single > 0) then
                        raise SyntaxError , "BEGIN in method" 
                      end
                      @env.extend( false, nil)
                      result = val[vofs]
                    
    result
end

def _reduce_21(val, vofs)
		      # "stmt: ___ tLCURLY comp_stamt tRCURLY" 
                      # result = new_iter s(:preexe), nil, val[vofs + 3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_22(val, vofs)
		      # "stmt: | klEND tLCURLY comp_stamt tRCURLY" 
                      if (@in_def || @in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      # result = new_iter s(:postexe), nil, val_[2]
                      result = new_iter(nil, val[vofs + 2])
                    
    result
end

def _reduce_23(val, vofs)
		      # "stmt: | lhs tEQL command_call" 
                      result = self.node_assign(val[vofs ], val[vofs + 2])
                    
    result
end

def _reduce_24(val, vofs)
		      # "stmt: | mLhs tEQL command_call" 
                      result = masgn_append_arg( val[vofs ], val[vofs + 2] ) 
                    
    result
end

def _reduce_25(val, vofs)
		      # "stmt: | varLhs tOP_ASGN command_call" 
                      result = new_op_asgn(val, vofs)
                    
    result
end

def _reduce_26(val, vofs)
		      # "stmt: | primary_value tLBRACK_STR aref__args tRBRACK tOP_ASGN command_call" 
                      result = RubyOpElementAsgnNode.s(val[vofs ], val[vofs + 2], val[vofs + 4], val[vofs + 5]) # s(:op_asgn1 )
                    
    result
end

def _reduce_27(val, vofs)
		      # "stmt: | primary_value tDOT tIDENTIFIER tOP_ASGN command_call" 
                      internal_error(":op_asgn never seen from MRI parser ")
                      # result = s(:op_asgn, val_[0], val_[4], val_[2], val_[3])
                      result = nil
                    
    result
end

def _reduce_28(val, vofs)
		      # "stmt: | primary_value tDOT tCONSTANT tOP_ASGN command_call" 
                      internal_error(":op_asgn never seen from MRI parser ")
		      # result = s(:op_asgn, val_[0], val_[4], val_[2], val_[3])
		      result = nil
		    
    result
end

def _reduce_29(val, vofs)
		        # "stmt: | primary_value tCOLON2 tIDENTIFIER tOP_ASGN command_call" 
                        internal_error(":op_asgn never seen from MRI parser ")
			# result = s(:op_asgn, val_[0], val_[4], val_[2], val_[3])
                        result = nil
		      
    result
end

def _reduce_30(val, vofs)
			# "stmt: | backref tOP_ASGN command_call" 
                        v_zero = val[vofs ] 
			self.backref_assign_error( v_zero )
                        result = v_zero 
		      
    result
end

def _reduce_31(val, vofs)
			# "stmt: | lhs tEQL mrhs" 
			result = self.node_assign(val[vofs ], RubySValueNode.s( val[vofs + 2]))
		      
    result
end

def _reduce_32(val, vofs)
			# "stmt: | mLhs tEQL arg_value" 
			result =  masgn_append_arg(val[vofs ], val[vofs + 2] )
		      
    result
end

def _reduce_33(val, vofs)
			# "stmt: | mLhs tEQL mrhs" 
			result = masgn_append_mrhs( val[vofs ], val[vofs + 2] )
		      
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, vofs)
			# "expr: | expr kAND expr" 
			result = logop( RubyAndNode,  val[vofs ], val[vofs + 2])  # s(:and )
		      
    result
end

def _reduce_37(val, vofs)
			# "expr: | expr kOR expr" 
			result = logop( RubyOrNode, val[vofs ], val[vofs + 2]) # s(:or )
		      
    result
end

def _reduce_38(val, vofs)
			# "expr: | kNOT expr" 
			result = RubyNotNode.s( val[vofs + 1]) # s(:not )
		      
    result
end

def _reduce_39(val, vofs)
			# "expr: | tBANG command_call" 
			result = RubyNotNode.s( val[vofs + 1]) # s(:not )
		      
    result
end

# reduce 40 omitted

def _reduce_41(val, vofs)
			# "expr_value: expr" 
			result = value_expr(val[vofs ])
		      
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, vofs)
			# "command_call: kRETURN call_args" 
                        result = RubyReturnNode.s( ret_args(val[vofs + 1]))
			result.src_offset=( val[vofs ].src_offset ) # of the kRETURN
		      
    result
end

def _reduce_45(val, vofs)
			# "command_call: | kBREAK call_args" 
			# result = s(:break, ret_args(val_[1]))
                        result = RubyBreakNode.s( ret_args(val[vofs + 1]))
                        result.src_offset=( val[vofs ].src_offset ) #  of the kBREAK
		      
    result
end

def _reduce_46(val, vofs)
			# "command_call: | kNEXT call_args" 
			# result = s(:next, ret_args(val_[1]))
                        result = RubyNextNode.s( ret_args(val[vofs + 1]))
                        result.src_offset=( val[vofs ].src_offset ) #  of the kNEXT
		      
    result
end

# reduce 47 omitted

def _reduce_48(val, vofs)
			# "block_command: | block_call tDOT operation2 command_args" 
			result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
		      
    result
end

def _reduce_49(val, vofs)
			# "block_command: | block_call tCOLON2 operation2 command_args" 
			result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
		      
    result
end

def _reduce_50(val, vofs)
			# "cmd_brace_block: tLBRACE_ARG" 
			@env.extend( true , nil) # (:dynamic)
                        @env.in_block_params=(true)
			result = -902 #  @lexer.lineno_
		      
    result
end

def _reduce_51(val, vofs)
			# "cmd_brace_block: ___ opt_block_var" 
                        @env.in_block_params=(false)
			result = @env.dynamic_keys
		      
    result
end

def _reduce_52(val, vofs)
			# "cmd_brace_block: ___ comp_stamt tRCURLY" 
			result = new_iter(val[vofs + 2], val[vofs + 4])
                      @env.unextend
                    
    result
end

def _reduce_53(val, vofs)
		      # "command: operation command_args =tLOWEST" 
                      result = new_fcall( val[vofs ], val[vofs + 1])
                    
    result
end

def _reduce_54(val, vofs)
		      # "command: | operation command_args cmd_brace_block" 
                      result = new_fcall( val[vofs ], val[vofs + 1])
                      v_two = val[vofs + 2]
                      if v_two then
                        if v_two.class._equal?(RubyBlockPassNode) # v_two[0] == :block_pass 
                          raise "both block arg and actual block given"
                        end
                        # result, operation = val_[2], result
                        # result.insert 1, operation
                        iter = v_two
                        call = result
                        iter.call=(call)
                        result = iter
                      end
                    
    result
end

def _reduce_55(val, vofs)
		      # "command: | primary_value tDOT operation2 command_args =tLOWEST" 
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_56(val, vofs)
		      # "command: | primary_value tDOT operation2 command_args cmd_brace_block" 
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_57(val, vofs)
		      # "command: | primary_value tCOLON2 operation2 command_args =tLOWEST" 
                      result = new_call(val[vofs], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_58(val, vofs)
		      # "command: | primary_value tCOLON2 operation2 command_args cmd_brace_block" 
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                      if val[vofs + 4] then
                        #if result[0] == :block_pass then # REFACTOR
                        if result.rcvr.class._equal?(RubyBlockPassNode) 
                          raise "both block arg and actual block given"
                        end
                        internal_error("dont know how to append to selector") 
                        val[vofs + 2] << result
                        result = val[vofs + 2]
                      end
                    
    result
end

def _reduce_59(val, vofs)
		      # "command: | kSUPER command_args" 
                      result = new_super( val, vofs )
                    
    result
end

def _reduce_60(val, vofs)
		      # "command: | kYIELD command_args" 
                      result = new_yield( val[vofs + 1] )
                      result.src_offset=( val[vofs ].src_offset ) # of the kYIELD
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, vofs)
		      # "mLhs: | tLPAREN mlhs_entry tRPAREN" 
                      result = val[vofs + 1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, vofs)
		      # "mlhs_entry: | tLPAREN mlhs_entry tRPAREN" 
                      # result = s(:masgn, s(:array, val_[1]))
                      ofs = val[vofs ].src_offset  #  of the tLPAREN
                      result = new_parasgn( RubyArrayNode.s(val[vofs + 1]) , ofs )
                    
    result
end

def _reduce_65(val, vofs)
		      # "mlhs_basic: mlhs_head " 
                      # result = s(:masgn, val_[0])
                      v_zero = val[vofs ]
                      result = new_parasgn( v_zero , v_zero.src_offset )
                    
    result
end

def _reduce_66(val, vofs)
		      # "mlhs_basic: | mlhs_head mlhs_item" 
                      # result = s(:masgn, val_[0] << val_[1].compact)
                      v_zero = val[vofs ]  # a RubyArrayNode
                      v_one = val[vofs + 1]
                      unless v_zero.append_for_mlhs( v_one )
                        yyerror("unexpected additional args after &<anArg> in block param list")
                      end
                      ofs = v_one.src_offset 
                      result = new_parasgn( v_zero, ofs )
                    
    result
end

def _reduce_67(val, vofs)
                      # "mlhs_basic: | mlhs_head tAMPER variable" 
                      unless @env.in_block_params
                        yyerror("unexpected & in parallel assignment, not on last param to a block")
                      end
                      v_zero = val[vofs ]
                      v_two = val[vofs + 2]
                      ofs = v_two.src_offset
                      lv = self.assignable(v_two, nil)
                      lv.setAmpersandBlockParam
                      unless v_zero.append_for_mlhs( lv )
                        yyerror("unexpected additional args after &<anArg> in block param list")
                      end
                      result = new_parasgn( v_zero, ofs )
                    
    result
end

def _reduce_68(val, vofs)
		      # "mlhs_basic: | mlhs_head tSTAR mlhs_node" 
                      # result = s(:masgn, val_[0] << s(:splat, val_[2])) 
                      v_zero = val[vofs ]  # a RubyArrayNode
                      ofs = val[vofs + 1].src_offset # of the tSTAR
                      unless v_zero.append_for_mlhs(  RubySplatNode.s(val[vofs + 2] ))
                        yyerror("unexpected additional args after &<anArg> in block param list")
                      end
                      result = new_parasgn( v_zero , ofs )
                    
    result
end

def _reduce_69(val, vofs)
		      # "mlhs_basic: | mlhs_head tSTAR" 
                      # result = s(:masgn, val_[0] << s(:splat))
                      v_zero = val[vofs ]  
                      unless v_zero.append_for_mlhs(  RubySplatNode.s( nil ))
                        yyerror("unexpected additional args after &<anArg> in block param list")
                      end
                      ofs = val[vofs + 1].src_offset  #  of the tSTAR
                      result = new_parasgn( v_zero, ofs )
                    
    result
end

def _reduce_70(val, vofs)
		      # "mlhs_basic: | tSTAR mlhs_node" 
                      # result = s(:masgn, s(:array, s(:splat, val_[1])))
                      ofs = val[vofs ].src_offset  #  of the tSTAR
             result = new_parasgn( RubyArrayNode.s( RubySplatNode.s( val[vofs + 1])), ofs )
                    
    result
end

def _reduce_71(val, vofs)
                      # "mlhs_basic: | tAMPER variable" 
                      unless @env.in_block_params
                        yyerror("unexpected & in parallel assignment, not on last param to a block")
                      end
                      v_one = val[vofs + 1]
                      lv = self.assignable(v_one, nil)
                      lv.setAmpersandBlockParam
                      result = new_parasgn( RubyArrayNode.s( lv), nil)
                    
    result
end

def _reduce_72(val, vofs)
		      # "mlhs_basic: | tSTAR" 
                      # result = s(:masgn, s(:array, s(:splat)))
                      ofs = val[vofs ].src_offset  #  of the tSTAR
                result = new_parasgn( RubyArrayNode.s( RubySplatNode.s(nil)), ofs )
                    
    result
end

# reduce 73 omitted

def _reduce_74(val, vofs)
		      # "mlhs_item: tLPAREN mlhs_entry tRPAREN" 
                      result = val[vofs + 1] 
                    
    result
end

def _reduce_75(val, vofs)
		      # "mlhs_head: mlhs_item tCOMMA" 
                      # result = s(:array, val_[0]) # mlhs_head: mlhs_item tCOMMA
                      result = RubyArrayNode.s( val[vofs ])
                    
    result
end

def _reduce_76(val, vofs)
		      # "mlhs_head: | mlhs_head mlhs_item tCOMMA" 
                      # result = val_[0] << val_[1].compact
                      v_zero = val[vofs ]
                      unless v_zero.append_for_mlhs( val[vofs + 1] )
                        yyerror("unexpected additional args after &<anArg> in block param list")
                      end
                      result = v_zero
                    
    result
end

def _reduce_77(val, vofs)
		      # "mlhs_node: variable" 
                      result = self.assignable(val[vofs ], nil)
                    
    result
end

def _reduce_78(val, vofs)
		      # "mlhs_node: | primary_value tLBRACK_STR aref__args tRBRACK" 
                      result = RubyAttrAssignNode.s(val[vofs ], :"[]=", val[vofs + 2] )
                      result.src_offset=( val[vofs + 3].src_offset )  # position of tRBRACK
                    
    result
end

def _reduce_79(val, vofs)
		      # "mlhs_node: | primary_value tDOT tIDENTIFIER" 
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=", s(:arglist))
                      # the  tIDENTIFIER value will be a RpNameToken
                      #  all places where we send   symval   we expect a  RpNameToken
                     result = RubyAttrAssignNode.s_tk(val[vofs ], val[vofs + 2], nil )
                    
    result
end

def _reduce_80(val, vofs)
		      # "mlhs_node: | primary_value tCOLON2 tIDENTIFIER" 
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=", s(:arglist))
                      # the  tIDENTIFIER value will be a RpNameToken
                      result = RubyAttrAssignNode.s_tk( val[vofs ], val[vofs + 2], nil )
                    
    result
end

def _reduce_81(val, vofs)
		      # "mlhs_node: | primary_value tDOT tCONSTANT" 
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=", s(:arglist))
                      result = RubyAttrAssignNode.s_tk( val[vofs ], val[vofs + 2], nil)
                    
    result
end

def _reduce_82(val, vofs)
		      # "mlhs_node: | primary_value tCOLON2 tCONSTANT" 
                      if (@in_def || @in_single > 0) then
                        raise SyntaxError,  "dynamic constant assignment"
                      end
                    # all RubyColon2Node.s  expect second arg to be a RpNameToken
                    #  result = s(:const, s(:colon2, val_[0], val_[2].to_sym), nil)
             nam = val[vofs + 2]
             result = RubyConstDeclNode.s( RubyColon2Node.s( val[vofs ], nam ), nil)
             result.src_offset=( nam.src_offset )
                    
    result
end

def _reduce_83(val, vofs)
		      # "mlhs_node: | tCOLON3 tCONSTANT" 
                      if (@in_def || @in_single > 0) then
                        raise SyntaxError,  "dynamic constant assignment"
                      end
                      # all RubyColon3Node.s  expects arg to be a RpNameToken
                      # result = s(:const, nil, s(:colon3, val_[1].to_sym))
                   nam = val[vofs + 1]
                   result = RubyConstDeclNode.s( RubyColon3Node.s( nam ), nil )
                   result.src_offset=( nam.src_offset )
                    
    result
end

def _reduce_84(val, vofs)
		      # "mlhs_node: | backref" 
                      self.backref_assign_error( val[vofs ] ) 
                      result = val[vofs]
                    
    result
end

def _reduce_85(val, vofs)
		      # "lhs: variable" 
                      result = self.assignable(val[vofs ], nil)
                    
    result
end

def _reduce_86(val, vofs)
		      # "lhs: | primary_value tLBRACK_STR aref__args tRBRACK" 
                      result = RubyAttrAssignNode.s(val[vofs ], :"[]=", val[vofs + 2] )
                      result.src_offset=( val[vofs + 3].src_offset )  # position of tRBRACK
                    
    result
end

def _reduce_87(val, vofs)
		      # "lhs: | primary_value tDOT tIDENTIFIER" 
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=")
                      # the  tIDENTIFIER value will be a RpNameToken
                      result = RubyAttrAssignNode.s_tk(val[vofs ], val[vofs + 2], nil)
                    
    result
end

def _reduce_88(val, vofs)
		      # "lhs: | primary_value tCOLON2 tIDENTIFIER" 
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=")
                      # the  tIDENTIFIER value will be a RpNameToken
		      result = RubyAttrAssignNode.s_tk(val[vofs ], val[vofs + 2], nil)
                    
    result
end

def _reduce_89(val, vofs)
		      # "lhs: | primary_value tDOT tCONSTANT" 
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=")
                      result = RubyAttrAssignNode.s_tk( val[vofs ], val[vofs + 2], nil)
                    
    result
end

def _reduce_90(val, vofs)
		      # "lhs: | primary_value tCOLON2 tCONSTANT" 
                      if (@in_def || @in_single > 0) then
                        raise SyntaxError,  "dynamic constant assignment"
                      end
                      # result = s(:const, s(:colon2, val_[0], val_[2].to_sym))
                      nam = val[vofs + 2] 
                      result = RubyConstDeclNode.s( RubyColon2Node.s( val[vofs ], nam ), nil)
                      result.src_offset=( nam.src_offset )
                    
    result
end

def _reduce_91(val, vofs)
		      # "lhs: | tCOLON3 tCONSTANT" 
                      if (@in_def || @in_single > 0) then
                        raise SyntaxError,  "dynamic constant assignment"
                      end

                      # result = s(:const, s(:colon3, val_[1].to_sym))
                      nam = val[vofs + 1]
                      result = RubyConstDeclNode.s( RubyColon3Node.s( nam ), nil )
                      result.src_offset=( nam.src_offset )
                    
    result
end

def _reduce_92(val, vofs)
		      # "lhs: | backref" 
                      self.backref_assign_error( val[vofs ] ) 
                      result = val[vofs]
                    
    result
end

def _reduce_93(val, vofs)
		      # "cname: tIDENTIFIER" 
                      yyerror( "class/module name must be CONSTANT")
                      result = val[vofs]
                    
    result
end

# reduce 94 omitted

def _reduce_95(val, vofs)
		      # "cpath: tCOLON3 cname" 
                      # result = s(:colon3, val_[1].to_sym)
                      result = RubyColon3Node.s( val[vofs + 1] )
                    
    result
end

def _reduce_96(val, vofs)
		      # "cpath: | cname" 
                      result = val[vofs]  # a RpNameToken
                    
    result
end

def _reduce_97(val, vofs)
		      # "cpath: | primary_value tCOLON2 cname" 
                      # result = s(:colon2, val_[0], val_[2].to_sym)
                      result =  RubyColon2Node.s( val[vofs ], val[vofs + 2] )
                    
    result
end

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

def _reduce_101(val, vofs)
		      # "fname: tIDENTIFIER | tCONSTANT | tFID | op" 
                      @lexer.lex_state=( Expr_end )
                      result = val[vofs ]   # val_[0] is a RpNameToken
                    
    result
end

def _reduce_102(val, vofs)
		      # "fname: | reswords" 
                      @lexer.lex_state=( Expr_end )
                      result = val[vofs ]  # val_[0] is a RpNameToken or a String
                    
    result
end

def _reduce_103(val, vofs)
		      # "fitem: fname" 
                      v_zero = val[vofs ]  # a RpNameToken
		      result = RubySymbolNode.s( v_zero.symval)  # s(:lit)
                      result.src_offset=( v_zero.src_offset )
                      # fitem - fname path
                    
    result
end

def _reduce_104(val, vofs)
		       # "fitem: | symbol" 
		       result = RubySymbolNode.s( val[vofs ])  # s(:lit)
			# fitem - symbol path 
                    
    result
end

def _reduce_105(val, vofs)
		      # "undef_list: fitem" 
                      vsym = val[vofs ]   # a RubySymbolNode
                      result = new_undef( vsym )
                      result.src_offset=( val[ vofs - 1 ].src_offset ) # of the kUNDEF
                    
    result
end

def _reduce_106(val, vofs)
		      # "undef_list: | undef_list tCOMMA" 
                      @lexer.lex_state=( Expr_fname )
		      result = val[vofs]  # missing from Ryan's 2.0.2 code
                    
    result
end

def _reduce_107(val, vofs)
		      # "undef_list: ___ fitem" 
                      result = append_undef( val[vofs ], val[vofs + 3] )
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

def _reduce_175(val, vofs)
		      # "arg: lhs tEQL arg" 
                      result = self.node_assign(val[vofs ], val[vofs + 2])
                    
    result
end

def _reduce_176(val, vofs)
		      # "arg: | lhs tEQL arg kRESCUE_MOD arg" 
         # result = self.node_assign(val_[0], s(:rescue, val_[2], s(:resbody, s(:array), val_[4])) )
                      resbody = RubyRescueBodyNode.s(nil, val[vofs + 4])
                      resbody.src_offset=( val[vofs + 3].src_offset )   # kRESCUE_MOD position
                      rescue_nod = RubyRescueNode.s( val[vofs + 2], resbody, nil)
                      rescue_nod.src_offset=( val[vofs + 1].src_offset )   # tEQL position
                      result = self.node_assign(val[vofs ], rescue_nod )        # Fix trac 545
                    
    result
end

def _reduce_177(val, vofs)
		      # "arg: | varLhs tOP_ASGN arg" 
                      result = new_op_asgn( val, vofs )
                    
    result
end

def _reduce_178(val, vofs)
		      # "arg: | primary_value tLBRACK_STR aref__args tRBRACK tOP_ASGN arg" 
                      v_two = val[vofs + 2]
                      unless v_two.class._equal?(RubyRpCallArgs)
                        internal_error('aref__args is not a RubyRpCallArgs')
                      end
                      result = RubyOpElementAsgnNode.s(val[vofs ], v_two, val[vofs + 4], val[vofs + 5])
                    
    result
end

def _reduce_179(val, vofs)
		      # "arg: | primary_value tDOT tIDENTIFIER tOP_ASGN arg" 
                      # result = s(:op_asgn2, val_[0], :"#{val_[2]}=", val_[3].to_sym, val_[4])
                      # val_[2], val_[3] are RpNameToken
                     result = RubyOpAsgnNode.s(val[vofs ], val[vofs + 2], val[vofs + 3], val[vofs + 4])
                    
    result
end

def _reduce_180(val, vofs)
		     # "arg: | primary_value tDOT tCONSTANT tOP_ASGN arg" 
                     # result = s(:op_asgn2, val_[0], :"#{val_[2]}=", val_[3].to_sym, val_[4])
                     # val_[2], val_[3] are RpNameToken
	             result = RubyOpAsgnNode.s(val[vofs ], val[vofs + 2], val[vofs + 3], val[vofs + 4])
                    
    result
end

def _reduce_181(val, vofs)
		      # "arg: | primary_value tCOLON2 tIDENTIFIER tOP_ASGN arg" 
                      internal_error(":op_asgn never seen from MRI parser ")
                      # result = s(:op_asgn, val_[0], val_[4], val_[2], val_[3])
                      result = nil
                    
    result
end

def _reduce_182(val, vofs)
		      # "arg: | primary_value tCOLON2 tCONSTANT tOP_ASGN ar" 
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_183(val, vofs)
		      # "arg: | tCOLON3 tCONSTANT tOP_ASGN arg" 
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_184(val, vofs)
		      # "arg: | backref tOP_ASGN arg" 
                      self.backref_assign_error( val[vofs ])  
                      result = val[vofs]
                    
    result
end

def _reduce_185(val, vofs)
		      # "arg: | arg tDOT2 arg" 
                      v1 = val[vofs ]
                      v2 = val[vofs + 2]
                      result = RubyDotNode.s(:dot2, v1, v2)
		      result.src_offset=( val[vofs + 1 ].src_offset ) # of the DOT2
                    
    result
end

def _reduce_186(val, vofs)
		      # "arg: | arg tDOT3 arg" 
                      v1 = val[vofs ]
                      v2 = val[vofs + 2]
                      result = RubyDotNode.s(:dot3, v1, v2)
		      result.src_offset=( val[vofs + 1 ].src_offset ) # of the DOT3
                    
    result
end

def _reduce_187(val, vofs)
		      # "arg: | arg tPLUS arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2]  ) 
                    
    result
end

def _reduce_188(val, vofs)
		      # "arg: | arg tMINUS arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2]  )
                    
    result
end

def _reduce_189(val, vofs)
		      # "arg: | arg tSTAR2 arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2]  )
                    
    result
end

def _reduce_190(val, vofs)
		      # "arg: | arg tDIVIDE arg" 
                      result = new_call_1( val[vofs ], val[vofs + 1], val[vofs + 2] )  # tDIVIDE_a
                    
    result
end

def _reduce_191(val, vofs)
		      # "arg: | arg tPERCENT arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1] , val[vofs + 2] )  # tPERCENT_a
                    
    result
end

def _reduce_192(val, vofs)
		      # "arg: | arg tPOW arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] ) # tPOW_a
                    
    result
end

def _reduce_193(val, vofs)
		      # "arg: | tUMINUS_NUM tINTEGER tPOW arg" 
                      lit_one =  RubyAbstractNumberNode.s( val[vofs + 1])  # s(:lit )
                      pow_sel = val[vofs + 2]
                      minus_sel = RpNameToken.new( :"-@" , pow_sel.src_offset )
                      result = new_vcall( new_call_1( lit_one, pow_sel, val[vofs + 3] ), minus_sel )
                    
    result
end

def _reduce_194(val, vofs)
		      # "arg: | tUMINUS_NUM tFLOAT tPOW arg" 
                      lit_one = RubyAbstractNumberNode.s( val[vofs + 1])  # s(:lit )
                      pow_sel = val[vofs + 2]
                      minus_sel = RpNameToken.new( :"-@" , pow_sel.src_offset )
                      result = new_vcall(new_call_1( lit_one, pow_sel, val[vofs + 3] ), minus_sel )
                    
    result
end

def _reduce_195(val, vofs)
		      # "arg: | tUPLUS arg" 
                      v_one = val[vofs + 1]
                      if v_one._kind_of?(RubyAbstractLiteralNode) # val_[1][0] == :lit 
                        result = v_one
                      else
                        sel_tok = RpNameToken.new( :"+@" , val[vofs ].src_offset )
                        result = new_vcall( v_one, sel_tok )
                      end
                    
    result
end

def _reduce_196(val, vofs)
		      # "arg: | tUMINUS arg" 
                      sel_tok = RpNameToken.new( :"-@" , val[vofs ].src_offset )
                      result = new_vcall( val[vofs + 1], sel_tok )
                    
    result
end

def _reduce_197(val, vofs)
		      # "arg: | arg tPIPE arg" 
                      result = new_call_1( val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_198(val, vofs)
		      # "arg: | arg tCARET arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_199(val, vofs)
		      # "arg: | arg tAMPER2 arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_200(val, vofs)
		      # "arg: | arg tCMP arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_201(val, vofs)
		      # "arg: | arg tGT arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_202(val, vofs)
		      # "arg: | arg tGEQ arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_203(val, vofs)
		      # "arg: | arg tLT arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_204(val, vofs)
		      # "arg: | arg tLEQ arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_205(val, vofs)
		      # "arg: | arg tEQ arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_206(val, vofs)
		      # "arg: | arg tEQQ arg" 
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_207(val, vofs)
		      # "arg: | arg tNEQ arg" 
					# TODOryan: port call_op and clean these
                      v_zero = value_expr(val[vofs ] ) 
                      v_two = value_expr( val[vofs + 2])
                      sel_tok = RpNameToken.new( :"==" , val[vofs + 1].src_offset ) 
                      result = RubyNotNode.s( new_call_1(v_zero, sel_tok,  v_two ) ) # s(:not )
                    
    result
end

def _reduce_208(val, vofs)
		      # "arg: | arg tMATCH arg" 
                      result = self.get_match_node( val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_209(val, vofs)
		      # "arg: | arg tNMATCH arg" 
                      result = RubyNotNode.s( self.get_match_node(val[vofs ], val[vofs + 1], val[vofs + 2])) # s(:not )
                    
    result
end

def _reduce_210(val, vofs)
		      # "arg: | tBANG arg" 
                      result = RubyNotNode.s( val[vofs + 1]) # s(:not )
                    
    result
end

def _reduce_211(val, vofs)
		      # "arg: | tTILDE arg" 
                      # val_[0] already a NameToken
                      # val_[2] = value_expr( val[2]) # TODO ask ryan , why ??
                      # result = new_call val_[1], :"~", s(:arglist)
                      v_one = value_expr( val[vofs + 1] )
                      result = new_vcall( v_one, val[vofs ] )
                    
    result
end

def _reduce_212(val, vofs)
		      # "arg: | arg tLSHFT arg" 
                      v_zero = value_expr( val[vofs ])
	              v_two = value_expr( val[vofs + 2])
                      result = new_call_1(v_zero, val[vofs + 1],  v_two  )
                    
    result
end

def _reduce_213(val, vofs)
		      # "arg: | arg tRSHFT arg" 
                      v_zero = value_expr( val[vofs ])
                      v_two = value_expr( val[vofs + 2])
                      result = new_call_1(v_zero , val[vofs + 1],  v_two )
                    
    result
end

def _reduce_214(val, vofs)
		      # "arg: | arg tANDOP arg" 
                      result = logop( RubyAndNode, val[vofs ], val[vofs + 2]) # s(:and )
                    
    result
end

def _reduce_215(val, vofs)
		      # "arg: | arg tOROP arg" 
                      result = logop( RubyOrNode, val[vofs ], val[vofs + 2]) # s(:or )
                    
    result
end

def _reduce_216(val, vofs)
		      # "arg: | kDEFINED opt_nl arg" 
                      result = RubyDefinedNode.s( val[vofs + 2])  # s(:defined )
                    
    result
end

def _reduce_217(val, vofs)
		      # "arg: | arg tEH arg tCOLON arg" 
                      result = RubyIfNode.s(val[vofs ], val[vofs + 2], val[vofs + 4]) # s(:if )
                    
    result
end

# reduce 218 omitted

def _reduce_219(val, vofs)
		      # "arg_value: arg" 
                      result = value_expr(val[vofs ])
                    
    result
end

# reduce 220 omitted

def _reduce_221(val, vofs)
		      # "aref__args: | command opt_nl" 
                      warning('parenthesize argument(s) for future version')
                      # result = s(:array, val_[0])
                      result = RubyRpCallArgs.s( val[vofs ])
                    
    result
end

def _reduce_222(val, vofs)
                      # "aref__args: | args trailer" ;
                      result = val[vofs ]
                    
    result
end

def _reduce_223(val, vofs)
		      # "aref__args: | args tCOMMA tSTAR arg opt_nl" 
                      result = val[vofs ]
                      result.append( RubySplatNode.s( val[vofs + 3] ))
                    
    result
end

def _reduce_224(val, vofs)
		      # "aref__args: | assocs trailer" 
                      # result = s(:array, s(:hash, *val_[0].values))
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ] ))
                    
    result
end

def _reduce_225(val, vofs)
		      # "aref__args: | tSTAR arg opt_nl" 
                      # result = s(:array, s(:splat, val_[1]))
                     result = RubyRpCallArgs.s( RubySplatNode.s( val[vofs + 1])) 
                    
    result
end

def _reduce_226(val, vofs)
		      # "paren_args: tLPAREN2 none tRPAREN" 
                      result = val[vofs + 1]
                    
    result
end

def _reduce_227(val, vofs)
		      # "paren_args: | tLPAREN2 call_args opt_nl tRPAREN" 
                      result = val[vofs + 1]
                    
    result
end

def _reduce_228(val, vofs)
		      # "paren_args: | tLPAREN2 block_call opt_nl tRPAREN" 
                      warning( "parenthesize argument(s) for future version")
                      # result = s(:array, val_[1])
                      result = RubyRpCallArgs.s( val[vofs + 1])
                    
    result
end

def _reduce_229(val, vofs)
		      # "paren_args: | tLPAREN2 args tCOMMA block_call opt_nl tRPAREN" 
                      warning( "parenthesize argument(s) for future version")
                      # result = val_[1].add val_[3]
                      result = val[vofs + 1].append(  val[vofs + 3] )
                    
    result
end

# reduce 230 omitted

# reduce 231 omitted

def _reduce_232(val, vofs)
		      # "call_args: command" 
                      warning( "parenthesize argument(s) for future version")
                      # result = s(:array, val_[0])
                      result = RubyRpCallArgs.s( val[vofs ])
                    
    result
end

def _reduce_233(val, vofs)
		      # "call_args: | args opt_block_arg" 
                      result = val[vofs ]  # should be a RubyRpCallArgs
                      result.append_blk_arg( val[vofs + 1])
                    
    result
end

def _reduce_234(val, vofs)
		      # "call_args: | args tCOMMA tSTAR arg_value opt_block_arg" 
                      result = val[vofs ]  # should be a RubyRpCallArgs
                      result.append_arg( RubySplatNode.s( val[vofs + 3]) )
                      result.append_blk_arg( val[vofs + 4])
                    
    result
end

def _reduce_235(val, vofs)
		      # "call_args: | assocs opt_block_arg" 
                      # result = s(:array, s(:hash, *val_[0].values))
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ] ))
                      result.append_blk_arg( val[vofs + 1] )
                    
    result
end

def _reduce_236(val, vofs)
		      # "call_args: | assocs tCOMMA tSTAR arg_value opt_block_arg" 
                      # result = self.arg_concat s(:array, s(:hash, *val_[0].values)), val_[3]
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ]) )
                      result.append_arg( RubySplatNode.s( val[vofs + 3] ) )
                      result.append_blk_arg( val[vofs + 4] )
                    
    result
end

def _reduce_237(val, vofs)
		      # "call_args: | args tCOMMA assocs opt_block_arg" 
                      # result = val_[0] << s(:hash, *val_[2].values)
                      result = val[vofs ]
                      result.append_arg( RubyHashNode.s( val[vofs + 2] ))
                      result.append_blk_arg( val[vofs + 3])
                    
    result
end

def _reduce_238(val, vofs)
		      # "call_args: | args tCOMMA assocs tCOMMA tSTAR arg opt_block_arg" 
                      # val_[0] << s(:hash, *val_[2].values)
                      result = val[vofs ]
                      result.append_arg( RubyHashNode.s( val[vofs + 2] ))
                      result.append_arg( RubySplatNode.s( val[vofs + 5] ))
                      result.append_blk_arg( val[vofs + 6])
                    
    result
end

def _reduce_239(val, vofs)
		      # "call_args: | tSTAR arg_value opt_block_arg" 
                      # result = self.arg_blk_pass s(:splat, val_[1]), val_[2]
                      result = RubyRpCallArgs.s( RubySplatNode.s( val[vofs + 1]))
                      result.append_blk_arg( val[vofs + 2] )
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, vofs)
		      # "call_args2: arg_value tCOMMA args opt_block_arg" 
                      args = self.list_prepend( val[vofs + 2], val[vofs ] )
                      result = args.append_blk_arg( val[vofs + 3] )
                    
    result
end

def _reduce_242(val, vofs)
		      # "call_args2: | arg_value tCOMMA block_arg" 
                      result = RubyRpCallArgs.s( val[vofs ])
                      result.append_blk_arg( val[vofs + 2])
                    
    result
end

def _reduce_243(val, vofs)
		      # "call_args2: | arg_value tCOMMA tSTAR arg_value opt_block_arg" 
                      result = RubyRpCallArgs.s( val[vofs ])
                      result.append_arg( RubySplatNode.s( val[vofs + 3] ))
                      result.append_blk_arg( val[vofs + 4] )
                    
    result
end

def _reduce_244(val, vofs)
		      # "call_args2: | arg_value tCOMMA args tCOMMA tSTAR arg_value opt_block_arg" 
                      #result = self.arg_concat s(:array, val_[0], s(:hash, *val_[2].values)), val_[5]
                      result = RubyRpCallArgs.s(val[vofs ], RubyHashNode.s( val[vofs + 2]) )
                      result.append_arg( val[vofs + 5])
                      result.append_blk_arg( val[vofs + 6] )
                    
    result
end

def _reduce_245(val, vofs)
		      # "call_args2: | assocs opt_block_arg" 
                      # result = s(:array, s(:hash, *val_[0].values))
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ] ))
                      result.append_blk_arg( val[vofs + 1])
                    
    result
end

def _reduce_246(val, vofs)
		      # "call_args2: | assocs tCOMMA tSTAR arg_value opt_block_arg" 
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ]), RubySplatNode.s(val[vofs + 3]) )
                      result.append_blk_arg( val[vofs + 4] )
                    
    result
end

def _reduce_247(val, vofs)
		      # "call_args2: | arg_value tCOMMA assocs opt_block_arg" 
                      # result = s(:array, val_[0], s(:hash, *val_[2].values))
                      result = RubyRpCallArgs.s( val[vofs ], RubyHashNode.s( val[vofs + 2]))
                      result.append_blk_arg( val[vofs + 3] )
                    
    result
end

def _reduce_248(val, vofs)
		      # "call_args2: | arg_value tCOMMA args tCOMMA assocs opt_block_arg" 
                      result = RubyRpCallArgs.s( val[vofs ] )
                      result.appendAll( val[vofs + 2] ) 
                      result.append_arg( RubyHashNode.s( val[vofs + 4] ))
                      result.append_blk_arg( val[vofs + 5] )
                    
    result
end

def _reduce_249(val, vofs)
		      # "call_args2: | arg_value tCOMMA assocs tCOMMA tSTAR arg_value opt_block_arg" 
                      result = RubyRpCallArgs.s( val[vofs ] , RubyHashNode.s( val[vofs + 2] ))
                      result.append_arg( RubySplatNode.s( val[vofs + 5] ))
                      result.append_blk_arg( val[vofs + 6] )
                    
    result
end

def _reduce_250(val, vofs)
		      # "call_args2: | arg_value tCOMMA args tCOMMA assocs tCOMMA tSTAR arg_value opt_block_arg" 
                      result = RubyRpCallArgs.s( val[vofs ] )
                      result.appendAll( val[vofs + 2] )  
                      result.append_arg( RubyHashNode.s( val[vofs + 4] ))
                      result.append_arg( RubySplatNode.s( val[vofs + 7]))
                      result.append_blk_arg( val[vofs + 8])
                    
    result
end

def _reduce_251(val, vofs)
		      # "call_args2: | tSTAR arg_value opt_block_arg" 
                      result = RubyRpCallArgs.s( RubySplatNode.s( val[vofs + 1]))
                      result.result.append_blk_arg( val[vofs + 2] )
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, vofs)
		      # "command_args:" 
		      lex_cmdarg = @lexer.cmdarg_ 
                      result = lex_cmdarg.dup
                      lex_cmdarg.push( true )
                    
    result
end

def _reduce_254(val, vofs)
		      # "command_args: ___  open_args" 
                      # @lexer.cmdarg_.stack.replace( val_[0] )
                      @lexer.cmdarg=( val[vofs ].dup  )
                      result = val[vofs + 1]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, vofs)
		      # "open_args: tLPAREN_ARG" 
                      @lexer.lex_state=( Expr_endArg )
                      result = val[vofs] # missing from Ryan's code
                    
    result
end

def _reduce_257(val, vofs)
		      # "open_args: ___ tRPAREN" 
        msg = "don't put space before argument parentheses, near line #{@lexer.lineno_}"
                      if @mydebug ; msg << " (B)" ; end 
                      warning(msg)
                      result = nil
                    
    result
end

def _reduce_258(val, vofs)
		      # "open_args: | tLPAREN_ARG call_args2" 
                      @lexer.lex_state=( Expr_endArg )
                      result = val[vofs]
                    
    result
end

def _reduce_259(val, vofs)
		      # "open_args: ___ tRPAREN" 
		      #    tRPAREN
        msg = "don't put space before argument parentheses, near line #{@lexer.lineno_}"
                      if @mydebug ; msg << " (C)" ; end 
                      warning(msg)
                      result = val[vofs + 1]
                    
    result
end

def _reduce_260(val, vofs)
		      # "block_arg: tAMPER arg_value" 
                      # result = s(:block_pass, val_[1])
                      result = RubyBlockPassNode.s(val[vofs + 1])
                    
    result
end

def _reduce_261(val, vofs)
		      # "opt_block_arg: tCOMMA block_arg" 
                      result = val[vofs + 1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, vofs)
		      # "args: arg_value" 
                      result = RubyRpCallArgs.s( val[vofs ]) # s(:array )
                    
    result
end

def _reduce_264(val, vofs)
		      # " args: | args tCOMMA arg_value" 
                      result = val[vofs ]
                      result.append_arg( val[vofs + 2])
                    
    result
end

def _reduce_265(val, vofs)
		      # "mrhs: args tCOMMA arg_value" 
                      result = val[vofs ]
                      result.append_arg( val[vofs + 2] )
                    
    result
end

def _reduce_266(val, vofs)
		      # "mrhs: | args tCOMMA tSTAR arg_value" 
                      result = val[vofs ]
                      result.append_arg( RubySplatNode.s( val[vofs + 3]))
                    
    result
end

def _reduce_267(val, vofs)
		      # "mrhs: | tSTAR arg_value" 
                      result = RubySplatNode.s( val[vofs + 1])  # s(:splat ) 
                    
    result
end

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

def _reduce_276(val, vofs)
		      # "primary: tFID" 
                      result = new_fcall( val[vofs ], nil) 
                    
    result
end

def _reduce_277(val, vofs)
		      # "primary: | kBEGIN body_stamt kEND" 
                      if val[vofs + 2]._equal?( :tEOF )
                        raise SyntaxError, 'unexpected $end, expecting kEND for kBEGIN'
                      end
                      v_two = val[vofs + 1]  # the  body_stamt
                      unless v_two then
                        result = RubyNilNode._new # s(:nil)
                      else
                        result = RubyBeginNode.s( v_two ) # s(:begin )
                      end
                    
    result
end

def _reduce_278(val, vofs)
		      # "primary: | tLPAREN_ARG expr" 
                      @lexer.lex_state=( Expr_endArg )
                      result = val[vofs]
                    
    result
end

def _reduce_279(val, vofs)
		      # "primary: ___ opt_nl tRPAREN" 
          warning "(...) interpreted as grouped expression, near line #{@lexer.lineno_}"
                      result = val[vofs + 1]
                    
    result
end

def _reduce_280(val, vofs)
		      # "primary: | tLPAREN comp_stamt tRPAREN" 
                      # result = val_[1] || s(:nil)
                      result = val[vofs + 1] || RubyNilNode._new 
                      result.paren=( true )
                    
    result
end

def _reduce_281(val, vofs)
		      # "primary: | primary_value tCOLON2 tCONSTANT" 
                      # result = s(:colon2, val_[0], val_[2].to_sym) 
                      result = RubyColon2Node.s( val[vofs ], val[vofs + 2])
                    
    result
end

def _reduce_282(val, vofs)
		      # "primary: | tCOLON3 tCONSTANT" 
                      # result = s(:colon3, val_[1].to_sym)  
                      result = RubyColon3Node.s( val[vofs + 1])
                    
    result
end

def _reduce_283(val, vofs)
		      # "primary: | primary_value tLBRACK_STR aref__args tRBRACK" 
                      result = new_aref( val, vofs )
                    
    result
end

def _reduce_284(val, vofs)
		      # "primary: | tLBRACK aref__args tRBRACK" 
                      # result = val_[1] || s(:array)
                      result = val[vofs + 1] || RubyRpCallArgs._new 
                    
    result
end

def _reduce_285(val, vofs)
		      # "primary: | tLBRACE assoc_list tRCURLY" 
                      # result = s(:hash, *val_[1].values)
                      result = RubyHashNode.s( val[vofs + 1] )
                    
    result
end

def _reduce_286(val, vofs)
		      # "primary: | kRETURN" 
                      # result = s(:return)
                      result = RubyReturnNode.s(nil)
		      result.src_offset=( val[vofs ].src_offset ) # of the kRETURN
                    
    result
end

def _reduce_287(val, vofs)
		      # "primary: | kYIELD tLPAREN2 call_args tRPAREN" 
                      result = new_yield( val[vofs + 2])  
                      result.src_offset=( val[vofs ].src_offset ) # of the kYIELD
                    
    result
end

def _reduce_288(val, vofs)
		      # "primary: | kYIELD tLPAREN2 tRPAREN" 
                      result = new_yield_0
                      result.src_offset=( val[vofs ].src_offset ) # of the kYIELD
                    
    result
end

def _reduce_289(val, vofs)
		      # "primary: | kYIELD" 
                      result = new_yield_0
                      result.src_offset=( val[vofs ].src_offset ) # of the kYIELD
                    
    result
end

def _reduce_290(val, vofs)
		      # "primary: | kDEFINED opt_nl tLPAREN2 expr tRPAREN" 
                      result = RubyDefinedNode.s( val[vofs + 3])   # s(:defined )
                    
    result
end

def _reduce_291(val, vofs)
		      # "primary: | operation brace_blck" 
                      oper = val[vofs ]
                      iter = val[vofs + 1]
                      call = new_fcall( oper, nil  )  # zero args
                      # iter.insert(1, call)
                      iter.call=(call)
                      result = iter
                      # call.line ||= iter.line
                    
    result
end

# reduce 292 omitted

def _reduce_293(val, vofs)
		      # "primary: | method_call brace_blck" 
                      call = val[vofs ]		
                      iter = val[vofs + 1]
                      iter.call=(call)
                      result = iter
                    
    result
end

def _reduce_294(val, vofs)
		      # "primary: | kIF expr_value then comp_stamt if_tail kEND" 
                      if val[vofs + 5]._equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_if( val[vofs + 1], val[vofs + 3], val[vofs + 4] )
                      result.src_offset=( val[vofs ].src_offset )
                    
    result
end

def _reduce_295(val, vofs)
		      # "primary: | kUNLESS expr_value then comp_stamt opt_else kEND" 
                      if val[vofs + 5]._equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_if( val[vofs + 1], val[vofs + 4], val[vofs + 3])
                      result.src_offset=( val[vofs ].src_offset )
                    
    result
end

def _reduce_296(val, vofs)
		      # "primary: | kWHILE" 
                      @lexer.cond_.push( true )
                      result = val[vofs]
                    
    result
end

def _reduce_297(val, vofs)
		      # "primary: kWHILE ___ expr_value do" 
                      @lexer.cond_.pop
                      result = val[vofs]
                    
    result
end

def _reduce_298(val, vofs)
		      # "primary: kWHILE ___ comp_stamt kEND" 
                      if val[vofs + 6]._equal?(:tEOF)
                        premature_eof( val[vofs ] )
                      end
                      result = new_while( val[vofs + 5], val[vofs + 2])
                      result.src_offset=( val[vofs ].src_offset) # kWhile is a RpNameToken
                    
    result
end

def _reduce_299(val, vofs)
		      # "primary: | kUNTIL" 
                      @lexer.cond_.push( true )
                      result = val[vofs]
                    
    result
end

def _reduce_300(val, vofs)
		      # "kUNTIL ___ expr_value do" 
                      @lexer.cond_.pop
                      result = val[vofs]
                    
    result
end

def _reduce_301(val, vofs)
		      # "kUNTIL ___ comp_stamt kEND" 
                      if val[vofs + 6]._equal?(:tEOF)
                        premature_eof( val[vofs ] )
                      end
                      result = new_until( val[vofs + 5], val[vofs + 2] )
                      result.src_offset=( val[vofs ].src_offset ) # kUNTIL RpNameToken
                    
    result
end

def _reduce_302(val, vofs)
		      # "primary: | kCASE expr_value opt_termms case_body kEND" 
                      if val[vofs + 4]._equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_case( val[vofs + 1], val[vofs + 3])
                      result.src_offset=(   val[vofs ].src_offset ) # kCASE position
                    
    result
end

def _reduce_303(val, vofs)
		      # "primary: | kCASE opt_termms case_body kEND" 
                      if val[vofs + 3]._equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_case( nil, val[vofs + 2] )
                      result.src_offset=(   val[vofs ].src_offset ) # kCASE position
                    
    result
end

def _reduce_304(val, vofs)
		      # "primary: | kCASE opt_termms kELSE comp_stamt kEND" 
                      if val[vofs + 4]._equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_case( nil, val[vofs + 3] )
                      result.src_offset=(   val[vofs ].src_offset ) # kCASE position
                    
    result
end

def _reduce_305(val, vofs)
		      # "primary: | kFOR blck_var kIN" 
                      @lexer.cond_.push( true )
                      result = val[vofs]
                    
    result
end

def _reduce_306(val, vofs)
		      # "primary: kFOR ___ expr_value do" 
                      @lexer.cond_.pop
                      result = val[vofs]
                    
    result
end

def _reduce_307(val, vofs)
		      # "primary: kFOR ___ comp_stamt kEND" 
                      if val[vofs + 8]._equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_for( val[vofs + 4], val[vofs + 1], val[vofs + 7])
                      result.src_offset=( val[vofs ].src_offset ) # kFOR position
                    
    result
end

def _reduce_308(val, vofs)
		      # "primary: | kCLASS cpath superclass" 
                      # @comments.push( @lexer.comments_ )
                      if (@in_def || @in_single > 0) then
raise SyntaxError, "class definition in method body, near line #{@lexer.lineno_}\n cannot continue parsing."
                      end
                      @env.extend( false, :module )
                      result = val[vofs]
                    
    result
end

def _reduce_309(val, vofs)
		      # "primary: | kCLASS ___ body_stamt kEND" 
                      result = new_class( val, vofs )
                      @env.unextend
                    
    result
end

def _reduce_310(val, vofs)
		      # "primary: | kCLASS tLSHFT expr" 
                      result = @in_def
                      @in_def = false
                    
    result
end

def _reduce_311(val, vofs)
		      # "primary | kCLASS ___ Term" 
                      result = @in_single
                      @in_single = 0
                      @env.extend( false, :module )
                    
    result
end

def _reduce_312(val, vofs)
		      # "primary  | kCLASS ___ body_stamt kEND" 
                      result = new_sclass(val, vofs )
                      @env.unextend
                    
    result
end

def _reduce_313(val, vofs)
		      # "primary: | kMODULE cpath" 
                      # @comments.push( @lexer.comments_ )
                      if   @in_def or @in_single > 0
                        raise SyntaxError,  "module definition in method body" 
                      end
                      @env.extend( false, :module )
                      result = val[vofs]
                    
    result
end

def _reduce_314(val, vofs)
		      # "primary: | kMODULE ___ body_stamt kEND" 
                      result = new_module( val, vofs )
                      @env.unextend
                    
    result
end

def _reduce_315(val, vofs)
		      # "primary: | kDEF fname" 
                      lx = @lexer
                      # @comments.push( lx.comments_ )
                      @in_def = true
                      @env.extend( false, :def )
                      result =  -907  # dummy result, replaces [line, beginOfLine]
                    
    result
end

def _reduce_316(val, vofs)
		      # "primary: | kDEF ___ f_arglist body_stamt kEND" 
                      result = new_defn( val , vofs )
                      @env.unextend
                      @in_def = false
                    
    result
end

def _reduce_317(val, vofs)
		      # "primary: | kDEF singleton dot_or_colon" 
                      lx = @lexer
                      # @comments.push( lx.comments_ )
                      lx.lex_state=( Expr_fname )
                      result = val[vofs]
                    
    result
end

def _reduce_318(val, vofs)
		      # "primary: | kDEF ___ fname" 
                      @in_single += 1
                      @env.extend( false, :def )
                      @lexer.lex_state=( Expr_end )# force for args
                      result = val[vofs]
                    
    result
end

def _reduce_319(val, vofs)
		      # "primary: | kDEF ___ f_arglist body_stamt kEND" 
                      result = new_defs( val , vofs )

                      @env.unextend
                      @in_single -= 1
                    
    result
end

def _reduce_320(val, vofs)
		      # "primary: | kBREAK" 
                      result = RubyBreakNode.s(nil) # s(:break)
                      result.src_offset=( val[vofs ].src_offset ) #  of the kBREAK
                    
    result
end

def _reduce_321(val, vofs)
		      # "primary: | kNEXT" 
                      result = RubyNextNode.s(nil) #  s(:next)
                      result.src_offset=( val[vofs ].src_offset ) #  of the kNEXT
                    
    result
end

def _reduce_322(val, vofs)
		      # "primary: | kREDO" 
                      result = RubyRedoNode._new # s(:redo)
                      result.src_offset=( val[vofs ].src_offset ) #  of the kREDO
                    
    result
end

def _reduce_323(val, vofs)
		      # "primary: | kRETRY" 
                      result = RubyRetryNode._new # s(:retry)
                      result.src_offset=( val[vofs ].src_offset ) #  of the kRETRY
                    
    result
end

def _reduce_324(val, vofs)
		      # "primary_value: primary" 
                      result = value_expr(val[vofs ])
                    
    result
end

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

def _reduce_333(val, vofs)
		      # "if_tail: opt_else| kELSIF___if_tail " 
                      result = RubyIfNode.s(val[vofs + 1], val[vofs + 3], val[vofs + 4]) # s(:if )
                    
    result
end

# reduce 334 omitted

def _reduce_335(val, vofs)
		      # "opt_else: | kELSE comp_stamt" 
                      result = val[vofs + 1]
                    
    result
end

# reduce 336 omitted

def _reduce_337(val, vofs)
                      # "blck_var: | mLhs" 
                      # val_[0].delete_at 1 if val[0][1].nil? # HACK
                      # Maglev, do nothing for now
                      result = val[vofs]
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, vofs)
		      # "opt_block_var: | tPIPE tPIPE" 

                      result = 0
                    
    result
end

def _reduce_340(val, vofs)
		      # "opt_block_var: | tOROP" 

                      result = 0
                    
    result
end

def _reduce_341(val, vofs)
		      # "opt_block_var: | tPIPE blck_var tPIPE" 


                      result = val[vofs + 1]   
                    
    result
end

def _reduce_342(val, vofs)
		      # "do_block: kDO_BLOCK" 
		      @env.extend( true , nil ) # (:dynamic)
                      @env.in_block_params=(true)
                      result = val[vofs]
                    
    result
end

def _reduce_343(val, vofs)
		      # "do_block: ___ opt_block_var" 
                      result = @env.dynamic_keys
                      @env.in_block_params=(false)
                    
    result
end

def _reduce_344(val, vofs)
		      # "do_block: ___ comp_stamt kEND" 
                      if val[vofs + 5]._equal?( :tEOF )
                        premature_eof( val[vofs] )  # of kDO
                      end
                      vars   = val[vofs + 2]
                      body   = val[vofs + 4]
                      result = new_iter(vars, body)
                      @env.unextend
                    
    result
end

def _reduce_345(val, vofs)
		      # "block_call: command do_block" 
                      v_zero = val[vofs ]
                      if v_zero._equal?(nil)
                        # ok
                      elsif v_zero.class._equal?(RubyBlockPassNode) 
                        raise SyntaxError, "Both block arg and actual block given." 
                      end
                      iter = val[vofs + 1]
                      iter.call=(v_zero)
                      result = iter
                    
    result
end

def _reduce_346(val, vofs)
		      # "block_call: | block_call tDOT operation2 opt_paren_args" 
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_347(val, vofs)
		      # "block_call: block_call tCOLON2 operation2 opt_paren_args" 
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_348(val, vofs)
		      # "method_call: operation  paren_args" 
                      result = new_fcall( val[vofs ], val[vofs + 1] )
                    
    result
end

def _reduce_349(val, vofs)
		      # "method_call: | primary_value tDOT operation2 opt_paren_args" 
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3] )
                    
    result
end

def _reduce_350(val, vofs)
		      # "method_call: | primary_value tCOLON2 operation2 paren_args" 
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3] )
                    
    result
end

def _reduce_351(val, vofs)
		      # "method_call: | primary_value tCOLON2 operation3" 
                      result = new_vcall( val[vofs ], val[vofs + 2] )
                    
    result
end

def _reduce_352(val, vofs)
		      # "method_call: | kSUPER paren_args" 
                      result = new_super( val , vofs )
                    
    result
end

def _reduce_353(val, vofs)
		      # "method_call: | kSUPER" 
                      result = RubyZSuperNode._new # s(:zsuper)
                      result.src_offset=( val[vofs].src_offset ) # of the kSUPER
                    
    result
end

def _reduce_354(val, vofs)
		      # "brace_blck: tLCURLY" 
		      @env.extend( true , nil ) # (:dynamic)
                      @env.in_block_params=(true)
                      result = -909 # @lexer.lineno_
                    
    result
end

def _reduce_355(val, vofs)
		      # "brace_blck: tLCURLY ___ opt_block_var" 
                      result = @env.dynamic_keys
                      @env.in_block_params=(false)
                    
    result
end

def _reduce_356(val, vofs)
		      # "brace_blck: tLCURLY ___ comp_stamt tRCURLY" 
                      # REFACTOR
                      args   = val[vofs + 2]
                      body   = val[vofs + 4]
                      result = new_iter(args, body)
                      @env.unextend
                    
    result
end

def _reduce_357(val, vofs)
		      # "brace_blck: | kDO" 
		      @env.extend( true , nil ) # (:dynamic)
                      @env.in_block_params=(true)
                      result = -910 # @lexer.lineno_      
                    
    result
end

def _reduce_358(val, vofs)
		      # "brace_blck: | kDO ___ opt_block_var" 
                      result = @env.dynamic_keys
                      @env.in_block_params=(false)
                    
    result
end

def _reduce_359(val, vofs)
		      # "brace_blck: | kDO ___ comp_stamt kEND" 
                      if val[vofs + 5]._equal?( :tEOF )
                        premature_eof( val[vofs] )
                      end
                      args = val[vofs + 2]
                      body = val[vofs + 4]
                      result = new_iter(args, body)
                      @env.unextend
                    
    result
end

def _reduce_360(val, vofs)
                      # "case_body: kWHEN when_args then comp_stamt cases" 
                      result = RubyWhenNode.s( val[vofs + 1], val[vofs + 3], val[vofs + 4])  # s(:when )
                      result.src_offset=(   val[vofs ].src_offset ) # kWHEN position
                    
    result
end

# reduce 361 omitted

def _reduce_362(val, vofs)
                      # "when_args: args | args tCOMMA tSTAR arg_value" 
                      wh = RubyWhenNode.s(val[vofs + 3], nil, nil)
                      wh.src_offset=(   val[vofs + 2].src_offset ) # tSTAR position
                      result = self.list_append( val[vofs ], wh )
                    
    result
end

def _reduce_363(val, vofs)
		      # "when_args: | tSTAR arg_value" 
                      # result = s(:array, s(:when, val_[1], nil))
                      wh = RubyWhenNode.s( val[vofs + 1], nil, nil)
                      wh.src_offset=(   val[vofs ].src_offset ) # tSTAR position
                      result = RubyRpCallArgs.s( wh )
                    
    result
end

# reduce 364 omitted

# reduce 365 omitted

def _reduce_366(val, vofs)
	              # "opt_rescue: kRESCUE exc_list exc_var then comp_stamt opt_rescue" 
                      # klasses, var, body, rest = val_[1], val_[2], val_[4], val_[5]
                      # klasses ||= s(:array )  # Maglev not used
                      klasses = val[vofs + 1]   # ok if nil
                      var = val[vofs + 2]
                      body = val[vofs + 4]
                      rest = val[vofs + 5] 
                      if var 
                        r_hs = RubyGlobalVarNode.s( :"$!" )  # s(:gvar )
                        asgn = node_assign(var, r_hs )
                        if body._equal?(nil)
                          body = RubyBlockNode.s( [ asgn ] )
                        else
                          body = body.prepend_to_block( asgn )
                        end
                      end   
                      result = RubyRescueBodyNode.s(klasses, body, rest)   # s(:resbody )
                      result.src_offset=( val[vofs ].src_offset )   # kRESCUE position
                    
    result
end

def _reduce_367(val, vofs)
		      # "opt_rescue: |" 
                      result = nil
                    
    result
end

def _reduce_368(val, vofs)
	              # "exc_list: arg_value" 
                      result = RubyArrayNode.s( val[vofs ])  # s(:array )
                    
    result
end

# reduce 369 omitted

# reduce 370 omitted

def _reduce_371(val, vofs)
		      # "exc_var: tASSOC lhs" 
                      result = val[vofs + 1]
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, vofs)
		      # "opt_ensure: kENSURE comp_stamt" 
                      v_one = val[vofs + 1]
                      if v_one._equal?(nil)
                        v_one = RubyNilNode._new # s(:nil)
                      end
                      result = RubyEnsureNode.s( v_one )
                      result.src_offset=( val[vofs ].src_offset ) # kENSURE position
                    
    result
end

# reduce 374 omitted

def _reduce_375(val, vofs)
		    # "literal: numeric" 
		    result = RubyAbstractNumberNode.s( val[vofs ])  # s(:lit )
		    
    result
end

def _reduce_376(val, vofs)
		    # "literal: | symbol" 
		    result = RubySymbolNode.s( val[vofs ]) # s(:lit )
		    
    result
end

# reduce 377 omitted

def _reduce_378(val, vofs)
		      # "strings: string" 
                      # val_[0] = s(:dstr, val[0].value) if val[0][0] == :evstr 
                      # result = val_[0]
                      v_zero = val[vofs ] 
                      if v_zero.class._equal?(RubyEvStrNode)
                        result = RubyDStrNode.s( [ v_zero.evStrBody ] )
                      else
                        result = v_zero
                      end 
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, vofs)
		      # "string: | string string1" 
                      result = self.literal_concat( val[vofs ], val[vofs + 1])  
                    
    result
end

def _reduce_381(val, vofs)
		      # "string1: tSTRING_BEG string_contents tSTRING_END" 
                      result = val[vofs + 1]
                    
    result
end

def _reduce_382(val, vofs)
		      # "string1: | t_STRING" 
                      result = RubyStrNode.s( val[vofs ])  # s(:str )
                    
    result
end

def _reduce_383(val, vofs)
		      # "xstring: tXSTRING_BEG xstring_contents tSTRING_END" 
                      result = new_xstring( val[vofs + 1])
                      result.src_offset=( val[vofs ].src_offset ) # tXSTRING_BEG position
                    
    result
end

def _reduce_384(val, vofs)
		      # "regexp: tREGEXP_BEG xstring_contents tREGEXP_END" 
                      result = new_regexp(val, vofs)
                    
    result
end

def _reduce_385(val, vofs)
		      # "words: tWORDS_BEG tSPACE tSTRING_END" 
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_386(val, vofs)
		      # "words: | tWORDS_BEG word_list tSTRING_END" 
                      result = val[vofs + 1]
                    
    result
end

def _reduce_387(val, vofs)
		      # "word_list: none" 
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_388(val, vofs)
		      # "word_list: | word_list word tSPACE" 
                      # word = val_[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1] #
                      # result = val_[0] << word
                      v_one = val[vofs + 1]
                      if v_one.class._equal?(RubyEvStrNode)
                        word = RubyDStrNode.s([ RubyStrNode.s('') , v_one ])
                      else
                        word = v_one
                      end
                      result = val[vofs ].append( word)  # v[0] should be a RubyArrayNode
                    
    result
end

# reduce 389 omitted

def _reduce_390(val, vofs)
		      # "word: | word string_content" 
                      result = self.literal_concat( val[vofs ], val[vofs + 1])
                    
    result
end

def _reduce_391(val, vofs)
		      # "awords: tAWORDS_BEG tSPACE tSTRING_END" 
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_392(val, vofs)
		      # "awords: | tAWORDS_BEG qword_list tSTRING_END" 
                      result = val[vofs + 1]
                    
    result
end

def _reduce_393(val, vofs)
		      # "qword_list: none" 
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_394(val, vofs)
		      # "qword_list: | qword_list tSTRING_CONTENT tSPACE" 
                      # result = val_[0] << s(:str, val_[1]) # assume val[0] is ArrayNode 
                      result = val[vofs ].append( RubyStrNode.s(val[vofs + 1]))
                    
    result
end

def _reduce_395(val, vofs)
			# "string_contents: none" 
                      	# result = s(:str, "")
			result = RubyStrNode.s( "")
                    
    result
end

def _reduce_396(val, vofs)
		      # "string_contents: | string_contents string_content" 
                      result = self.literal_concat(val[vofs ], val[vofs + 1])
                    
    result
end

def _reduce_397(val, vofs)
		      # "xstring_contents: none" 
                      result = nil
                    
    result
end

def _reduce_398(val, vofs)
		      # "xstring_contents: | xstring_contents string_content" 
                      result = self.literal_concat(val[vofs ], val[vofs + 1])
                    
    result
end

def _reduce_399(val, vofs)
		      # "string_content: tSTRING_CONTENT" 
                      # result = s(:str, val_[0])
		      result = RubyStrNode.s( val[vofs ])
                    
    result
end

def _reduce_400(val, vofs)
		      # "string_content: | tSTRING_DVAR" 
                      lx = @lexer
                      result = lx.lex_strTerm_
                      lx.lex_strTerm=( nil )
                      lx.lex_state=( Expr_beg )
                    
    result
end

def _reduce_401(val, vofs)
		      # "string_content: | tSTRING_DVAR ___ string_dvar" 
                      # result = s(:evstr, val_[2]) 
                      @lexer.lex_strTerm=( val[vofs + 1])
                      result = RubyEvStrNode.s( val[vofs + 2] )
                    
    result
end

def _reduce_402(val, vofs)
		      # "string_content: | tSTRING_DBEG" 
                      lx = @lexer
                      result = lx.lex_strTerm_
                      lx.lex_strTerm=( nil )
                      lx.lex_state=( Expr_beg )
                      lx.cond_.push( false)
                      lx.cmdarg_.push( false)
                    
    result
end

def _reduce_403(val, vofs)
		      # "string_content: | tSTRING_DBEG ___ comp_stamt tRCURLY" 
                      lx = @lexer
                      lx.lex_strTerm=( val[vofs + 1] )
                      lx.cond_.lexpop
                      lx.cmdarg_.lexpop

                      v_two = val[vofs + 2] 
                      if v_two._equal?(nil) 
                        result = RubyEvStrNode.s(nil) #  s(:evstr ) 
                      else 
                        knd = v_two.str_dstr_evstr_kind  # MNU here if "unknown rescue body"
                        if knd._equal?(nil) 
                           result = RubyEvStrNode.s(v_two)
                        else
                           result = v_two  # v_two is one of  :str :dstr: evstr
                        end
                      end
                    
    result
end

def _reduce_404(val, vofs)
		          # "string_dvar: tGVAR" 
		          # result = s(:gvar, val_[0].to_sym)   
			  result = RubyGlobalVarNode.s( val[vofs ].symval )
			
    result
end

def _reduce_405(val, vofs)
			  # "string_dvar: | tIVAR" 
		          # result = s(:ivar, val_[0].to_sym) 
			  result = RubyInstVarNode.s( val[vofs ].symval )
			
    result
end

def _reduce_406(val, vofs)
			  # "string_dvar: | tCVAR" 
	                  # result = s(:cvar, val_[0].to_sym) 
			  result = RubyClassVarNode.s( val[vofs ].symval)
			
    result
end

# reduce 407 omitted

def _reduce_408(val, vofs)
		      # "symbol: tSYMBEG sym" 
                      @lexer.lex_state=( Expr_end )
                      result = val[vofs + 1].symval  # expect an RpNameToken
                    
    result
end

def _reduce_409(val, vofs)
		      # "symbol: | tSYMBOL" 
                      result =  val[vofs ].__as_symbol 
                    
    result
end

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

def _reduce_414(val, vofs)
		      # "dsym: tSYMBEG xstring_contents tSTRING_END" 
                      @lexer.lex_state=( Expr_end )
                      v_one = val[vofs + 1]

		      v_cls = v_one.class
		      if v_cls._equal?(RubyDStrNode)  # convert :dstr to :dsym
		        result =v_one.asDSymbolNode 
                      elsif v_cls._equal?(RubyStrNode) # convert :str to :sym
                        str = v_one.strNodeValue
			result = RubySymbolNode.s( self.string_to_symbol(str) )
                      elsif v_one._equal?( nil) 
                        yyerror "empty symbol literal" 
                        result = nil
                      elsif v_cls._equal?(RubyEvStrNode)
                        result = RubyDSymbolNode.s([ RubyStrNode.s('') , v_one ])
                        # result = s(:dsym, "", result)
                      else
			internal_error("unimplemented dsym conversion")
                        result = nil
                      end
                    
    result
end

# reduce 415 omitted

# reduce 416 omitted

def _reduce_417(val, vofs)
		      # "numeric: ___ tUMINUS_NUM tINTEGER" 
                      result = val[vofs + 1] * -1 # TODOryan: pt_testcase
                    
    result
end

def _reduce_418(val, vofs)
		      # "numeric: ___ tUMINUS_NUM tFLOAT" 
                      result = val[vofs + 1] * -1 # TODOryan: pt_testcase
                    
    result
end

# reduce 419 omitted

# reduce 420 omitted

# reduce 421 omitted

# reduce 422 omitted

# reduce 423 omitted

def _reduce_424(val, vofs)
 			      # "variable: | kNIL" 
                              result = :nil      
                            
    result
end

def _reduce_425(val, vofs)
			      # "variable: |kSELF" 
			      result = :self     
                            
    result
end

def _reduce_426(val, vofs)
			      # "variable: |kTRUE" 
			      result = :true     
                            
    result
end

def _reduce_427(val, vofs)
			      # "variable: |kFALSE" 
			      result = :false    
                            
    result
end

def _reduce_428(val, vofs)
			      # "variable: |k__FILE__" 
			      result = :__FILE__ 
                            
    result
end

def _reduce_429(val, vofs)
			      # "variable: |k__LINE__" 
			      result =  RpNameToken.new( :__LINE__ ,  @lexer.line_num_)  
                            
    result
end

def _reduce_430(val, vofs)
		      # "var_ref: variable" 
                      result = self.gettable( val[vofs ])
                    
    result
end

def _reduce_431(val, vofs)
		      # "varLhs: variable" 
                      result = self.assignable(val[vofs ], nil)
                    
    result
end

def _reduce_432(val, vofs)
			      # "backref: tNTH_REF" 
	                      # result = s(:nth_ref,  val_[0]) 
			      result = RubyNthRefNode.s(val[vofs ])
			    
    result
end

def _reduce_433(val, vofs)
			      # "backref: | tBACK_REF" 
			      # result = s(:back_ref, val_[0])
			      result = RubyBackRefNode.s( val[vofs ] )
			    
    result
end

def _reduce_434(val, vofs)
		      # "superclass: Term" 
                      result = nil
                    
    result
end

def _reduce_435(val, vofs)
		      # "superclass: | tLT" 
                      @lexer.lex_state=( Expr_beg )
                      result = val[vofs]
                    
    result
end

def _reduce_436(val, vofs)
		      # "superclass: | tLT ___ expr_value Term" 
                      result = val[vofs + 2]
                    
    result
end

def _reduce_437(val, vofs)
		      # "superclass: | error Term" 
                      leave_error_recovery_mode()
                      result = nil
                    
    result
end

def _reduce_438(val, vofs)
		      # "f_arglist: tLPAREN2 f_args opt_nl tRPAREN" 
                      result = val[vofs + 1]
                      @lexer.lex_state=( Expr_beg )
                    
    result
end

def _reduce_439(val, vofs)
                      # "f_arglist: | f_args Term" 
                      result = val[vofs ]
                    
    result
end

def _reduce_440(val, vofs)
		      # "f_args: f_arg tCOMMA f_optarg tCOMMA f_rest_arg opt_f_block_arg" 
                      # result = args( val_[0], val_[2], val_[4], val_[5])
                      result = val[vofs ]
                      result.add_optional_arg( val[vofs + 2] )
                      result.add_star_arg( val[vofs + 4] )
                      result.add_block_arg( val[vofs + 5] )
                    
    result
end

def _reduce_441(val, vofs)
		      # "f_args: | f_arg tCOMMA f_optarg  opt_f_block_arg" 
                      # result = args( val_[0], val_[2],    nil, val_[3])
                      result = val[vofs ] 
                      result.add_optional_arg( val[vofs + 2] )
                      result.add_block_arg( val[vofs + 3] )
                    
    result
end

def _reduce_442(val, vofs)
		      # "f_args: | f_arg tCOMMA  f_rest_arg opt_f_block_arg" 
                      # result = args( val_[0],    nil, val_[2], val_[3])
                      result = val[vofs ] 
                      result.add_star_arg( val[vofs + 2] )
                      result.add_block_arg( val[vofs + 3] )
                    
    result
end

def _reduce_443(val, vofs)
		      # "f_args: | f_arg  opt_f_block_arg" 
                      # result = args( val_[0],    nil,    nil, val_[1])
                      result = val[vofs ] 
                      result.add_block_arg( val[vofs + 1] )
                    
    result
end

def _reduce_444(val, vofs)
		      # "f_args: | f_optarg tCOMMA f_rest_arg opt_f_block_arg" 
                      # result = args(    nil, val_[0], val_[2], val_[3])
                      result = RubyArgsNode._new
                      result.add_optional_arg(val[vofs ] )
                      result.add_star_arg( val[vofs + 2] )
                      result.add_block_arg( val[vofs + 3] )
                    
    result
end

def _reduce_445(val, vofs)
		      # "f_args: |  f_optarg  opt_f_block_arg" 
                      # result = args(    nil, val_[0],    nil, val_[1])
                      result = RubyArgsNode._new
                      result.add_optional_arg(val[vofs ])
                      result.add_block_arg( val[vofs + 1] )

                    
    result
end

def _reduce_446(val, vofs)
		      # "f_args: | f_rest_arg opt_f_block_arg" 
                      # result = args(    nil,    nil, val_[0], val_[1])
                      result = RubyArgsNode._new
                      result.add_star_arg( val[vofs ] )
                      result.add_block_arg( val[vofs + 1] )
                    
    result
end

def _reduce_447(val, vofs)
		      # "f_args: |  f_blck_arg" 
                      # result = args(    nil,    nil,    nil, val_[0])
                      result = RubyArgsNode._new
                      result.add_block_arg( val[vofs ] )
                    
    result
end

def _reduce_448(val, vofs)
		      # "f_args: | <nothing>" 
                      #result = args(    nil,    nil,    nil,    nil)
                      result = RubyArgsNode._new
                    
    result
end

def _reduce_449(val, vofs)
		      # "f_norm_arg: tCONSTANT" 
                      raise SyntaxError, "formal argument cannot be a constant: #{val[vofs ]}"
                      result = val[vofs]
                    
    result
end

def _reduce_450(val, vofs)
		      # "f_norm_arg: | tIVAR" 
                      raise SyntaxError, "formal argument cannot be an instance variable"
                      result = val[vofs]
                    
    result
end

def _reduce_451(val, vofs)
		      # "f_norm_arg: | tCVAR" 
                      raise SyntaxError, "formal argument cannot be a class variable"
                      result = val[vofs]
                    
    result
end

def _reduce_452(val, vofs)
		      # "f_norm_arg: | tIDENTIFIER" 
                      v_zero = val[vofs ]  # val_[0] will be a RpNameToken
                      @env[ v_zero.symval ] = :lvar
                      result = v_zero
                    
    result
end

def _reduce_453(val, vofs)
		      # "f_arg: f_norm_arg" 
                      # result = s(:args)
                      # result << val_[0].to_sym
                      result = RubyArgsNode._new
                      result.add_arg( val[vofs ].symval )
                    
    result
end

def _reduce_454(val, vofs)
		      # "f_arg: | f_arg tCOMMA f_norm_arg" 
                      result = val[vofs ]
                      result.add_arg( val[vofs + 2].symval )
                    
    result
end

def _reduce_455(val, vofs)
		      # "f_opt: tIDENTIFIER tEQL arg_value" 
                      result = self.assignable(val[vofs ], val[vofs + 2])
                      # TODO: detect duplicate names  ??
                    
    result
end

def _reduce_456(val, vofs)
		      # "f_optarg: f_opt" 
                      result = RubyBlockNode.s( [ val[vofs ] ] ) # s(:block )
                    
    result
end

def _reduce_457(val, vofs)
		      # "f_optarg: | f_optarg tCOMMA f_opt" 
                      result = val[vofs ] # a RubyBlockNode
                      result.append_to_block( val[vofs + 2] )
                    
    result
end

# reduce 458 omitted

# reduce 459 omitted

def _reduce_460(val, vofs)
		      # "f_rest_arg: restarg_mark tIDENTIFIER" 
                      # TODOryan: differs from parse.y - needs tests
                      name = val[vofs + 1].symval    # expect a RpNameToken
                      self.check_assignable( name ) # updates env
                      result = name   # MagLev, no prefixing of f_rest_arg with '*' 
                    
    result
end

def _reduce_461(val, vofs)
		      # "f_rest_arg: | restarg_mark" 
                      name = :"*"
                      @env[name] = :lvar
                      result = name
                    
    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, vofs)
		      # "f_blck_arg: blkarg_mark tIDENTIFIER" 
                      identifier = val[vofs + 1].symval

                      @env[identifier] = :lvar
                      # result = s(:block_arg, identifier.to_sym)
		      result = RubyBlockArgNode.s( identifier)
                    
    result
end

def _reduce_465(val, vofs)
		      # "opt_f_block_arg: tCOMMA f_blck_arg" 
                      result = val[vofs + 1]
                    
    result
end

def _reduce_466(val, vofs)
		      # "opt_f_block_arg: | <nothing>" 
                      result = nil
                    
    result
end

# reduce 467 omitted

def _reduce_468(val, vofs)
		      # "singleton: | tLPAREN2" 
                      @lexer.lex_state=( Expr_beg )
                      result = val[vofs]
                    
    result
end

def _reduce_469(val, vofs)
		      # "singleton: ___ expr opt_nl tRPAREN"  
                      result = val[vofs + 2]
		      if result._kind_of?(RubyAbstractLiteralNode)
                        yyerror "Can't  singleton method for literals." 
		      end
                    
    result
end

def _reduce_470(val, vofs)
		      # "assoc_list: none" 
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_471(val, vofs)
                      # "assoc_list: | assocs trailer" 
                      result = val[vofs ]
                    
    result
end

def _reduce_472(val, vofs)
		      # "assoc_list: | args trailer" 
                      # size = val_[0].size
                      # if (size % 2 != 1) then # != 1 because of leading :array
                      v_zero = val[vofs ]
                      size = v_zero.arrayLength
                      unless (size & 1)._equal?(0)
                        yyerror "Odd number (#{size}) list for Hash. #{v_zero.inspect}"
                      end
                      result = v_zero
                    
    result
end

# reduce 473 omitted

def _reduce_474(val, vofs)
                      # "assocs: | assocs tCOMMA assoc" 
                      list = val[vofs ].arrayDup  # dup a RubyArrayNode
                      v_two = val[vofs + 2]
                      list.appendAll(v_two) # expect v_two to be a RubyArrayNode
                      result = list
                    
    result
end

def _reduce_475(val, vofs)
		      # "assoc: arg_value tASSOC arg_value" 
                      result = RubyArrayNode.s( val[vofs ], val[vofs + 2]) # s(:array )
                    
    result
end

# reduce 476 omitted

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, vofs)
                        # "Term: tSEMI" 
                        leave_error_recovery_mode() 
                        result = val[vofs] 
                      
    result
end

# reduce 496 omitted

# reduce 497 omitted

def _reduce_498(val, vofs)
		      # "terms: | terms tSEMI" 
                      leave_error_recovery_mode() 
		      result = val[vofs] 
		    
    result
end

def _reduce_499(val, vofs)
                    # "none:" 
		    result = nil  
		  
    result
end

def _reduce_500(val, vofs)
                    # "none_block_pass:" 
		    result = nil 
		  
    result
end

def _reduce_none(val, vofs)
  val[0]
end

  end   # class RubyParser
  end   # module MagRp
