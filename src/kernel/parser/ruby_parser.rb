#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

# require 'racc/parser.rb'
module MagRp
  class RubyParser < MagRp::Parser


# require "kernel/parser/lexer.rb"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-279,497,269,270,121,-87,812,-279,-279,-279,-64,-83,333,-279,-279,430',
'-279,-84,88,332,410,420,573,428,277,3,36,429,573,279,573,121,497,-86',
'-90,-279,-279,-281,-279,-279,-279,-279,-279,-85,-281,726,519,-72,727',
'524,-429,632,633,634,638,574,686,-87,497,365,713,574,366,574,-279,-279',
'-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,686,686',
'-279,-279,-279,421,555,742,-87,123,-279,275,-281,-85,-83,126,-87,-279',
'-83,-279,-84,-279,-279,-279,-279,-279,-279,-279,-79,-279,-477,-279,747',
'277,-75,499,123,-90,279,431,-76,367,368,-89,-279,-279,-481,-80,497,-279',
'-279,749,-88,-481,-481,-481,-85,-82,277,-481,-481,-77,-481,279,277,-86',
'499,-86,741,279,-86,-481,573,121,277,-85,684,-85,497,279,-85,-481,-481',
'409,-481,-481,-481,-481,-481,-87,277,-87,499,587,-87,279,277,277,684',
'684,586,279,279,740,519,574,467,524,269,270,-481,-481,-481,-481,-481',
'-481,-481,-481,-481,-481,-481,-481,-481,-481,-89,-77,-481,-481,-481',
'-90,554,365,-88,277,-481,126,519,-85,279,521,275,-481,-77,-481,-81,-481',
'-481,-481,-481,-481,-481,-481,-89,-481,-481,-481,123,-77,277,365,499',
'760,-77,279,365,-474,737,-77,-481,-481,-274,-78,796,-481,-481,307,-86',
'-274,-274,-274,-426,307,-274,-274,-274,-79,-274,-426,277,736,499,367',
'368,279,454,-478,-274,-274,452,453,591,-86,649,755,533,-274,-274,-428',
'-274,-274,-274,-274,-274,-88,-428,-417,699,-261,-84,367,368,541,-417',
'365,367,368,404,-474,365,519,385,386,537,-80,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-474,-79,-274,-274,-274',
'758,277,-274,732,-76,-274,279,-428,-274,-84,-274,-477,-274,-79,-274',
'-417,-274,-274,-274,-274,-274,-274,-274,812,-274,410,-274,425,761,-86',
'367,368,535,-79,423,367,368,546,-79,-274,-274,-274,-274,133,-274,-274',
'-477,-477,-477,-78,-477,277,277,729,-477,-477,279,279,-475,-477,-481',
'-477,-477,-477,-477,-477,-477,-477,632,633,634,638,-477,-477,-477,-477',
'-477,-477,-477,-281,424,410,407,561,649,277,-281,-481,-477,405,279,-477',
'-477,-477,-477,-477,-477,-477,-477,-477,-477,768,-477,-477,-423,-477',
'-477,-477,-420,-279,-481,-423,531,725,533,-420,-279,-481,-424,440,-475',
'-478,-477,721,-77,-424,438,-477,724,-85,-477,-477,-281,-477,-477,406',
'-477,-481,-477,-279,-477,-475,-477,-481,-481,447,-279,383,718,-477,-477',
'-478,446,773,381,-477,-477,-477,-477,-477,-477,-420,-279,-481,-477,-477',
'-417,-478,-478,-478,-481,-478,439,-417,-86,-478,-478,269,270,716,-478',
'775,-478,-478,-478,-478,-478,-478,-478,467,-481,714,-279,-478,-478,-478',
'-478,-478,-478,-478,382,-422,777,-273,-425,269,270,780,-422,-478,-273',
'-425,-478,-478,-478,-478,-478,-478,-478,-478,-478,-478,587,-478,-478',
'-420,-478,-478,-478,586,-81,-427,-420,271,272,-89,126,-280,-427,705',
'-273,269,270,-428,-280,743,-279,-273,-478,555,-428,-478,-478,-279,-478',
'-478,-273,-478,-478,-478,126,-478,164,-478,390,854,-280,-280,390,275',
'-261,-478,852,-280,-280,-497,-478,-478,-478,-478,-478,-478,-497,-497',
'-497,-478,-478,-497,-497,-497,-280,-497,533,-273,786,-88,-428,679,103',
'-279,-322,-497,788,-82,676,101,603,-322,-90,275,-497,-497,126,-497,-497',
'-497,-497,-497,853,-280,-280,437,126,307,764,649,269,270,436,-497,630',
'634,638,635,639,641,-497,-497,-497,562,312,-497,-497,-497,630,-497,665',
'635,639,641,-497,102,-429,-322,303,-497,664,-497,285,288,291,294,126',
'-497,-497,-497,-72,-497,-497,-497,-497,-497,307,663,406,632,633,634',
'638,660,-79,603,643,630,-497,-87,635,639,641,632,633,634,638,-75,764',
'649,307,-497,-83,-497,603,307,-497,303,-497,802,307,285,288,291,294',
'-497,307,307,649,806,126,-497,622,608,275,814,292,295,603,589,275,312',
'632,633,634,638,322,323,324,325,326,303,-497,306,584,285,288,291,294',
'464,21,25,29,307,38,-497,824,-497,52,62,-497,825,556,81,126,90,95,7',
'13,20,26,30,-262,538,466,275,50,55,59,63,68,72,76,517,303,97,502,501',
'285,288,675,-63,40,834,835,47,51,58,66,69,73,77,82,87,91,836,10,17,468',
'28,32,37,307,308,284,287,290,293,296,298,300,302,304,839,309,286,462',
'842,292,295,461,139,459,458,142,455,740,71,75,848,86,740,742,303,850',
'306,23,285,288,291,294,297,299,301,60,305,307,442,441,83,88,92,4,11',
'18,422,855,856,36,41,277,289,418,-217,416,279,21,25,29,33,38,414,862',
'863,52,62,412,865,411,81,603,90,95,7,13,20,26,30,410,603,401,872,50',
'55,59,63,68,72,76,692,693,97,694,87,91,390,675,31,40,44,46,47,51,58',
'66,69,73,77,82,87,91,126,10,17,461,28,32,37,307,308,284,287,290,293',
'296,298,300,302,304,321,309,286,388,275,292,295,384,43,360,882,53,357',
'884,71,75,341,86,887,96,303,740,306,23,285,288,291,294,297,299,301,60',
'305,312,310,889,83,88,92,4,11,18,282,275,175,36,41,603,289,152,603,128',
'466,16,21,25,29,33,38,98,603,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50',
'55,59,63,68,72,76,307,,97,322,323,324,325,326,31,40,44,46,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,307,,303,,,,285,288,322,323,324,325',
'326,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285,288,291,294',
',,301,60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62',
',,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40',
'44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,307,,,,,,,,,,,',
',,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285,288,291,294,,,301',
'60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81',
',90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46',
'47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,307,308,284,287,290,293',
'296,,,302,304,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285',
'288,291,294,297,299,301,60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25',
'29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76',
',,97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37',
'307,,,,,,,,,,,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285',
'288,291,294,,,301,60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33',
'38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97',
',,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,307',
',,,,,,,,,,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285,288',
'291,294,,,301,60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38',
',,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,',
',,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,307,308',
'284,287,290,293,296,298,,302,304,,,,,,292,295,,43,,,53,,,71,75,,86,',
'96,303,,306,23,285,288,291,294,297,299,301,60,305,,,,83,88,92,4,11,18',
',,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50',
'55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91',
',10,17,,28,32,37,307,-499,-499,-499,-499,293,296,,,-499,-499,,,,,,292',
'295,,43,,,53,,,71,75,,86,,96,303,,306,23,285,288,291,294,297,299,301',
'60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81',
',90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46',
'47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,307,-499,-499,-499,-499',
'293,296,,,-499,-499,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23',
'285,288,291,294,297,299,301,60,305,,,,83,88,92,4,11,18,,,,36,41,16,21',
'25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72',
'76,,,97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32',
'37,307,-499,-499,-499,-499,293,296,,,-499,-499,,,,,,292,295,,43,,,319',
',,71,75,,86,,96,303,,306,23,285,288,291,294,297,299,301,60,305,,,,83',
'88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13',
'20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,307,-499,-499,-499,-499,293,296,',
',-499,-499,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285,288',
'291,294,297,299,301,60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29',
'33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,',
',97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37',
'307,308,284,287,290,293,296,298,300,302,304,,-499,-499,,,292,295,,43',
',,53,,,71,75,,86,,96,303,,306,23,285,288,291,294,297,299,301,60,305',
',,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95',
'7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58',
'66,69,73,77,82,87,91,,10,17,,28,32,37,307,-499,-499,-499,-499,293,296',
',,-499,-499,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285,288',
'291,294,297,299,301,60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29',
'33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,',
',97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37',
'307,308,284,287,290,293,296,298,300,302,304,,-499,-499,,,292,295,,43',
',,53,,,71,75,,86,,96,303,,306,23,285,288,291,294,297,299,301,60,305',
',,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95',
'7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58',
'66,69,73,77,82,87,91,,10,17,,28,32,37,307,-499,-499,-499,-499,293,296',
',,-499,-499,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285,288',
'291,294,297,299,301,60,305,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29',
'33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,',
',97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37',
'307,,,,,,,,,,,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,,23,285,288',
'291,294,,,,60,,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52',
'62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31',
'40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,307,,,,,,,,',
',,,,,,,292,295,,43,,,53,,,71,75,,86,,96,303,,306,23,285,288,291,294',
',,,60,,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81',
',90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46',
'47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,43',
',,53,,,71,75,,86,,96,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,16',
'21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68',
'72,76,,,97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28',
'32,37,,,,,,,,,,,,,,,,,,,,43,,,53,,,71,75,,86,,96,,,,23,,,,,,,,60,,,',
',83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95,7',
'13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58',
'66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,43,,,53,,,71',
'75,,86,,96,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29',
'33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,',
',97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37',
',,,,,,,,,,,,,,,,,,,43,,,53,,,71,75,,86,,96,,,,23,,,,,,,,60,,,,,83,88',
'92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20',
'26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58,66,69',
'73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,43,,,53,,,71,75,',
'86,,96,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33',
'38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97',
',,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,',
',,,,,,,,,,,,,,,43,,,53,,,71,75,,86,,96,,,,23,,,,,,,,60,,,,,83,88,92',
'4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26',
'30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58,66,69,73',
'77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,43,,,53,,,71,75,,86',
',96,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38',
',,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,',
',,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,',
',,,,,,,,,,,,,43,,,53,,,71,75,,86,,96,,,,23,,,,,,,,60,,,,,83,88,92,4',
'11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30',
',,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58,66,69,73,77',
'82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,43,,,319,,,71,75,,86,,96',
',,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52',
'62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31',
'40,44,46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,',
',,,,,,,43,,,53,,,71,75,,86,,96,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18',
',,,36,41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50',
'55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91',
',10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,43,,,319,,,71,75,,86,,96,,,,23,',
',,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,16,21,25,29,33,38,,,,52,62,,',
',81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44',
'46,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,',
',43,,,53,,,71,75,,86,,96,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36',
'41,16,21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59',
'63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,43,,,53,,,71,75,,86,,96,,,,23,,,,,,',
',60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,-251,-251,-251',
',-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251',
'-251,-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251',
'-251,-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,',
',,,-251,,,-251,126,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,',
',,-251,-251,-251,-251,-251,-251,,,,-251,-251,21,25,29,,38,,,,52,62,',
',,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,,,,,,,,40,,,47',
'51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,',
',142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21',
'25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72',
'76,,,97,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,',
',,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92',
'4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30',
',,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87',
'91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23',
',,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,-251,-251,-251,,-251,,,,-251',
'-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251,-251',
'-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251,-251',
'-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,',
'-251,321,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251',
'-251,-251,-251,-251,,,,-251,-251,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,,40,,,47,51,58,66,69',
'73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75',
',86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,',
'52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,55,59,63,68,72,76,,,,,,,',
',,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,',
',,,,,139,,,142,,,71,75,,86,,339,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18',
',,,36,41,-475,-475,-475,,-475,,,,-475,-475,,,,-475,,-475,-475,-475,-475',
'-475,-475,-475,,-475,,,-475,-475,-475,-475,-475,-475,-475,,,,,,,,,,-475',
',,-475,-475,-475,-475,-475,-475,-475,-475,-475,-475,,-475,-475,,-475',
'-475,-475,,,,,,,,,,,,,,,,,,,,-475,,,-475,-475,,-475,-475,,-475,,-475',
',-475,,-475,,,,,,,,-475,,-475,,,-475,-475,-475,-475,-475,-475,,,,-475',
'-475,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63',
'68,72,76,,,97,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32',
'37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83',
'88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107',
'26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77',
'82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,',
',,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62',
',,,81,,90,95,7,106,107,26,30,,,,,114,55,59,63,68,72,76,,,,,,,,,,40,',
',47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139',
',,142,,,71,75,,86,,148,,133,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36',
'41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63',
'68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37',
',,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88',
'92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26',
'30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82',
'87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,',
',23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,',
',,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40',
',,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,',
'139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36',
'41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116',
'63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32',
'37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,682,,,,23,,,,,,,,144,,',
',,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106',
'107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,112,,,47,51,58,66,69',
'73,77,82,87,91,630,10,17,635,639,641,110,,,,,,,,,,,,,,,,,,,,171,,,142',
',,71,75,,86,,,643,,,,,,,632,633,634,638,,,,,,83,88,92,4,11,18,,,,36',
'41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63',
'68,72,76,,,97,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32',
'37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83',
'88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107',
'26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77',
'82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,',
',,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62',
',,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40',
',,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,',
'139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36',
'41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,55,59',
'63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32',
'37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,339,,,,23,,,,,,,,144,,',
',,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106',
'107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73',
'77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86',
',,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52',
'62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,,,,,,,,40,',
',47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139',
',,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21',
'25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72',
'76,,,97,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,',
',,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92',
'4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30',
',,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87',
'91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,530,,',
',23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,',
',,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40',
',,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,',
'139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36',
'41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116',
'63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32',
'37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,791,,133,,23,,,,,,,,144',
',,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106',
'107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73',
'77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86',
',,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,185,189,194,200,204',
'209,213,218,,,236,239,240,243,248,,,178,181,183,191,196,202,205,,,219',
'223,229,257,260,262,264,249,250,252,177,180,182,187,192,198,207,211',
'215,254,255,256,234,,,263,,,,,,,,193,199,,208,212,222,227,,235,238,',
',247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210',
'214,220,224,,233,,,245,265,,,21,25,29,,38,,,41,52,62,,,,81,,90,95,7',
'106,107,26,30,,,,,114,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69',
'73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75',
',86,,339,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,',
',,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,',
',,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18',
',,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,185,189,194,200,204,209,213,218,',
',236,239,240,243,248,,,178,181,183,191,196,202,205,,,219,223,229,257',
'260,262,264,249,250,252,177,180,182,187,192,198,207,211,215,254,255',
'256,234,,,263,,,,,,,,193,199,,208,212,222,227,,235,238,,,247,,,,,186',
'190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210,214,220,224',
',233,,,245,265,,,21,25,29,,38,,,41,52,62,,,,81,,90,95,7,106,107,26,30',
',,,,114,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91',
',10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,395,75,,86,,148,,133',
',23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,',
',,81,,90,95,7,106,107,26,30,,,,,114,55,59,63,68,72,76,,,,,,,,,,40,,',
'47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139',
',,142,,,71,75,,86,,148,,133,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36',
'41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,55,59',
'63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32',
'37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,339,,,,23,,,,,,,,144,,',
',,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13',
'20,26,30,,,,,50,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77',
'82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,',
',,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62',
',,,81,,90,95,7,106,107,26,30,,,,,114,55,59,63,68,72,76,,,,,,,,,,40,',
',47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139',
',,142,,,71,75,,86,,339,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41',
'21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63',
'68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37',
',,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88',
'92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26',
'30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82',
'87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,673',
',,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62',
',,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40',
',,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,',
'139,,,142,,,71,75,,86,,869,,133,,23,,,,,,,,144,,,,,83,88,92,4,11,18',
',,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55',
'59,63,68,72,76,,,97,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17',
',28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60',
',,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106',
'107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73',
'77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86',
',866,,133,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,185,189,194,200,204,209,213,218,,,236,239,240,243,248,,',
'178,181,183,191,196,202,205,,,219,223,229,257,260,262,264,249,250,252',
'177,180,182,187,192,198,207,211,215,254,255,256,234,,,263,,,,,,,,193',
'199,,208,212,222,227,,235,238,,,247,,,,,186,190,195,201,,,,,,,,,,,,',
'251,179,,184,188,197,203,206,210,214,220,224,,233,,,245,265,,,21,25',
'29,,38,,,41,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68',
'72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,',
',,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88',
'92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26',
'30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82',
'87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,',
',23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,',
',,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40',
',,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,',
'139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36',
'41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116',
'63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32',
'37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,607,,133,,23,,,,,,,,144',
',,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106',
'107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73',
'77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86',
',,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,185,189,194,200,204',
'209,213,218,,,236,239,240,243,248,,,178,181,183,191,196,202,205,,,219',
'223,229,257,260,262,264,249,250,252,177,180,182,187,192,198,207,211',
'215,254,255,256,234,261,,263,,,,,,,,193,199,,208,212,222,227,,235,238',
',,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210',
'214,220,224,,233,,,245,265,,,21,25,29,,38,,,41,52,62,,,,81,,90,95,7',
'106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,601,,133,,23,,,,,,,,144,,,,,83,88,92',
'4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30',
',,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87',
'91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23',
',,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81',
',90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58',
'66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,',
',71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29',
',38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97',
',,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,',
',,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18',
',,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,794,,133,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25',
'29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72',
'76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,',
',,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92',
'4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30',
',,,,114,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91',
',10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,339,,,,23',
',,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81',
',90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58',
'66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,',
',71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29',
',38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76',
',,,,,,,,,112,,,47,51,58,66,69,73,77,82,87,91,,10,17,,,,110,,,,,,,,,',
',,,,,,,,,,820,,,142,,,71,75,,86,,,,,,,,,,,,,,,,,,,83,88,92,4,11,18,',
',,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115',
'116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,',
'28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144',
',,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13',
'20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,,40,,,47,51,58,66,69,73',
'77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86',
',582,,133,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,',
',,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,',
',,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,',
',,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,',
',,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,55',
'59,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28',
'32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,339,,,,23,,,,,,,,144',
',,,,83,88,92,4,11,18,,,,36,41,-251,-251,-251,,-251,,,,-251,-251,,,,-251',
',-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251,-251,-251,-251,-251',
'-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251,-251,-251,-251,-251',
',-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251,126,,-251',
'-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251,-251,-251,-251',
'-251,,,,-251,-251,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30',
',,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87',
'91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,798,,133',
',23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,',
',,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,112',
',,47,51,58,66,69,73,77,82,87,91,,10,17,,,,110,,,,,,,,,,,,,,,,,,,,171',
',,142,,,71,75,,86,,,,,,,,,,,,,,,,,,,83,88,92,4,11,18,,,,36,41,21,25',
'29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72',
'76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,',
',,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92',
'4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30',
',,,,114,115,116,63,68,72,76,,,,,,,,,,112,,,47,51,162,66,69,73,163,82',
'87,91,,10,17,,,,110,,,,,,,,,,,,,,,,,,,,159,,,142,,,71,75,,86,,,,,,,',
',,,,,,,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90',
'95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58',
'66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,',
',71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29',
',38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76',
',,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,',
',,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4',
'11,18,,,,36,41,-479,-479,-479,,-479,,,,-479,-479,,,,-479,,-479,-479',
'-479,-479,-479,-479,-479,,,,,-479,-479,-479,-479,-479,-479,-479,,,,',
',,,,,-479,,,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,,-479',
'-479,,-479,-479,-479,,,,,,,,,,,,,,,,,,,,-479,,,-479,-479,,-479,-479',
',-479,,-479,,-479,,-479,,,,,,,,-479,,,,,-479,-479,-479,-479,-479,-479',
',,,-479,-479,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,',
'114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91',
',10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,',
',,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,',
'90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,112,,,47',
'51,58,66,69,73,77,82,87,91,,10,17,,,,110,,,,,,,,,,,,,,,,,,,,171,,,172',
',,71,75,,86,,173,,,,,,,,,,,,,,,,,83,88,92,4,11,18,,,,36,41,21,25,29',
',38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76',
',,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,',
',,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4',
'11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,',
',,114,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91',
',10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,601,,133',
',23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,',
',,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40',
',,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,',
'139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36',
'41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116',
'63,68,72,76,,,,,,,,,,112,,,47,51,162,66,69,73,163,82,87,91,,10,17,,',
',110,,,,,,,,,,,,,,,,,157,,,159,,,142,,,71,75,,86,,,,,,,,,,,,,,,,,,,83',
'88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107',
'26,30,,,,,114,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82',
'87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,148',
',133,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,-480,-480,-480,,-480',
',,,-480,-480,,,,-480,,-480,-480,-480,-480,-480,-480,-480,,,,,-480,-480',
'-480,-480,-480,-480,-480,,,,,,,,,,-480,,,-480,-480,-480,-480,-480,-480',
'-480,-480,-480,-480,,-480,-480,,-480,-480,-480,,,,,,,,,,,,,,,,,,,,-480',
',,-480,-480,,-480,-480,,-480,,-480,,-480,,-480,,,,,,,,-480,,,,,-480',
'-480,-480,-480,-480,-480,,,,-480,-480,21,25,29,,38,,,,52,62,,,,81,,90',
'95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,',
',,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,',
',,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18',
',,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,892,,133,,23',
',,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81',
',90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47',
'51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,',
',142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21',
'25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68',
'72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,',
',,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88',
'92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26',
'30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82',
'87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,',
',23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,',
',,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40',
',,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,',
'139,,,142,464,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,',
'36,41,21,25,29,33,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59',
'63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,43,,,53,,,71,75,,86,,96,,,,23,,,,,,',
',60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,,40,,,47,51,58,66,69',
'73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75',
',86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,',
'52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,',
',,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,',
',,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18',
',,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,-474,-474,-474,,-474,,,,-474,-474',
',,,-474,,-474,-474,-474,-474,-474,-474,-474,,-474,,,-474,-474,-474,-474',
'-474,-474,-474,,,,,,,,,,-474,,,-474,-474,-474,-474,-474,-474,-474,-474',
'-474,-474,,-474,-474,,-474,-474,-474,,,,,,,,,,,,,,,,,,,,-474,,,-474',
'-474,,-474,-474,,-474,,-474,,-474,,-474,,,,,,,,-474,,-474,,,-474,-474',
'-474,-474,-474,-474,,,,-474,-474,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11',
'18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,55,59,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,148,,133,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25',
'29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76',
',,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,',
',,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4',
'11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,',
'50,55,59,63,68,72,76,,,97,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,',
'10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,',
',,,,60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90',
'95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58',
'66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,',
',71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29',
',38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,',
',,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,',
',,,,,,,,,139,,,142,,,71,75,,86,,530,,,,23,,,,,,,,144,,,,,83,88,92,4',
'11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,',
',,114,115,116,63,68,72,76,,,,,,,,,,112,,,47,51,58,66,69,73,77,82,87',
'91,,10,17,,,,110,,,,,,,,,,,,,,,,,,,,113,,,53,,,71,75,,86,,96,,,,,,,',
',,,,,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66',
'69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71',
'75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,55,59,63,68,72,76,,,,',
',,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,',
',,,,,,,,139,,,142,,505,71,75,,86,,148,,133,,23,,,,,,,,144,,,,,83,88',
'92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30',
',,,,50,55,59,63,68,72,76,,,97,,,,,,,40,,,47,51,58,66,69,73,77,82,87',
'91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23',
',,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81',
',90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,,40,,,47,51',
'58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142',
',,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29',
',38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97',
',,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,',
',,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18',
',,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55',
'59,63,68,72,76,,,97,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17',
',28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60',
',,,,83,88,92,4,11,18,,,,36,41,21,25,29,33,38,,,,52,62,,,,81,,90,95,7',
'13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,,,,,31,40,44,46,47,51,58',
'66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,43,,,53,,,71',
'75,,86,,96,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72,76,,,97,,',
',,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,',
',,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,60,,,,,83,88,92,4,11,18',
',,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114',
'115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10',
'17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,',
',144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95',
'7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,112,,,47,51,58',
'66,69,73,77,82,87,91,,10,17,,,,110,,,,,,,,,,,,,,,,,,,,113,,,53,,,71',
'75,,86,,96,,,,,,,,,,,710,,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38',
',,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,',
',,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,',
',,,,,,,,,,139,,,142,,,71,75,,86,,772,,,,23,,,,,,,,144,,,,,83,88,92,4',
'11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,',
',,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91',
',10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,',
',,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,',
'90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51',
'58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142',
',,71,75,,86,,829,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25',
'29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30,,,,,114,115,116,63,68,72',
'76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,',
',,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92',
'4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26,30',
',,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87',
'91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,,,23',
',,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81',
',90,95,7,106,107,26,30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47',
'51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,',
',142,,,71,75,,86,,,,,,23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,21',
'25,29,,38,,,,52,62,,,,81,,90,95,7,13,20,26,30,,,,,50,55,59,63,68,72',
'76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82,87,91,,10,17,,28,32,37,,,,',
',,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,530,,,,23,,,,,,,,144,,,,,83,88',
'92,4,11,18,,,,36,41,21,25,29,,38,,,,52,62,,,,81,,90,95,7,106,107,26',
'30,,,,,114,115,116,63,68,72,76,,,,,,,,,,40,,,47,51,58,66,69,73,77,82',
'87,91,,10,17,,28,32,37,,,,,,,,,,,,,,,,,,,,139,,,142,,,71,75,,86,,,,',
',23,,,,,,,,144,,,,,83,88,92,4,11,18,,,,36,41,185,189,194,200,204,209',
'213,218,,,236,239,240,243,248,,,178,181,183,191,196,202,205,,,219,223',
'229,232,237,241,244,249,250,252,177,180,182,187,192,198,207,211,215',
'221,226,231,234,69,73,242,82,,,,,,,193,199,,208,212,222,227,,235,238',
',,247,,,,,186,190,195,201,,,,,,228,,,,,,,251,179,,184,188,197,203,206',
'210,214,220,224,,233,,,245,185,189,194,200,204,209,213,218,,,236,239',
'240,243,248,,,178,181,183,191,196,202,205,,,219,223,229,257,260,262',
'264,249,250,252,177,180,182,187,192,198,207,211,215,254,255,256,234',
'348,349,263,350,,,,,,,193,199,,208,212,222,227,,235,238,,,247,,,,,186',
'190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210,214,220,224',
',233,,,245,185,189,194,200,204,209,213,218,,,236,239,240,243,248,,,178',
'181,183,191,196,202,205,,,219,223,229,257,260,262,264,249,250,252,177',
'180,182,187,192,198,207,211,215,254,255,256,234,348,349,263,350,,,,',
',,193,199,,208,212,222,227,,235,238,,,247,,,,,186,190,195,201,,,,,,',
',,,,,,251,179,,184,188,197,203,206,210,214,220,224,,233,,,245,185,189',
'194,200,204,209,213,218,,,236,239,240,243,248,,,178,181,183,191,196',
'202,205,,,219,223,229,257,260,262,264,249,250,252,177,180,182,187,192',
'198,207,211,215,254,255,256,234,,,263,,,,,,,,193,199,,208,212,222,227',
',235,238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197',
'203,206,210,214,220,224,,233,378,379,245,,380,,,,,,,,193,199,,208,212',
'222,227,,235,238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184',
'188,197,203,206,210,214,220,224,,233,564,372,245,,565,,,,,,,,193,199',
',208,212,222,227,,235,238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251',
'179,,184,188,197,203,206,210,214,220,224,,233,513,379,245,,514,,,,,',
',,193,199,,208,212,222,227,,235,238,,,247,,,,,186,190,195,201,,,,,,',
',,,,,,251,179,,184,188,197,203,206,210,214,220,224,,233,568,379,245',
',569,,,,,,,,193,199,,208,212,222,227,,235,238,,,247,,,,,186,190,195',
'201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210,214,220,224,,233,371',
'372,245,,374,,,,,,,,193,199,,208,212,222,227,,235,238,,,247,,,,,186',
'190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210,214,220,224',
',233,610,372,245,,611,,,,,,,,193,199,,208,212,222,227,,235,238,,,247',
',,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210,214',
'220,224,,233,513,379,245,,514,,,,,,,,193,199,,208,212,222,227,,235,238',
',,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210',
'214,220,224,,233,513,379,245,,514,,,,,,,,193,199,,208,212,222,227,,235',
'238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206',
'210,214,220,224,,233,876,372,245,,877,,,,,,,,193,199,,208,212,222,227',
',235,238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197',
'203,206,210,214,220,224,,233,513,379,245,,514,,,,,,,,193,199,,208,212',
'222,227,,235,238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184',
'188,197,203,206,210,214,220,224,,233,595,379,245,,596,,,,,,,,193,199',
',208,212,222,227,,235,238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251',
'179,,184,188,197,203,206,210,214,220,224,,233,513,379,245,,514,,,,,',
',,193,199,,208,212,222,227,,235,238,,,247,,,,,186,190,195,201,,,,,,',
',,,,,,251,179,,184,188,197,203,206,210,214,220,224,,233,592,372,245',
',593,,,,,,,,193,199,,208,212,222,227,,235,238,,,247,,,,,186,190,195',
'201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210,214,220,224,,233,595',
'379,245,,596,,,,,,,,193,199,,208,212,222,227,,235,238,,,247,,,,,186',
'190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210,214,220,224',
',233,617,372,245,,618,,,,,,,,193,199,,208,212,222,227,,235,238,,,247',
',,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210,214',
'220,224,,233,,,245,307,308,284,287,290,293,296,298,300,302,304,,309',
'286,,,292,295,,,,,,,,,,,,,,303,,306,,285,288,291,294,297,299,301,,305',
',,,,,,620,379,,,621,,,,,289,,603,193,199,,208,212,222,227,,235,238,',
',247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206,210',
'214,220,224,,233,592,372,245,,593,,,,,,,,193,199,,208,212,222,227,,235',
'238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197,203,206',
'210,214,220,224,,233,879,379,245,,880,,,,,,,,193,199,,208,212,222,227',
',235,238,,,247,,,,,186,190,195,201,,,,,,,,,,,,,251,179,,184,188,197',
'203,206,210,214,220,224,,233,,,245,307,308,284,287,290,293,296,298,300',
'302,304,,309,286,,,292,295,,,,-217,,,,,,,,,,303,,306,,285,288,291,294',
'297,299,301,,305,,,,,,,,,,,,,,,,289,,-217,307,308,284,287,290,293,296',
'298,300,302,304,,309,286,,,292,295,,,,,,,,,,,,,,303,,306,,285,288,291',
'294,297,299,301,,305,,307,308,284,287,290,293,296,298,300,302,304,,309',
'286,289,659,292,295,,,,,,,,,,,,,,303,,306,,285,288,291,294,297,299,301',
',305,307,308,284,287,290,293,296,298,300,302,304,,309,286,,289,292,295',
',,,,,,,,,,,,,303,,306,,285,288,291,294,297,299,301,,305,307,308,284',
'287,290,293,296,298,300,302,304,,309,286,,289,292,295,,,,,,,,,,,,,,303',
',306,,285,288,291,294,297,299,301,,305,307,308,284,287,290,293,296,298',
'300,302,304,,309,286,275,289,292,295,,,,,,,,,,,,,,303,,306,,285,288',
'291,294,297,299,301,,305,307,308,284,287,290,293,296,298,300,302,304',
',309,286,,289,292,295,,,,,,,,,,,,,,303,,306,,285,288,291,294,297,299',
'301,,305,307,308,284,287,290,293,296,298,300,302,304,,309,286,275,289',
'292,295,,,,,,,,,,,,,,303,,306,,285,288,291,294,297,299,301,,305,307',
'308,284,287,290,293,296,298,300,302,304,,309,286,,289,292,295,,,,,,',
',,,,,,,303,,306,,285,288,291,294,297,299,301,,305,307,308,284,287,290',
'293,296,298,300,302,304,,309,286,,289,292,295,,,,,,,,,,,,,,303,,306',
',285,288,291,294,297,299,301,,305,307,308,284,287,290,293,296,298,300',
'302,304,,309,286,,289,292,295,,,,,,,,,,,,,,303,,306,,285,288,291,294',
'297,299,301,,305,307,308,284,287,290,293,296,298,300,302,304,,309,286',
',289,292,295,,,,,,,,,,,,,,303,,306,,285,288,291,294,297,299,301,,305',
'307,308,284,287,290,293,296,298,300,302,304,,309,286,,289,292,295,,',
',,,,,,,,,,,303,,306,,285,288,291,294,297,299,301,,305,307,308,284,287',
'290,293,296,298,300,302,304,,309,286,,289,292,295,,,,,,,,,,,,,,303,',
'306,,285,288,291,294,297,299,301,,305,307,308,284,287,290,293,296,298',
'300,302,304,,309,286,,289,292,295,,,,,,,,,,,,,,303,,306,,285,288,291',
'294,297,299,301,,305,307,308,284,287,290,293,296,298,300,302,304,,309',
'286,,289,292,295,,,,,,,,,,,,,,303,,306,,285,288,291,294,297,299,301',
',305,307,308,284,287,290,293,296,298,300,302,304,,309,286,,289,292,295',
',,,,,,,,,,,,,303,,306,,285,288,291,294,297,299,301,,305,,,,,,,,,,,,',
',,,289' ]
        racc_action_table = arr = Array.new(23880, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'374,757,644,644,9,569,848,374,374,374,664,111,65,374,374,161,374,705',
'12,65,579,151,571,159,613,1,12,159,392,613,496,8,680,876,108,374,374',
'736,374,374,374,374,374,879,736,595,340,664,596,340,138,848,848,848',
'848,571,706,880,315,99,579,392,99,496,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,545,549,374,374,374,151,374,630,569,9,374,644',
'736,595,111,8,596,374,138,374,705,374,374,374,374,374,374,374,569,374',
'876,374,640,757,111,757,8,108,757,161,705,99,99,388,374,374,371,374',
'823,374,374,642,374,371,371,371,568,108,161,371,371,620,371,161,680',
'876,680,876,629,680,876,371,391,105,706,879,706,879,331,706,879,371',
'371,134,371,371,371,371,371,880,315,880,315,399,880,315,545,549,545',
'549,399,545,549,625,354,391,411,354,656,656,371,371,371,371,371,371',
'371,371,371,371,371,371,371,371,388,620,371,371,371,134,371,402,565',
'344,371,105,338,568,344,338,399,371,620,371,388,371,371,371,371,371',
'371,371,411,371,371,371,105,568,823,355,823,656,620,823,130,162,623',
'620,371,371,66,371,725,371,371,647,371,66,66,66,226,648,66,66,66,621',
'66,226,331,619,331,402,402,331,261,565,66,66,261,261,402,564,828,650',
'828,66,66,819,66,66,66,66,66,565,819,162,556,653,725,355,355,355,162',
'345,130,130,130,162,359,352,110,110,352,565,66,66,66,66,66,66,66,66',
'66,66,66,66,66,66,162,621,66,66,66,655,42,66,612,556,66,42,819,66,556',
'66,564,66,621,66,162,66,66,66,66,66,66,66,749,66,605,66,155,658,564',
'345,345,345,621,155,359,359,359,621,66,66,66,66,603,66,66,592,592,592',
'564,592,734,430,602,592,592,734,430,163,592,617,592,592,592,592,592',
'592,592,749,749,749,749,592,592,592,592,592,592,592,889,155,600,132',
'378,666,636,889,610,592,132,636,592,592,592,592,592,592,592,592,592',
'592,671,592,592,232,592,592,592,163,611,617,232,342,594,342,163,611',
'617,241,167,163,611,617,588,378,241,167,592,592,378,592,592,889,592',
'592,132,592,610,592,618,592,163,592,617,610,216,618,104,585,610,592',
'618,216,678,104,592,592,592,592,592,592,163,611,617,592,592,231,593',
'593,593,610,593,167,231,592,593,593,334,334,583,593,681,593,593,593',
'593,593,593,593,282,610,580,618,593,593,593,593,593,593,593,104,237',
'683,168,244,426,426,689,237,593,168,244,593,593,593,593,593,593,593',
'593,593,593,723,593,593,242,593,593,593,723,282,221,242,37,37,282,567',
'429,221,566,818,34,34,170,429,631,877,818,593,593,170,593,593,877,593',
'593,168,593,877,593,563,593,22,593,557,817,855,442,552,723,543,593,817',
'855,442,512,593,593,593,593,593,593,512,512,512,593,593,512,512,512',
'429,512,534,818,709,593,170,532,6,877,78,512,712,22,529,6,715,78,22',
'516,512,512,719,512,512,512,512,512,817,855,442,165,720,477,881,881',
'314,314,165,515,643,740,740,643,643,643,515,515,515,380,722,515,515',
'515,803,515,504,803,803,803,512,6,39,78,477,515,503,512,477,477,477',
'477,512,512,515,515,502,515,515,515,515,515,480,500,165,643,643,643',
'643,495,380,728,803,747,512,380,747,747,747,803,803,803,803,39,662,662',
'492,512,39,512,731,488,512,480,515,735,486,480,480,480,480,515,473,470',
'460,745,515,515,443,420,750,751,486,486,417,400,398,397,747,747,747',
'747,57,57,57,57,57,486,515,486,396,486,486,486,486,387,81,81,81,476',
'81,515,765,515,81,81,515,767,375,81,369,81,81,81,81,81,81,81,771,353',
'343,337,81,81,81,81,81,81,81,335,476,81,318,317,476,476,527,316,81,785',
'787,81,81,81,81,81,81,81,81,81,81,790,81,81,283,81,81,81,527,527,527',
'527,527,527,527,527,527,527,527,792,527,527,274,795,527,527,273,81,272',
'271,81,268,807,81,81,809,81,810,812,527,813,527,81,527,527,527,527,527',
'527,527,81,527,266,171,169,81,81,81,81,81,81,152,820,822,81,81,81,527',
'149,527,147,81,278,278,278,278,278,146,830,831,278,278,145,833,139,278',
'838,278,278,278,278,278,278,278,136,841,128,844,278,278,278,278,278',
'278,278,551,551,278,551,551,551,120,598,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,116,278,278,851,278,278,278,598,598,598',
'598,598,598,598,598,598,598,598,115,598,598,113,112,598,598,109,278',
'94,864,278,89,867,278,278,80,278,873,278,598,874,598,278,598,598,598',
'598,598,598,598,278,598,49,46,878,278,278,278,278,278,278,43,40,27,278',
'278,883,598,18,886,11,278,763,763,763,763,763,763,3,894,,763,763,,,',
'763,,763,763,763,763,763,763,763,,,,,763,763,763,763,763,763,763,479',
',763,465,465,465,465,465,763,763,763,763,763,763,763,763,763,763,763',
'763,763,763,,763,763,,763,763,763,482,,479,,,,479,479,150,150,150,150',
'150,,,,482,482,,763,,,763,,,763,763,,763,,763,482,,482,763,482,482,482',
'482,,,482,763,482,,,,763,763,763,763,763,763,,,,763,763,800,800,800',
'800,800,800,,,,800,800,,,,800,,800,800,800,800,800,800,800,,,,,800,800',
'800,800,800,800,800,,,800,,,,,,800,800,800,800,800,800,800,800,800,800',
'800,800,800,800,,800,800,,800,800,800,481,,,,,,,,,,,,,,,,481,481,,800',
',,800,,,800,800,,800,,800,481,,481,800,481,481,481,481,,,481,800,481',
',,,800,800,800,800,800,800,,,,800,800,816,816,816,816,816,816,,,,816',
'816,,,,816,,816,816,816,816,816,816,816,,,,,816,816,816,816,816,816',
'816,,,816,,,,,,816,816,816,816,816,816,816,816,816,816,816,816,816,816',
',816,816,,816,816,816,483,483,483,483,483,483,483,,,483,483,,,,,,483',
'483,,816,,,816,,,816,816,,816,,816,483,,483,816,483,483,483,483,483',
'483,483,816,483,,,,816,816,816,816,816,816,,,,816,816,637,637,637,637',
'637,637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,,637,637,637',
'637,637,637,637,,,637,,,,,,637,637,637,637,637,637,637,637,637,637,637',
'637,637,637,,637,637,,637,637,637,484,,,,,,,,,,,,,,,,484,484,,637,,',
'637,,,637,637,,637,,637,484,,484,637,484,484,484,484,,,484,637,484,',
',,637,637,637,637,637,637,,,,637,637,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2',
'2,2,2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2',
',2,2,2,478,,,,,,,,,,,,,,,,478,478,,2,,,2,,,2,2,,2,,2,478,,478,2,478',
'478,478,478,,,478,2,478,,,,2,2,2,2,2,2,,,,2,2,784,784,784,784,784,784',
',,,784,784,,,,784,,784,784,784,784,784,784,784,,,,,784,784,784,784,784',
'784,784,,,784,,,,,,784,784,784,784,784,784,784,784,784,784,784,784,784',
'784,,784,784,,784,784,784,485,485,485,485,485,485,485,485,,485,485,',
',,,,485,485,,784,,,784,,,784,784,,784,,784,485,,485,784,485,485,485',
'485,485,485,485,784,485,,,,784,784,784,784,784,784,,,,784,784,511,511',
'511,511,511,511,,,,511,511,,,,511,,511,511,511,511,511,511,511,,,,,511',
'511,511,511,511,511,511,,,511,,,,,,511,511,511,511,511,511,511,511,511',
'511,511,511,511,511,,511,511,,511,511,511,487,487,487,487,487,487,487',
',,487,487,,,,,,487,487,,511,,,511,,,511,511,,511,,511,487,,487,511,487',
'487,487,487,487,487,487,511,487,,,,511,511,511,511,511,511,,,,511,511',
'779,779,779,779,779,779,,,,779,779,,,,779,,779,779,779,779,779,779,779',
',,,,779,779,779,779,779,779,779,,,779,,,,,,779,779,779,779,779,779,779',
'779,779,779,779,779,779,779,,779,779,,779,779,779,475,475,475,475,475',
'475,475,,,475,475,,,,,,475,475,,779,,,779,,,779,779,,779,,779,475,,475',
'779,475,475,475,475,475,475,475,779,475,,,,779,779,779,779,779,779,',
',,779,779,172,172,172,172,172,172,,,,172,172,,,,172,,172,172,172,172',
'172,172,172,,,,,172,172,172,172,172,172,172,,,172,,,,,,172,172,172,172',
'172,172,172,172,172,172,172,172,172,172,,172,172,,172,172,172,489,489',
'489,489,489,489,489,,,489,489,,,,,,489,489,,172,,,172,,,172,172,,172',
',172,489,,489,172,489,489,489,489,489,489,489,172,489,,,,172,172,172',
'172,172,172,,,,172,172,310,310,310,310,310,310,,,,310,310,,,,310,,310',
'310,310,310,310,310,310,,,,,310,310,310,310,310,310,310,,,310,,,,,,310',
'310,310,310,310,310,310,310,310,310,310,310,310,310,,310,310,,310,310',
'310,472,472,472,472,472,472,472,,,472,472,,,,,,472,472,,310,,,310,,',
'310,310,,310,,310,472,,472,310,472,472,472,472,472,472,472,310,472,',
',,310,310,310,310,310,310,,,,310,310,498,498,498,498,498,498,,,,498',
'498,,,,498,,498,498,498,498,498,498,498,,,,,498,498,498,498,498,498',
'498,,,498,,,,,,498,498,498,498,498,498,498,498,498,498,498,498,498,498',
',498,498,,498,498,498,471,471,471,471,471,471,471,471,471,471,471,,471',
'471,,,471,471,,498,,,498,,,498,498,,498,,498,471,,471,498,471,471,471',
'471,471,471,471,498,471,,,,498,498,498,498,498,498,,,,498,498,755,755',
'755,755,755,755,,,,755,755,,,,755,,755,755,755,755,755,755,755,,,,,755',
'755,755,755,755,755,755,,,755,,,,,,755,755,755,755,755,755,755,755,755',
'755,755,755,755,755,,755,755,,755,755,755,493,493,493,493,493,493,493',
',,493,493,,,,,,493,493,,755,,,755,,,755,755,,755,,755,493,,493,755,493',
'493,493,493,493,493,493,755,493,,,,755,755,755,755,755,755,,,,755,755',
'832,832,832,832,832,832,,,,832,832,,,,832,,832,832,832,832,832,832,832',
',,,,832,832,832,832,832,832,832,,,832,,,,,,832,832,832,832,832,832,832',
'832,832,832,832,832,832,832,,832,832,,832,832,832,494,494,494,494,494',
'494,494,494,494,494,494,,494,494,,,494,494,,832,,,832,,,832,832,,832',
',832,494,,494,832,494,494,494,494,494,494,494,832,494,,,,832,832,832',
'832,832,832,,,,832,832,142,142,142,142,142,142,,,,142,142,,,,142,,142',
'142,142,142,142,142,142,,,,,142,142,142,142,142,142,142,,,142,,,,,,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,,142,142,,142,142',
'142,469,469,469,469,469,469,469,,,469,469,,,,,,469,469,,142,,,142,,',
'142,142,,142,,142,469,,469,142,469,469,469,469,469,469,469,142,469,',
',,142,142,142,142,142,142,,,,142,142,616,616,616,616,616,616,,,,616',
'616,,,,616,,616,616,616,616,616,616,616,,,,,616,616,616,616,616,616',
'616,,,616,,,,,,616,616,616,616,616,616,616,616,616,616,616,616,616,616',
',616,616,,616,616,616,491,,,,,,,,,,,,,,,,491,491,,616,,,616,,,616,616',
',616,,616,491,,,616,491,491,491,491,,,,616,,,,,616,616,616,616,616,616',
',,,616,616,845,845,845,845,845,845,,,,845,845,,,,845,,845,845,845,845',
'845,845,845,,,,,845,845,845,845,845,845,845,,,845,,,,,,845,845,845,845',
'845,845,845,845,845,845,845,845,845,845,,845,845,,845,845,845,490,,',
',,,,,,,,,,,,,490,490,,845,,,845,,,845,845,,845,,845,490,,490,845,490',
'490,490,490,,,,845,,,,,845,845,845,845,845,845,,,,845,845,38,38,38,38',
'38,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,38,38,38,38,38,38,38',
',,38,,,,,,38,38,38,38,38,38,38,38,38,38,38,38,38,38,,38,38,,38,38,38',
',,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,38,,38,,,,38,,,,,,,,38,,,,,38,38',
'38,38,38,38,,,,38,38,445,445,445,445,445,445,,,,445,445,,,,445,,445',
'445,445,445,445,445,445,,,,,445,445,445,445,445,445,445,,,445,,,,,,445',
'445,445,445,445,445,445,445,445,445,445,445,445,445,,445,445,,445,445',
'445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,445,,445,,,,445,,,,,,,,445',
',,,,445,445,445,445,445,445,,,,445,445,774,774,774,774,774,774,,,,774',
'774,,,,774,,774,774,774,774,774,774,774,,,,,774,774,774,774,774,774',
'774,,,774,,,,,,774,774,774,774,774,774,774,774,774,774,774,774,774,774',
',774,774,,774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,774,,774',
',,,774,,,,,,,,774,,,,,774,774,774,774,774,774,,,,774,774,468,468,468',
'468,468,468,,,,468,468,,,,468,,468,468,468,468,468,468,468,,,,,468,468',
'468,468,468,468,468,,,468,,,,,,468,468,468,468,468,468,468,468,468,468',
'468,468,468,468,,468,468,,468,468,468,,,,,,,,,,,,,,,,,,,,468,,,468,',
',468,468,,468,,468,,,,468,,,,,,,,468,,,,,468,468,468,468,468,468,,,',
'468,468,531,531,531,531,531,531,,,,531,531,,,,531,,531,531,531,531,531',
'531,531,,,,,531,531,531,531,531,531,531,,,531,,,,,,531,531,531,531,531',
'531,531,531,531,531,531,531,531,531,,531,531,,531,531,531,,,,,,,,,,',
',,,,,,,,,531,,,531,,,531,531,,531,,531,,,,531,,,,,,,,531,,,,,531,531',
'531,531,531,531,,,,531,531,711,711,711,711,711,711,,,,711,711,,,,711',
',711,711,711,711,711,711,711,,,,,711,711,711,711,711,711,711,,,711,',
',,,,711,711,711,711,711,711,711,711,711,711,711,711,711,711,,711,711',
',711,711,711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711,711,,711,,711,,,,711',
',,,,,,,711,,,,,711,711,711,711,711,711,,,,711,711,857,857,857,857,857',
'857,,,,857,857,,,,857,,857,857,857,857,857,857,857,,,,,857,857,857,857',
'857,857,857,,,857,,,,,,857,857,857,857,857,857,857,857,857,857,857,857',
'857,857,,857,857,,857,857,857,,,,,,,,,,,,,,,,,,,,857,,,857,,,857,857',
',857,,857,,,,857,,,,,,,,857,,,,,857,857,857,857,857,857,,,,857,857,708',
'708,708,708,708,708,,,,708,708,,,,708,,708,708,708,708,708,708,708,',
',,,708,708,708,708,708,708,708,,,708,,,,,,708,708,708,708,708,708,708',
'708,708,708,708,708,708,708,,708,708,,708,708,708,,,,,,,,,,,,,,,,,,',
',708,,,708,,,708,708,,708,,708,,,,708,,,,,,,,708,,,,,708,708,708,708',
'708,708,,,,708,708,319,319,319,319,319,319,,,,319,319,,,,319,,319,319',
'319,319,319,319,319,,,,,319,319,319,319,319,319,319,,,319,,,,,,319,319',
'319,319,319,319,319,319,319,319,319,319,319,319,,319,319,,319,319,319',
',,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,319,,319,,,,319,,,,,,,,319,',
',,,319,319,319,319,319,319,,,,319,319,550,550,550,550,550,550,,,,550',
'550,,,,550,,550,550,550,550,550,550,550,,,,,550,550,550,550,550,550',
'550,,,550,,,,,,550,550,550,550,550,550,550,550,550,550,550,550,550,550',
',550,550,,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550,,,550,550,,550,,550',
',,,550,,,,,,,,550,,,,,550,550,550,550,550,550,,,,550,550,53,53,53,53',
'53,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,53,53,53,53,53,53,53',
',,53,,,,,,53,53,53,53,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53',
',,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,53,,53,,,,53,,,,,,,,53,,,,,53,53',
'53,53,53,53,,,,53,53,778,778,778,778,778,778,,,,778,778,,,,778,,778',
'778,778,778,778,778,778,,,,,778,778,778,778,778,778,778,,,778,,,,,,778',
'778,778,778,778,778,778,778,778,778,778,778,778,778,,778,778,,778,778',
'778,,,,,,,,,,,,,,,,,,,,778,,,778,,,778,778,,778,,778,,,,778,,,,,,,,778',
',,,,778,778,778,778,778,778,,,,778,778,649,649,649,649,649,649,,,,649',
'649,,,,649,,649,649,649,649,649,649,649,,,,,649,649,649,649,649,649',
'649,,,649,,,,,,649,649,649,649,649,649,649,649,649,649,649,649,649,649',
',649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,649,,649',
',,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,288,288,288',
',288,,,,288,288,,,,288,,288,288,288,288,288,288,288,,,,,288,288,288',
'288,288,288,288,,,,,,,,,,288,,,288,288,288,288,288,288,288,288,288,288',
',288,288,,288,288,288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,288,,',
',,,288,,,,,,,,288,,,,,288,288,288,288,288,288,,,,288,288,59,59,59,,59',
',,,59,59,,,,59,,59,59,59,59,59,59,59,,,,,59,59,59,59,59,59,59,,,,,,',
',,,59,,,59,59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,',
',,,,,,59,,,59,59,,59,59,,59,,59,,59,,59,,,,,,,,59,,,,,59,59,59,59,59',
'59,,,,59,59,60,60,60,,60,,,,60,60,,,,60,,60,60,60,60,60,60,60,,,,,60',
'60,60,60,60,60,60,,,,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,,60,60',
',60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,60,,,,,,60,,,,,,,,60,',
',,,60,60,60,60,60,60,,,,60,60,62,62,62,,62,,,,62,62,,,,62,,62,62,62',
'62,62,62,62,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62',
'62,62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,',
'62,,,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,537,537,537,,537',
',,,537,537,,,,537,,537,537,537,537,537,537,537,,,,,537,537,537,537,537',
'537,537,,,,,,,,,,537,,,537,537,537,537,537,537,537,537,537,537,,537',
'537,,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,537,,,,,,537',
',,,,,,,537,,,,,537,537,537,537,537,537,,,,537,537,55,55,55,,55,,,,55',
'55,,,,55,,55,55,55,55,55,55,55,,,,,55,55,55,55,55,55,55,,,,,,,,,,55',
',,55,55,55,55,55,55,55,55,55,55,,55,55,,55,55,55,,,,,,,,,,,,,,,,,,,',
'55,,,55,55,,55,55,,55,,55,,55,,55,,,,,,,,55,,,,,55,55,55,55,55,55,,',
',55,55,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,71,71,71',
'71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,71,71,,71,71,,71',
'71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,71,,,,,,71,,,,,,,,71,,,,,71',
'71,71,71,71,71,,,,71,71,75,75,75,,75,,,,75,75,,,,75,,75,75,75,75,75',
'75,75,,,,,75,75,75,75,75,75,75,,,,,,,,,,75,,,75,75,75,75,75,75,75,75',
'75,75,,75,75,,75,75,75,,,,,,,,,,,,,,,,,,,,75,,,75,,,75,75,,75,,75,,',
',75,,,,,,,,75,,,,,75,75,75,75,75,75,,,,75,75,77,77,77,,77,,,,77,77,',
',,77,,77,77,77,77,77,77,77,,77,,,77,77,77,77,77,77,77,,,,,,,,,,77,,',
'77,77,77,77,77,77,77,77,77,77,,77,77,,77,77,77,,,,,,,,,,,,,,,,,,,,77',
',,77,77,,77,77,,77,,77,,77,,77,,,,,,,,77,,77,,,77,77,77,77,77,77,,,',
'77,77,52,52,52,,52,,,,52,52,,,,52,,52,52,52,52,52,52,52,,,,,52,52,52',
'52,52,52,52,,,52,,,,,,,52,,,52,52,52,52,52,52,52,52,52,52,,52,52,,52',
'52,52,,,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,52,,,,,,52,,,,,,,,52,,,,,52',
'52,52,52,52,52,,,,52,52,869,869,869,,869,,,,869,869,,,,869,,869,869',
'869,869,869,869,869,,,,,869,869,869,869,869,869,869,,,,,,,,,,869,,,869',
'869,869,869,869,869,869,869,869,869,,869,869,,869,869,869,,,,,,,,,,',
',,,,,,,,,869,,,869,,,869,869,,869,,,,,,869,,,,,,,,869,,,,,869,869,869',
'869,869,869,,,,869,869,50,50,50,,50,,,,50,50,,,,50,,50,50,50,50,50,50',
'50,,,,,50,50,50,50,50,50,50,,,,,,,,,,50,,,50,50,50,50,50,50,50,50,50',
'50,,50,50,,50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,,50,50,,50,,50,,50,',
'50,,,,,,,,50,,,,,50,50,50,50,50,50,,,,50,50,554,554,554,,554,,,,554',
'554,,,,554,,554,554,554,554,554,554,554,,,,,554,554,554,554,554,554',
'554,,,,,,,,,,554,,,554,554,554,554,554,554,554,554,554,554,,554,554',
',554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,554,,,,,,554,,',
',,,,,554,,,,,554,554,554,554,554,554,,,,554,554,86,86,86,,86,,,,86,86',
',,,86,,86,86,86,86,86,86,86,,,,,86,86,86,86,86,86,86,,,,,,,,,,86,,,86',
'86,86,86,86,86,86,86,86,86,,86,86,,86,86,86,,,,,,,,,,,,,,,,,,,,86,,',
'86,,,86,86,,86,,,,,,86,,,,,,,,86,,,,,86,86,86,86,86,86,,,,86,86,866',
'866,866,,866,,,,866,866,,,,866,,866,866,866,866,866,866,866,,,,,866',
'866,866,866,866,866,866,,,,,,,,,,866,,,866,866,866,866,866,866,866,866',
'866,866,,866,866,,866,866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866',
',866,,,,,,866,,,,,,,,866,,,,,866,866,866,866,866,866,,,,866,866,533',
'533,533,,533,,,,533,533,,,,533,,533,533,533,533,533,533,533,,,,,533',
'533,533,533,533,533,533,,,,,,,,,,533,,,533,533,533,533,533,533,533,533',
'533,533,,533,533,,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533',
',533,,533,,,,533,,,,,,,,533,,,,,533,533,533,533,533,533,,,,533,533,96',
'96,96,,96,,,,96,96,,,,96,,96,96,96,96,96,96,96,,,,,96,96,96,96,96,96',
'96,,,,,,,,,,96,,,96,96,96,96,96,96,96,96,96,96,449,96,96,449,449,449',
'96,,,,,,,,,,,,,,,,,,,,96,,,96,,,96,96,,96,,,449,,,,,,,449,449,449,449',
',,,,,96,96,96,96,96,96,,,,96,96,97,97,97,,97,,,,97,97,,,,97,,97,97,97',
'97,97,97,97,,,,,97,97,97,97,97,97,97,,,97,,,,,,,97,,,97,97,97,97,97',
'97,97,97,97,97,,97,97,,97,97,97,,,,,,,,,,,,,,,,,,,,97,,,97,,,97,97,',
'97,,,,,,97,,,,,,,,97,,,,,97,97,97,97,97,97,,,,97,97,555,555,555,,555',
',,,555,555,,,,555,,555,555,555,555,555,555,555,,,,,555,555,555,555,555',
'555,555,,,,,,,,,,555,,,555,555,555,555,555,555,555,555,555,555,,555',
'555,,555,555,555,,,,,,,,,,,,,,,,,,,,555,,,555,,,555,555,,555,,,,,,555',
',,,,,,,555,,,,,555,555,555,555,555,555,,,,555,555,530,530,530,,530,',
',,530,530,,,,530,,530,530,530,530,530,530,530,,,,,530,530,530,530,530',
'530,530,,,,,,,,,,530,,,530,530,530,530,530,530,530,530,530,530,,530',
'530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,530,,,,,,530',
',,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,102,102,102,,102,',
',,102,102,,,,102,,102,102,102,102,102,102,102,,,,,102,102,102,102,102',
'102,102,,,,,,,,,,102,,,102,102,102,102,102,102,102,102,102,102,,102',
'102,,102,102,102,,,,,,,,,,,,,,,,,,,,102,,,102,,,102,102,,102,,102,,',
',102,,,,,,,,102,,,,,102,102,102,102,102,102,,,,102,102,467,467,467,',
'467,,,,467,467,,,,467,,467,467,467,467,467,467,467,,,,,467,467,467,467',
'467,467,467,,,,,,,,,,467,,,467,467,467,467,467,467,467,467,467,467,',
'467,467,,467,467,467,,,,,,,,,,,,,,,,,,,,467,,,467,,,467,467,,467,,,',
',,467,,,,,,,,467,,,,,467,467,467,467,467,467,,,,467,467,561,561,561',
',561,,,,561,561,,,,561,,561,561,561,561,561,561,561,,,,,561,561,561',
'561,561,561,561,,,,,,,,,,561,,,561,561,561,561,561,561,561,561,561,561',
',561,561,,561,561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,561,,',
',,,561,,,,,,,,561,,,,,561,561,561,561,561,561,,,,561,561,464,464,464',
',464,,,,464,464,,,,464,,464,464,464,464,464,464,464,,,,,464,464,464',
'464,464,464,464,,,464,,,,,,,464,,,464,464,464,464,464,464,464,464,464',
'464,,464,464,,464,464,464,,,,,,,,,,,,,,,,,,,,464,,,464,,,464,464,,464',
',,,,,464,,,,,,,,464,,,,,464,464,464,464,464,464,,,,464,464,461,461,461',
',461,,,,461,461,,,,461,,461,461,461,461,461,461,461,,,,,461,461,461',
'461,461,461,461,,,,,,,,,,461,,,461,461,461,461,461,461,461,461,461,461',
',461,461,,461,461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461,,461,,461',
',,,461,,,,,,,,461,,,,,461,461,461,461,461,461,,,,461,461,742,742,742',
',742,,,,742,742,,,,742,,742,742,742,742,742,742,742,,,,,742,742,742',
'742,742,742,742,,,,,,,,,,742,,,742,742,742,742,742,742,742,742,742,742',
',742,742,,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,742,,',
',,,742,,,,,,,,742,,,,,742,742,742,742,742,742,,,,742,742,713,713,713',
',713,,,,713,713,,,,713,,713,713,713,713,713,713,713,,,,,713,713,713',
'713,713,713,713,,,,,,,,,,713,,,713,713,713,713,713,713,713,713,713,713',
',713,713,,713,713,713,,,,,,,,,,,,,,,,,,,,713,,,713,,,713,713,,713,,713',
',713,,713,,,,,,,,713,,,,,713,713,713,713,713,713,,,,713,713,458,458',
'458,,458,,,,458,458,,,,458,,458,458,458,458,458,458,458,,,,,458,458',
'458,458,458,458,458,,,,,,,,,,458,,,458,458,458,458,458,458,458,458,458',
'458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,458',
',,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458,,,,458,458,451,451,451',
'451,451,451,451,451,,,451,451,451,451,451,,,451,451,451,451,451,451',
'451,,,451,451,451,451,451,451,451,451,451,451,451,451,451,451,451,451',
'451,451,451,451,451,451,451,,,451,,,,,,,,451,451,,451,451,451,451,,451',
'451,,,451,,,,,451,451,451,451,,,,,,,,,,,,,451,451,,451,451,451,451,451',
'451,451,451,451,,451,,,451,451,,,853,853,853,,853,,,451,853,853,,,,853',
',853,853,853,853,853,853,853,,,,,853,853,853,853,853,853,853,,,,,,,',
',,853,,,853,853,853,853,853,853,853,853,853,853,,853,853,,853,853,853',
',,,,,,,,,,,,,,,,,,,853,,,853,,,853,853,,853,,853,,,,853,,,,,,,,853,',
',,,853,853,853,853,853,853,,,,853,853,450,450,450,,450,,,,450,450,,',
',450,,450,450,450,450,450,450,450,,,,,450,450,450,450,450,450,450,,',
'450,,,,,,,450,,,450,450,450,450,450,450,450,450,450,450,,450,450,,450',
'450,450,,,,,,,,,,,,,,,,,,,,450,,,450,,,450,450,,450,,,,,,450,,,,,,,',
'450,,,,,450,450,450,450,450,450,,,,450,450,524,524,524,,524,,,,524,524',
',,,524,,524,524,524,524,524,524,524,,,,,524,524,524,524,524,524,524',
',,,,,,,,,524,,,524,524,524,524,524,524,524,524,524,524,,524,524,,524',
'524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,524,,,,,,524,,,,,,,',
'524,,,,,524,524,524,524,524,524,,,,524,524,646,646,646,646,646,646,646',
'646,,,646,646,646,646,646,,,646,646,646,646,646,646,646,,,646,646,646',
'646,646,646,646,646,646,646,646,646,646,646,646,646,646,646,646,646',
'646,646,646,,,646,,,,,,,,646,646,,646,646,646,646,,646,646,,,646,,,',
',646,646,646,646,,,,,,,,,,,,,646,646,,646,646,646,646,646,646,646,646',
'646,,646,,,646,646,,,124,124,124,,124,,,646,124,124,,,,124,,124,124',
'124,124,124,124,124,,,,,124,124,124,124,124,124,124,,,,,,,,,,124,,,124',
'124,124,124,124,124,124,124,124,124,,124,124,,124,124,124,,,,,,,,,,',
',,,,,,,,,124,,,124,,,124,124,,124,,124,,124,,124,,,,,,,,124,,,,,124',
'124,124,124,124,124,,,,124,124,126,126,126,,126,,,,126,126,,,,126,,126',
'126,126,126,126,126,126,,,,,126,126,126,126,126,126,126,,,,,,,,,,126',
',,126,126,126,126,126,126,126,126,126,126,,126,126,,126,126,126,,,,',
',,,,,,,,,,,,,,,126,,,126,,,126,126,,126,,126,,126,,126,,,,,,,,126,,',
',,126,126,126,126,126,126,,,,126,126,439,439,439,,439,,,,439,439,,,',
'439,,439,439,439,439,439,439,439,,,,,439,439,439,439,439,439,439,,,',
',,,,,,439,,,439,439,439,439,439,439,439,439,439,439,,439,439,,439,439',
'439,,,,,,,,,,,,,,,,,,,,439,,,439,,,439,439,,439,,439,,,,439,,,,,,,,439',
',,,,439,439,439,439,439,439,,,,439,439,562,562,562,,562,,,,562,562,',
',,562,,562,562,562,562,562,562,562,,,,,562,562,562,562,562,562,562,',
',,,,,,,,562,,,562,562,562,562,562,562,562,562,562,562,,562,562,,562',
'562,562,,,,,,,,,,,,,,,,,,,,562,,,562,,,562,562,,562,,,,,,562,,,,,,,',
'562,,,,,562,562,562,562,562,562,,,,562,562,424,424,424,,424,,,,424,424',
',,,424,,424,424,424,424,424,424,424,,,,,424,424,424,424,424,424,424',
',,,,,,,,,424,,,424,424,424,424,424,424,424,424,424,424,,424,424,,424',
'424,424,,,,,,,,,,,,,,,,,,,,424,,,424,,,424,424,,424,,424,,,,424,,,,',
',,,424,,,,,424,424,424,424,424,424,,,,424,424,133,133,133,,133,,,,133',
'133,,,,133,,133,133,133,133,133,133,133,,,,,133,133,133,133,133,133',
'133,,,,,,,,,,133,,,133,133,133,133,133,133,133,133,133,133,,133,133',
',133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,133,,,,,,133,,',
',,,,,133,,,,,133,133,133,133,133,133,,,,133,133,521,521,521,,521,,,',
'521,521,,,,521,,521,521,521,521,521,521,521,,,,,521,521,521,521,521',
'521,521,,,,,,,,,,521,,,521,521,521,521,521,521,521,521,521,521,,521',
'521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,521,,521,,',
',521,,,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,839,839,839,',
'839,,,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,839,839,839,839',
'839,839,839,,,,,,,,,,839,,,839,839,839,839,839,839,839,839,839,839,',
'839,839,,839,839,839,,,,,,,,,,,,,,,,,,,,839,,,839,,,839,839,,839,,839',
',839,,839,,,,,,,,839,,,,,839,839,839,839,839,839,,,,839,839,615,615',
'615,,615,,,,615,615,,,,615,,615,615,615,615,615,615,615,,,,,615,615',
'615,615,615,615,615,,,615,,,,,,,615,,,615,615,615,615,615,615,615,615',
'615,615,,615,615,,615,615,615,,,,,,,,,,,,,,,,,,,,615,,,615,,,615,615',
',615,,,,,,615,,,,,,,,615,,,,,615,615,615,615,615,615,,,,615,615,836',
'836,836,,836,,,,836,836,,,,836,,836,836,836,836,836,836,836,,,,,836',
'836,836,836,836,836,836,,,,,,,,,,836,,,836,836,836,836,836,836,836,836',
'836,836,,836,836,,836,836,836,,,,,,,,,,,,,,,,,,,,836,,,836,,,836,836',
',836,,836,,836,,836,,,,,,,,836,,,,,836,836,836,836,836,836,,,,836,836',
'724,724,724,,724,,,,724,724,,,,724,,724,724,724,724,724,724,724,,,,',
'724,724,724,724,724,724,724,,,,,,,,,,724,,,724,724,724,724,724,724,724',
'724,724,724,,724,724,,724,724,724,,,,,,,,,,,,,,,,,,,,724,,,724,,,724',
'724,,724,,,,,,724,,,,,,,,724,,,,,724,724,724,724,724,724,,,,724,724',
'33,33,33,33,33,33,33,33,,,33,33,33,33,33,,,33,33,33,33,33,33,33,,,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,,',
'33,,,,,,,,33,33,,33,33,33,33,,33,33,,,33,,,,,33,33,33,33,,,,,,,,,,,',
',33,33,,33,33,33,33,33,33,33,33,33,,33,,,33,33,,,144,144,144,,144,,',
'33,144,144,,,,144,,144,144,144,144,144,144,144,,,,,144,144,144,144,144',
'144,144,,,,,,,,,,144,,,144,144,144,144,144,144,144,144,144,144,,144',
'144,,144,144,144,,,,,,,,,,,,,,,,,,,,144,,,144,,,144,144,,144,,,,,,144',
',,,,,,,144,,,,,144,144,144,144,144,144,,,,144,144,32,32,32,,32,,,,32',
'32,,,,32,,32,32,32,32,32,32,32,,,,,32,32,32,32,32,32,32,,,,,,,,,,32',
',,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,',
'32,,,32,,,32,32,,32,,,,,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32',
'829,829,829,,829,,,,829,829,,,,829,,829,829,829,829,829,829,829,,,,',
'829,829,829,829,829,829,829,,,,,,,,,,829,,,829,829,829,829,829,829,829',
'829,829,829,,829,829,,829,829,829,,,,,,,,,,,,,,,,,,,,829,,,829,,,829',
'829,,829,,,,,,829,,,,,,,,829,,,,,829,829,829,829,829,829,,,,829,829',
'418,418,418,,418,,,,418,418,,,,418,,418,418,418,418,418,418,418,,,,',
'418,418,418,418,418,418,418,,,,,,,,,,418,,,418,418,418,418,418,418,418',
'418,418,418,,418,418,,418,418,418,,,,,,,,,,,,,,,,,,,,418,,,418,,,418',
'418,,418,,418,,418,,418,,,,,,,,418,,,,,418,418,418,418,418,418,,,,418',
'418,148,148,148,,148,,,,148,148,,,,148,,148,148,148,148,148,148,148',
',,,,148,148,148,148,148,148,148,,,,,,,,,,148,,,148,148,148,148,148,148',
'148,148,148,148,,148,148,,148,148,148,,,,,,,,,,,,,,,,,,,,148,,,148,',
',148,148,,148,,,,,,148,,,,,,,,148,,,,,148,148,148,148,148,148,,,,148',
'148,31,31,31,31,31,31,31,31,,,31,31,31,31,31,,,31,31,31,31,31,31,31',
',,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,31,,31,,,,,,,,31,31,,31,31,31,31,,31,31,,,31,,,,,31,31,31,31,,,,',
',,,,,,,,31,31,,31,31,31,31,31,31,31,31,31,,31,,,31,31,,,416,416,416',
',416,,,31,416,416,,,,416,,416,416,416,416,416,416,416,,,,,416,416,416',
'416,416,416,416,,,,,,,,,,416,,,416,416,416,416,416,416,416,416,416,416',
',416,416,,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,416,,',
',,,416,,,,,,,,416,,,,,416,416,416,416,416,416,,,,416,416,414,414,414',
',414,,,,414,414,,,,414,,414,414,414,414,414,414,414,,,,,414,414,414',
'414,414,414,414,,,,,,,,,,414,,,414,414,414,414,414,414,414,414,414,414',
',414,414,,414,414,414,,,,,,,,,,,,,,,,,,,,414,,,414,,,414,414,,414,,414',
',414,,414,,,,,,,,414,,,,,414,414,414,414,414,414,,,,414,414,412,412',
'412,,412,,,,412,412,,,,412,,412,412,412,412,412,412,412,,,,,412,412',
'412,412,412,412,412,,,,,,,,,,412,,,412,412,412,412,412,412,412,412,412',
'412,,412,412,,412,412,412,,,,,,,,,,,,,,,,,,,,412,,,412,,,412,412,,412',
',,,,,412,,,,,,,,412,,,,,412,412,412,412,412,412,,,,412,412,699,699,699',
',699,,,,699,699,,,,699,,699,699,699,699,699,699,699,,,,,699,699,699',
'699,699,699,699,,,,,,,,,,699,,,699,699,699,699,699,699,699,699,699,699',
',699,699,,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699,,,699,699,,699,,',
',,,699,,,,,,,,699,,,,,699,699,699,699,699,699,,,,699,699,157,157,157',
',157,,,,157,157,,,,157,,157,157,157,157,157,157,157,,,,,157,157,157',
'157,157,157,157,,,157,,,,,,,157,,,157,157,157,157,157,157,157,157,157',
'157,,157,157,,157,157,157,,,,,,,,,,,,,,,,,,,,157,,,157,,,157,157,,157',
',,,,,157,,,,,,,,157,,,,,157,157,157,157,157,157,,,,157,157,410,410,410',
',410,,,,410,410,,,,410,,410,410,410,410,410,410,410,,,,,410,410,410',
'410,410,410,410,,,,,,,,,,410,,,410,410,410,410,410,410,410,410,410,410',
',410,410,,410,410,410,,,,,,,,,,,,,,,,,,,,410,,,410,,,410,410,,410,,',
',,,410,,,,,,,,410,,,,,410,410,410,410,410,410,,,,410,410,716,716,716',
',716,,,,716,716,,,,716,,716,716,716,716,716,716,716,,,,,716,716,716',
'716,716,716,716,,,,,,,,,,716,,,716,716,716,716,716,716,716,716,716,716',
',716,716,,716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,716,,716',
',716,,716,,,,,,,,716,,,,,716,716,716,716,716,716,,,,716,716,409,409',
'409,,409,,,,409,409,,,,409,,409,409,409,409,409,409,409,,,,,409,409',
'409,409,409,409,409,,,,,,,,,,409,,,409,409,409,409,409,409,409,409,409',
'409,,409,409,,409,409,409,,,,,,,,,,,,,,,,,,,,409,,,409,,,409,409,,409',
',,,,,409,,,,,,,,409,,,,,409,409,409,409,409,409,,,,409,409,406,406,406',
',406,,,,406,406,,,,406,,406,406,406,406,406,406,406,,,,,406,406,406',
'406,406,406,406,,,,,,,,,,406,,,406,406,406,406,406,406,406,406,406,406',
',406,406,,406,406,406,,,,,,,,,,,,,,,,,,,,406,,,406,,,406,406,,406,,406',
',,,406,,,,,,,,406,,,,,406,406,406,406,406,406,,,,406,406,164,164,164',
',164,,,,164,164,,,,164,,164,164,164,164,164,164,164,,,,,164,164,164',
'164,164,164,164,,,,,,,,,,164,,,164,164,164,164,164,164,164,164,164,164',
',164,164,,164,164,164,,,,,,,,,,,,,,,,,,,,164,,,164,,,164,164,,164,,',
',,,164,,,,,,,,164,,,,,164,164,164,164,164,164,,,,164,164,758,758,758',
',758,,,,758,758,,,,758,,758,758,758,758,758,758,758,,,,,758,758,758',
'758,758,758,758,,,,,,,,,,758,,,758,758,758,758,758,758,758,758,758,758',
',758,758,,,,758,,,,,,,,,,,,,,,,,,,,758,,,758,,,758,758,,758,,,,,,,,',
',,,,,,,,,,758,758,758,758,758,758,,,,758,758,28,28,28,,28,,,,28,28,',
',,28,,28,28,28,28,28,28,28,,,,,28,28,28,28,28,28,28,,,,,,,,,,28,,,28',
'28,28,28,28,28,28,28,28,28,,28,28,,28,28,28,,,,,,,,,,,,,,,,,,,,28,,',
'28,,,28,28,,28,,,,,,28,,,,,,,,28,,,,,28,28,28,28,28,28,,,,28,28,395',
'395,395,,395,,,,395,395,,,,395,,395,395,395,395,395,395,395,,,,,395',
'395,395,395,395,395,395,,,395,,,,,,,395,,,395,395,395,395,395,395,395',
'395,395,395,,395,395,,395,395,395,,,,,,,,,,,,,,,,,,,,395,,,395,,,395',
'395,,395,,395,,395,,395,,,,,,,,395,,,,,395,395,395,395,395,395,,,,395',
'395,764,764,764,,764,,,,764,764,,,,764,,764,764,764,764,764,764,764',
',,,,764,764,764,764,764,764,764,,,764,,,,,,,764,,,764,764,764,764,764',
'764,764,764,764,764,,764,764,,764,764,764,,,,,,,,,,,,,,,,,,,,764,,,764',
',,764,764,,764,,,,,,764,,,,,,,,764,,,,,764,764,764,764,764,764,,,,764',
'764,382,382,382,,382,,,,382,382,,,,382,,382,382,382,382,382,382,382',
',,,,382,382,382,382,382,382,382,,,,,,,,,,382,,,382,382,382,382,382,382',
'382,382,382,382,,382,382,,382,382,382,,,,,,,,,,,,,,,,,,,,382,,,382,',
',382,382,,382,,382,,,,382,,,,,,,,382,,,,,382,382,382,382,382,382,,,',
'382,382,376,376,376,,376,,,,376,376,,,,376,,376,376,376,376,376,376',
'376,,,,,376,376,376,376,376,376,376,,,,,,,,,,376,,,376,376,376,376,376',
'376,376,376,376,376,,376,376,,376,376,376,,,,,,,,,,,,,,,,,,,,376,,,376',
'376,,376,376,,376,,376,,376,,376,,,,,,,,376,,,,,376,376,376,376,376',
'376,,,,376,376,729,729,729,,729,,,,729,729,,,,729,,729,729,729,729,729',
'729,729,,,,,729,729,729,729,729,729,729,,,,,,,,,,729,,,729,729,729,729',
'729,729,729,729,729,729,,729,729,,729,729,729,,,,,,,,,,,,,,,,,,,,729',
',,729,,,729,729,,729,,729,,729,,729,,,,,,,,729,,,,,729,729,729,729,729',
'729,,,,729,729,173,173,173,,173,,,,173,173,,,,173,,173,173,173,173,173',
'173,173,,,,,173,173,173,173,173,173,173,,,,,,,,,,173,,,173,173,173,173',
'173,173,173,173,173,173,,173,173,,,,173,,,,,,,,,,,,,,,,,,,,173,,,173',
',,173,173,,173,,,,,,,,,,,,,,,,,,,173,173,173,173,173,173,,,,173,173',
'607,607,607,,607,,,,607,607,,,,607,,607,607,607,607,607,607,607,,,,',
'607,607,607,607,607,607,607,,,,,,,,,,607,,,607,607,607,607,607,607,607',
'607,607,607,,607,607,,607,607,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607',
'607,,607,,,,,,607,,,,,,,,607,,,,,607,607,607,607,607,607,,,,607,607',
'25,25,25,,25,,,,25,25,,,,25,,25,25,25,25,25,25,25,,,,,25,25,25,25,25',
'25,25,,,,,,,,,,25,,,25,25,25,25,25,25,25,25,25,25,,25,25,,,,25,,,,,',
',,,,,,,,,,,,,,25,,,25,,,25,25,,25,,,,,,,,,,,,,,,,,,,25,25,25,25,25,25',
',,,25,25,659,659,659,,659,,,,659,659,,,,659,,659,659,659,659,659,659',
'659,,,,,659,659,659,659,659,659,659,,,,,,,,,,659,,,659,659,659,659,659',
'659,659,659,659,659,,659,659,,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659',
',,659,659,,659,,,,,,659,,,,,,,,659,,,,,659,659,659,659,659,659,,,,659',
'659,601,601,601,,601,,,,601,601,,,,601,,601,601,601,601,601,601,601',
',,,,601,601,601,601,601,601,601,,,,,,,,,,601,,,601,601,601,601,601,601',
'601,601,601,601,,601,601,,601,601,601,,,,,,,,,,,,,,,,,,,,601,,,601,',
',601,601,,601,,,,,,601,,,,,,,,601,,,,,601,601,601,601,601,601,,,,601',
'601,372,372,372,,372,,,,372,372,,,,372,,372,372,372,372,372,372,372',
',,,,372,372,372,372,372,372,372,,,,,,,,,,372,,,372,372,372,372,372,372',
'372,372,372,372,,372,372,,372,372,372,,,,,,,,,,,,,,,,,,,,372,,,372,372',
',372,372,,372,,372,,372,,372,,,,,,,,372,,,,,372,372,372,372,372,372',
',,,372,372,673,673,673,,673,,,,673,673,,,,673,,673,673,673,673,673,673',
'673,,,,,673,673,673,673,673,673,673,,,,,,,,,,673,,,673,673,673,673,673',
'673,673,673,673,673,,673,673,,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673',
',,673,673,,673,,,,,,673,,,,,,,,673,,,,,673,673,673,673,673,673,,,,673',
'673,24,24,24,,24,,,,24,24,,,,24,,24,24,24,24,24,24,24,,,,,24,24,24,24',
'24,24,24,,,,,,,,,,24,,,24,24,24,24,24,24,24,24,24,24,,24,24,,,,24,,',
',,,,,,,,,,,,,,,,,24,,,24,,,24,24,,24,,24,,,,,,,,,,,,,,,,,24,24,24,24',
'24,24,,,,24,24,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,',
',23,23,23,23,23,23,23,,,,,,,,,,23,,,23,23,23,23,23,23,23,23,23,23,,23',
'23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,23,,,,,,23,,,,,,,,23',
',,,,23,23,23,23,23,23,,,,23,23,589,589,589,,589,,,,589,589,,,,589,,589',
'589,589,589,589,589,589,,,,,589,589,589,589,589,589,589,,,,,,,,,,589',
',,589,589,589,589,589,589,589,589,589,589,,589,589,,589,589,589,,,,',
',,,,,,,,,,,,,,,589,,,589,,,589,589,,589,,589,,589,,589,,,,,,,,589,,',
',,589,589,589,589,589,589,,,,589,589,675,675,675,,675,,,,675,675,,,',
'675,,675,675,675,675,675,675,675,,,,,675,675,675,675,675,675,675,,,',
',,,,,,675,,,675,675,675,675,675,675,675,675,675,675,,675,675,,675,675',
'675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,675,,,,,,675,,,,,,,,675',
',,,,675,675,675,675,675,675,,,,675,675,21,21,21,,21,,,,21,21,,,,21,',
'21,21,21,21,21,21,21,,,,,21,21,21,21,21,21,21,,,,,,,,,,21,,,21,21,21',
'21,21,21,21,21,21,21,,21,21,,,,21,,,,,,,,,,,,,,,,,21,,,21,,,21,,,21',
'21,,21,,,,,,,,,,,,,,,,,,,21,21,21,21,21,21,,,,21,21,20,20,20,,20,,,',
'20,20,,,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20,20,20,,,,,,,,,',
'20,,,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,,,,,,,,,,,,,,,',
',,,20,,,20,,,20,20,,20,,20,,20,,20,,,,,,,,20,,,,,20,20,20,20,20,20,',
',,20,20,370,370,370,,370,,,,370,370,,,,370,,370,370,370,370,370,370',
'370,,,,,370,370,370,370,370,370,370,,,,,,,,,,370,,,370,370,370,370,370',
'370,370,370,370,370,,370,370,,370,370,370,,,,,,,,,,,,,,,,,,,,370,,,370',
'370,,370,370,,370,,370,,370,,370,,,,,,,,370,,,,,370,370,370,370,370',
'370,,,,370,370,269,269,269,,269,,,,269,269,,,,269,,269,269,269,269,269',
'269,269,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269',
'269,269,269,269,269,269,269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,',
',269,,,269,,,269,269,,269,,,,,,269,,,,,,,,269,,,,,269,269,269,269,269',
'269,,,,269,269,270,270,270,,270,,,,270,270,,,,270,,270,270,270,270,270',
'270,270,,,,,270,270,270,270,270,270,270,,,270,,,,,,,270,,,270,270,270',
'270,270,270,270,270,270,270,,270,270,,270,270,270,,,,,,,,,,,,,,,,,,',
',270,,,270,,,270,270,,270,,,,,,270,,,,,,,,270,,,,,270,270,270,270,270',
'270,,,,270,270,884,884,884,,884,,,,884,884,,,,884,,884,884,884,884,884',
'884,884,,,,,884,884,884,884,884,884,884,,,,,,,,,,884,,,884,884,884,884',
'884,884,884,884,884,884,,884,884,,884,884,884,,,,,,,,,,,,,,,,,,,,884',
',,884,,,884,884,,884,,884,,884,,884,,,,,,,,884,,,,,884,884,884,884,884',
'884,,,,884,884,798,798,798,,798,,,,798,798,,,,798,,798,798,798,798,798',
'798,798,,,,,798,798,798,798,798,798,798,,,,,,,,,,798,,,798,798,798,798',
'798,798,798,798,798,798,,798,798,,798,798,798,,,,,,,,,,,,,,,,,,,,798',
',,798,,,798,798,,798,,,,,,798,,,,,,,,798,,,,,798,798,798,798,798,798',
',,,798,798,796,796,796,,796,,,,796,796,,,,796,,796,796,796,796,796,796',
'796,,,,,796,796,796,796,796,796,796,,,,,,,,,,796,,,796,796,796,796,796',
'796,796,796,796,796,,796,796,,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796',
',,796,796,,796,,,,,,796,,,,,,,,796,,,,,796,796,796,796,796,796,,,,796',
'796,794,794,794,,794,,,,794,794,,,,794,,794,794,794,794,794,794,794',
',,,,794,794,794,794,794,794,794,,,,,,,,,,794,,,794,794,794,794,794,794',
'794,794,794,794,,794,794,,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,',
',794,794,,794,,,,,,794,,,,,,,,794,,,,,794,794,794,794,794,794,,,,794',
'794,276,276,276,,276,,,,276,276,,,,276,,276,276,276,276,276,276,276',
',,,,276,276,276,276,276,276,276,,,,,,,,,,276,,,276,276,276,276,276,276',
'276,276,276,276,,276,276,,276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,276',
',276,276,,276,,,,,,276,,,,,,,,276,,,,,276,276,276,276,276,276,,,,276',
'276,16,16,16,16,16,,,,16,16,,,,16,,16,16,16,16,16,16,16,,,,,16,16,16',
'16,16,16,16,,,16,,,,,,16,16,16,16,16,16,16,16,16,16,16,16,16,16,,16',
'16,,16,16,16,,,,,,,,,,,,,,,,,,,,16,,,16,,,16,16,,16,,16,,,,16,,,,,,',
',16,,,,,16,16,16,16,16,16,,,,16,16,361,361,361,,361,,,,361,361,,,,361',
',361,361,361,361,361,361,361,,,,,361,361,361,361,361,361,361,,,361,',
',,,,,361,,,361,361,361,361,361,361,361,361,361,361,,361,361,,361,361',
'361,,,,,,,,,,,,,,,,,,,,361,,,361,,,361,361,,361,,,,,,361,,,,,,,,361',
',,,,361,361,361,361,361,361,,,,361,361,791,791,791,,791,,,,791,791,',
',,791,,791,791,791,791,791,791,791,,,,,791,791,791,791,791,791,791,',
',,,,,,,,791,,,791,791,791,791,791,791,791,791,791,791,,791,791,,791',
'791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,791,,,,,,791,,,,,,,',
'791,,,,,791,791,791,791,791,791,,,,791,791,284,284,284,,284,,,,284,284',
',,,284,,284,284,284,284,284,284,284,,,,,284,284,284,284,284,284,284',
',,,,,,,,,284,,,284,284,284,284,284,284,284,284,284,284,,284,284,,284',
'284,284,,,,,,,,,,,,,,,,,,,,284,,,284,,,284,284,,284,,,,,,284,,,,,,,',
'284,,,,,284,284,284,284,284,284,,,,284,284,285,285,285,,285,,,,285,285',
',,,285,,285,285,285,285,285,285,285,,,,,285,285,285,285,285,285,285',
',,,,,,,,,285,,,285,285,285,285,285,285,285,285,285,285,,285,285,,285',
'285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,285,,,,,,285,,,,,,,',
'285,,,,,285,285,285,285,285,285,,,,285,285,286,286,286,,286,,,,286,286',
',,,286,,286,286,286,286,286,286,286,,,,,286,286,286,286,286,286,286',
',,,,,,,,,286,,,286,286,286,286,286,286,286,286,286,286,,286,286,,286',
'286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,286,,,,,,286,,,,,,,',
'286,,,,,286,286,286,286,286,286,,,,286,286,287,287,287,,287,,,,287,287',
',,,287,,287,287,287,287,287,287,287,,,,,287,287,287,287,287,287,287',
',,,,,,,,,287,,,287,287,287,287,287,287,287,287,287,287,,287,287,,287',
'287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,287,,,,,,287,,,,,,,',
'287,,,,,287,287,287,287,287,287,,,,287,287,58,58,58,,58,,,,58,58,,,',
'58,,58,58,58,58,58,58,58,,58,,,58,58,58,58,58,58,58,,,,,,,,,,58,,,58',
'58,58,58,58,58,58,58,58,58,,58,58,,58,58,58,,,,,,,,,,,,,,,,,,,,58,,',
'58,58,,58,58,,58,,58,,58,,58,,,,,,,,58,,58,,,58,58,58,58,58,58,,,,58',
'58,289,289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289,289,',
',,,289,289,289,289,289,289,289,,,,,,,,,,289,,,289,289,289,289,289,289',
'289,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,',
',289,289,,289,,,,,,289,,,,,,,,289,,,,,289,289,289,289,289,289,,,,289',
'289,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290,290',
',,,,290,290,290,290,290,290,290,,,,,,,,,,290,,,290,290,290,290,290,290',
'290,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,',
',290,290,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290',
'290,291,291,291,,291,,,,291,291,,,,291,,291,291,291,291,291,291,291',
',,,,291,291,291,291,291,291,291,,,,,,,,,,291,,,291,291,291,291,291,291',
'291,291,291,291,,291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,',
',291,291,,291,,,,,,291,,,,,,,,291,,,,,291,291,291,291,291,291,,,,291',
'291,292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292,292,292',
',,,,292,292,292,292,292,292,292,,,,,,,,,,292,,,292,292,292,292,292,292',
'292,292,292,292,,292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,',
',292,292,,292,,,,,,292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292',
'292,293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293',
',,,,293,293,293,293,293,293,293,,,,,,,,,,293,,,293,293,293,293,293,293',
'293,293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,',
',293,293,,293,,,,,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293',
'293,294,294,294,,294,,,,294,294,,,,294,,294,294,294,294,294,294,294',
',,,,294,294,294,294,294,294,294,,,,,,,,,,294,,,294,294,294,294,294,294',
'294,294,294,294,,294,294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,',
',294,294,,294,,,,,,294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294',
'294,295,295,295,,295,,,,295,295,,,,295,,295,295,295,295,295,295,295',
',,,,295,295,295,295,295,295,295,,,,,,,,,,295,,,295,295,295,295,295,295',
'295,295,295,295,,295,295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,',
',295,295,,295,,,,,,295,,,,,,,,295,,,,,295,295,295,295,295,295,,,,295',
'295,296,296,296,,296,,,,296,296,,,,296,,296,296,296,296,296,296,296',
',,,,296,296,296,296,296,296,296,,,,,,,,,,296,,,296,296,296,296,296,296',
'296,296,296,296,,296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,',
',296,296,,296,,,,,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296',
'296,297,297,297,,297,,,,297,297,,,,297,,297,297,297,297,297,297,297',
',,,,297,297,297,297,297,297,297,,,,,,,,,,297,,,297,297,297,297,297,297',
'297,297,297,297,,297,297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,',
',297,297,,297,,,,,,297,,,,,,,,297,,,,,297,297,297,297,297,297,,,,297',
'297,298,298,298,,298,,,,298,298,,,,298,,298,298,298,298,298,298,298',
',,,,298,298,298,298,298,298,298,,,,,,,,,,298,,,298,298,298,298,298,298',
'298,298,298,298,,298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,',
',298,298,,298,,,,,,298,,,,,,,,298,,,,,298,298,298,298,298,298,,,,298',
'298,299,299,299,,299,,,,299,299,,,,299,,299,299,299,299,299,299,299',
',,,,299,299,299,299,299,299,299,,,,,,,,,,299,,,299,299,299,299,299,299',
'299,299,299,299,,299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,',
',299,299,,299,,,,,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299',
'299,300,300,300,,300,,,,300,300,,,,300,,300,300,300,300,300,300,300',
',,,,300,300,300,300,300,300,300,,,,,,,,,,300,,,300,300,300,300,300,300',
'300,300,300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,',
',300,300,,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300',
'300,301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301',
',,,,301,301,301,301,301,301,301,,,,,,,,,,301,,,301,301,301,301,301,301',
'301,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,',
',301,301,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301',
'301,302,302,302,,302,,,,302,302,,,,302,,302,302,302,302,302,302,302',
',,,,302,302,302,302,302,302,302,,,,,,,,,,302,,,302,302,302,302,302,302',
'302,302,302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,',
',302,302,,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302,,,,302',
'302,303,303,303,,303,,,,303,303,,,,303,,303,303,303,303,303,303,303',
',,,,303,303,303,303,303,303,303,,,,,,,,,,303,,,303,303,303,303,303,303',
'303,303,303,303,,303,303,,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,',
',303,303,,303,,,,,,303,,,,,,,,303,,,,,303,303,303,303,303,303,,,,303',
'303,304,304,304,,304,,,,304,304,,,,304,,304,304,304,304,304,304,304',
',,,,304,304,304,304,304,304,304,,,,,,,,,,304,,,304,304,304,304,304,304',
'304,304,304,304,,304,304,,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,',
',304,304,,304,,,,,,304,,,,,,,,304,,,,,304,304,304,304,304,304,,,,304',
'304,305,305,305,,305,,,,305,305,,,,305,,305,305,305,305,305,305,305',
',,,,305,305,305,305,305,305,305,,,,,,,,,,305,,,305,305,305,305,305,305',
'305,305,305,305,,305,305,,305,305,305,,,,,,,,,,,,,,,,,,,,305,,,305,',
',305,305,,305,,,,,,305,,,,,,,,305,,,,,305,305,305,305,305,305,,,,305',
'305,306,306,306,,306,,,,306,306,,,,306,,306,306,306,306,306,306,306',
',,,,306,306,306,306,306,306,306,,,,,,,,,,306,,,306,306,306,306,306,306',
'306,306,306,306,,306,306,,306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,',
',306,306,,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306,306,306,,,,306',
'306,307,307,307,,307,,,,307,307,,,,307,,307,307,307,307,307,307,307',
',,,,307,307,307,307,307,307,307,,,,,,,,,,307,,,307,307,307,307,307,307',
'307,307,307,307,,307,307,,307,307,307,,,,,,,,,,,,,,,,,,,,307,,,307,',
',307,307,,307,,,,,,307,,,,,,,,307,,,,,307,307,307,307,307,307,,,,307',
'307,308,308,308,,308,,,,308,308,,,,308,,308,308,308,308,308,308,308',
',,,,308,308,308,308,308,308,308,,,,,,,,,,308,,,308,308,308,308,308,308',
'308,308,308,308,,308,308,,308,308,308,,,,,,,,,,,,,,,,,,,,308,,,308,',
',308,308,,308,,,,,,308,,,,,,,,308,,,,,308,308,308,308,308,308,,,,308',
'308,309,309,309,,309,,,,309,309,,,,309,,309,309,309,309,309,309,309',
',,,,309,309,309,309,309,309,309,,,,,,,,,,309,,,309,309,309,309,309,309',
'309,309,309,309,,309,309,,309,309,309,,,,,,,,,,,,,,,,,,,,309,,,309,',
',309,309,,309,,,,,,309,,,,,,,,309,,,,,309,309,309,309,309,309,,,,309',
'309,13,13,13,,13,,,,13,13,,,,13,,13,13,13,13,13,13,13,,,,,13,13,13,13',
'13,13,13,,,,,,,,,,13,,,13,13,13,13,13,13,13,13,13,13,,13,13,,13,13,13',
',,,,,,,,,,,,,,,,,,,13,,,13,,,13,13,,13,,13,,13,,13,,,,,,,,13,,,,,13',
'13,13,13,13,13,,,,13,13,360,360,360,,360,,,,360,360,,,,360,,360,360',
'360,360,360,360,360,,,,,360,360,360,360,360,360,360,,,,,,,,,,360,,,360',
'360,360,360,360,360,360,360,360,360,,360,360,,360,360,360,,,,,,,,,,',
',,,,,,,,,360,,,360,,,360,360,,360,,,,,,360,,,,,,,,360,,,,,360,360,360',
'360,360,360,,,,360,360,358,358,358,,358,,,,358,358,,,,358,,358,358,358',
'358,358,358,358,,,,,358,358,358,358,358,358,358,,,358,,,,,,,358,,,358',
'358,358,358,358,358,358,358,358,358,,358,358,,358,358,358,,,,,,,,,,',
',,,,,,,,,358,,,358,,,358,358,,358,,,,,,358,,,,,,,,358,,,,,358,358,358',
'358,358,358,,,,358,358,727,727,727,,727,,,,727,727,,,,727,,727,727,727',
'727,727,727,727,,,,,727,727,727,727,727,727,727,,,,,,,,,,727,,,727,727',
'727,727,727,727,727,727,727,727,,727,727,,727,727,727,,,,,,,,,,,,,,',
',,,,,727,,,727,,,727,727,,727,,,,,,727,,,,,,,,727,,,,,727,727,727,727',
'727,727,,,,727,727,357,357,357,,357,,,,357,357,,,,357,,357,357,357,357',
'357,357,357,,,,,357,357,357,357,357,357,357,,,,,,,,,,357,,,357,357,357',
'357,357,357,357,357,357,357,,357,357,,357,357,357,,,,,,,,,,,,,,,,,,',
',357,,,357,,,357,357,,357,,357,,,,357,,,,,,,,357,,,,,357,357,357,357',
'357,357,,,,357,357,7,7,7,,7,,,,7,7,,,,7,,7,7,7,7,7,7,7,,,,,7,7,7,7,7',
'7,7,,,,,,,,,,7,,,7,7,7,7,7,7,7,7,7,7,,7,7,,,,7,,,,,,,,,,,,,,,,,,,,7',
',,7,,,7,7,,7,,7,,,,,,,,,,,,,,,,,7,7,7,7,7,7,,,,7,7,892,892,892,,892',
',,,892,892,,,,892,,892,892,892,892,892,892,892,,,,,892,892,892,892,892',
'892,892,,,,,,,,,,892,,,892,892,892,892,892,892,892,892,892,892,,892',
'892,,892,892,892,,,,,,,,,,,,,,,,,,,,892,,,892,,,892,892,,892,,,,,,892',
',,,,,,,892,,,,,892,892,892,892,892,892,,,,892,892,321,321,321,,321,',
',,321,321,,,,321,,321,321,321,321,321,321,321,,,,,321,321,321,321,321',
'321,321,,,,,,,,,,321,,,321,321,321,321,321,321,321,321,321,321,,321',
'321,,321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,321,321,321,,321,,321',
',321,,321,,,,,,,,321,,,,,321,321,321,321,321,321,,,,321,321,322,322',
'322,,322,,,,322,322,,,,322,,322,322,322,322,322,322,322,,,,,322,322',
'322,322,322,322,322,,,322,,,,,,,322,,,322,322,322,322,322,322,322,322',
'322,322,,322,322,,322,322,322,,,,,,,,,,,,,,,,,,,,322,,,322,,,322,322',
',322,,,,,,322,,,,,,,,322,,,,,322,322,322,322,322,322,,,,322,322,323',
'323,323,,323,,,,323,323,,,,323,,323,323,323,323,323,323,323,,,,,323',
'323,323,323,323,323,323,,,323,,,,,,,323,,,323,323,323,323,323,323,323',
'323,323,323,,323,323,,323,323,323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323',
'323,,323,,,,,,323,,,,,,,,323,,,,,323,323,323,323,323,323,,,,323,323',
'324,324,324,,324,,,,324,324,,,,324,,324,324,324,324,324,324,324,,,,',
'324,324,324,324,324,324,324,,,324,,,,,,,324,,,324,324,324,324,324,324',
'324,324,324,324,,324,324,,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,',
',324,324,,324,,,,,,324,,,,,,,,324,,,,,324,324,324,324,324,324,,,,324',
'324,325,325,325,,325,,,,325,325,,,,325,,325,325,325,325,325,325,325',
',,,,325,325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325',
'325,325,325,325,325,,325,325,,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325',
',,325,325,,325,,,,,,325,,,,,,,,325,,,,,325,325,325,325,325,325,,,,325',
'325,326,326,326,326,326,,,,326,326,,,,326,,326,326,326,326,326,326,326',
',,,,326,326,326,326,326,326,326,,,326,,,,,,326,326,326,326,326,326,326',
'326,326,326,326,326,326,326,,326,326,,326,326,326,,,,,,,,,,,,,,,,,,',
',326,,,326,,,326,326,,326,,326,,,,326,,,,,,,,326,,,,,326,326,326,326',
'326,326,,,,326,326,570,570,570,,570,,,,570,570,,,,570,,570,570,570,570',
'570,570,570,,,,,570,570,570,570,570,570,570,,,570,,,,,,,570,,,570,570',
'570,570,570,570,570,570,570,570,,570,570,,570,570,570,,,,,,,,,,,,,,',
',,,,,570,,,570,,,570,570,,570,,,,,,570,,,,,,,,570,,,,,570,570,570,570',
'570,570,,,,570,570,772,772,772,,772,,,,772,772,,,,772,,772,772,772,772',
'772,772,772,,,,,772,772,772,772,772,772,772,,,,,,,,,,772,,,772,772,772',
'772,772,772,772,772,772,772,,772,772,,772,772,772,,,,,,,,,,,,,,,,,,',
',772,,,772,,,772,772,,772,,,,,,772,,,,,,,,772,,,,,772,772,772,772,772',
'772,,,,772,772,574,574,574,,574,,,,574,574,,,,574,,574,574,574,574,574',
'574,574,,,,,574,574,574,574,574,574,574,,,,,,,,,,574,,,574,574,574,574',
'574,574,574,574,574,574,,574,574,,,,574,,,,,,,,,,,,,,,,,,,,574,,,574',
',,574,574,,574,,574,,,,,,,,,,,574,,,,,,574,574,574,574,574,574,,,,574',
'574,676,676,676,,676,,,,676,676,,,,676,,676,676,676,676,676,676,676',
',,,,676,676,676,676,676,676,676,,,,,,,,,,676,,,676,676,676,676,676,676',
'676,676,676,676,,676,676,,676,676,676,,,,,,,,,,,,,,,,,,,,676,,,676,',
',676,676,,676,,676,,,,676,,,,,,,,676,,,,,676,676,676,676,676,676,,,',
'676,676,726,726,726,,726,,,,726,726,,,,726,,726,726,726,726,726,726',
'726,,,,,726,726,726,726,726,726,726,,,,,,,,,,726,,,726,726,726,726,726',
'726,726,726,726,726,,726,726,,726,726,726,,,,,,,,,,,,,,,,,,,,726,,,726',
',,726,726,,726,,,,,,726,,,,,,,,726,,,,,726,726,726,726,726,726,,,,726',
'726,775,775,775,,775,,,,775,775,,,,775,,775,775,775,775,775,775,775',
',,,,775,775,775,775,775,775,775,,,,,,,,,,775,,,775,775,775,775,775,775',
'775,775,775,775,,775,775,,775,775,775,,,,,,,,,,,,,,,,,,,,775,,,775,',
',775,775,,775,,775,,,,775,,,,,,,,775,,,,,775,775,775,775,775,775,,,',
'775,775,682,682,682,,682,,,,682,682,,,,682,,682,682,682,682,682,682',
'682,,,,,682,682,682,682,682,682,682,,,,,,,,,,682,,,682,682,682,682,682',
'682,682,682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682',
',,682,682,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682',
'682,339,339,339,,339,,,,339,339,,,,339,,339,339,339,339,339,339,339',
',,,,339,339,339,339,339,339,339,,,,,,,,,,339,,,339,339,339,339,339,339',
'339,339,339,339,,339,339,,339,339,339,,,,,,,,,,,,,,,,,,,,339,,,339,',
',339,339,,339,,,,,,339,,,,,,,,339,,,,,339,339,339,339,339,339,,,,339',
'339,582,582,582,,582,,,,582,582,,,,582,,582,582,582,582,582,582,582',
',,,,582,582,582,582,582,582,582,,,,,,,,,,582,,,582,582,582,582,582,582',
'582,582,582,582,,582,582,,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,',
',582,582,,582,,,,,,582,,,,,,,,582,,,,,582,582,582,582,582,582,,,,582',
'582,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341,341,341',
',,,,341,341,341,341,341,341,341,,,,,,,,,,341,,,341,341,341,341,341,341',
'341,341,341,341,,341,341,,341,341,341,,,,,,,,,,,,,,,,,,,,341,,,341,',
',341,341,,341,,341,,,,341,,,,,,,,341,,,,,341,341,341,341,341,341,,,',
'341,341,459,459,459,,459,,,,459,459,,,,459,,459,459,459,459,459,459',
'459,,,,,459,459,459,459,459,459,459,,,,,,,,,,459,,,459,459,459,459,459',
'459,459,459,459,459,,459,459,,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459',
',,459,459,,459,,,,,,459,,,,,,,,459,,,,,459,459,459,459,459,459,,,,459',
'459,29,29,29,29,29,29,29,29,,,29,29,29,29,29,,,29,29,29,29,29,29,29',
',,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
'29,29,29,29,29,,,,,,,29,29,,29,29,29,29,,29,29,,,29,,,,,29,29,29,29',
',,,,,29,,,,,,,29,29,,29,29,29,29,29,29,29,29,29,,29,,,29,265,265,265',
'265,265,265,265,265,,,265,265,265,265,265,,,265,265,265,265,265,265',
'265,,,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265',
'265,265,265,265,265,265,265,265,265,265,265,,,,,,,265,265,,265,265,265',
'265,,265,265,,,265,,,,,265,265,265,265,,,,,,,,,,,,,265,265,,265,265',
'265,265,265,265,265,265,265,,265,,,265,83,83,83,83,83,83,83,83,,,83',
'83,83,83,83,,,83,83,83,83,83,83,83,,,83,83,83,83,83,83,83,83,83,83,83',
'83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,,,,,,,83,83,,83,83,83',
'83,,83,83,,,83,,,,,83,83,83,83,,,,,,,,,,,,,83,83,,83,83,83,83,83,83',
'83,83,83,,83,,,83,624,624,624,624,624,624,624,624,,,624,624,624,624',
'624,,,624,624,624,624,624,624,624,,,624,624,624,624,624,624,624,624',
'624,624,624,624,624,624,624,624,624,624,624,624,624,624,624,,,624,,',
',,,,,624,624,,624,624,624,624,,624,624,,,624,,,,,624,624,624,624,,,',
',,,,,,,,,624,624,,624,624,624,624,624,624,624,624,624,,624,103,103,624',
',103,,,,,,,,103,103,,103,103,103,103,,103,103,,,103,,,,,103,103,103',
'103,,,,,,,,,,,,,103,103,,103,103,103,103,103,103,103,103,103,,103,381',
'381,103,,381,,,,,,,,381,381,,381,381,381,381,,381,381,,,381,,,,,381',
'381,381,381,,,,,,,,,,,,,381,381,,381,381,381,381,381,381,381,381,381',
',381,586,586,381,,586,,,,,,,,586,586,,586,586,586,586,,586,586,,,586',
',,,,586,586,586,586,,,,,,,,,,,,,586,586,,586,586,586,586,586,586,586',
'586,586,,586,383,383,586,,383,,,,,,,,383,383,,383,383,383,383,,383,383',
',,383,,,,,383,383,383,383,,,,,,,,,,,,,383,383,,383,383,383,383,383,383',
'383,383,383,,383,101,101,383,,101,,,,,,,,101,101,,101,101,101,101,,101',
'101,,,101,,,,,101,101,101,101,,,,,,,,,,,,,101,101,,101,101,101,101,101',
'101,101,101,101,,101,423,423,101,,423,,,,,,,,423,423,,423,423,423,423',
',423,423,,,423,,,,,423,423,423,423,,,,,,,,,,,,,423,423,,423,423,423',
'423,423,423,423,423,423,,423,587,587,423,,587,,,,,,,,587,587,,587,587',
'587,587,,587,587,,,587,,,,,587,587,587,587,,,,,,,,,,,,,587,587,,587',
'587,587,587,587,587,587,587,587,,587,425,425,587,,425,,,,,,,,425,425',
',425,425,425,425,,425,425,,,425,,,,,425,425,425,425,,,,,,,,,,,,,425',
'425,,425,425,425,425,425,425,425,425,425,,425,852,852,425,,852,,,,,',
',,852,852,,852,852,852,852,,852,852,,,852,,,,,852,852,852,852,,,,,,',
',,,,,,852,852,,852,852,852,852,852,852,852,852,852,,852,332,332,852',
',332,,,,,,,,332,332,,332,332,332,332,,332,332,,,332,,,,,332,332,332',
'332,,,,,,,,,,,,,332,332,,332,332,332,332,332,332,332,332,332,,332,407',
'407,332,,407,,,,,,,,407,407,,407,407,407,407,,407,407,,,407,,,,,407',
'407,407,407,,,,,,,,,,,,,407,407,,407,407,407,407,407,407,407,407,407',
',407,333,333,407,,333,,,,,,,,333,333,,333,333,333,333,,333,333,,,333',
',,,,333,333,333,333,,,,,,,,,,,,,333,333,,333,333,333,333,333,333,333',
'333,333,,333,436,436,333,,436,,,,,,,,436,436,,436,436,436,436,,436,436',
',,436,,,,,436,436,436,436,,,,,,,,,,,,,436,436,,436,436,436,436,436,436',
'436,436,436,,436,437,437,436,,437,,,,,,,,437,437,,437,437,437,437,,437',
'437,,,437,,,,,437,437,437,437,,,,,,,,,,,,,437,437,,437,437,437,437,437',
'437,437,437,437,,437,438,438,437,,438,,,,,,,,438,438,,438,438,438,438',
',438,438,,,438,,,,,438,438,438,438,,,,,,,,,,,,,438,438,,438,438,438',
'438,438,438,438,438,438,,438,,,438,843,843,843,843,843,843,843,843,843',
'843,843,,843,843,,,843,843,,,,,,,,,,,,,,843,,843,,843,843,843,843,843',
'843,843,,843,,,,,,,440,440,,,440,,,,,843,,843,440,440,,440,440,440,440',
',440,440,,,440,,,,,440,440,440,440,,,,,,,,,,,,,440,440,,440,440,440',
'440,440,440,440,440,440,,440,405,405,440,,405,,,,,,,,405,405,,405,405',
'405,405,,405,405,,,405,,,,,405,405,405,405,,,,,,,,,,,,,405,405,,405',
'405,405,405,405,405,405,405,405,,405,854,854,405,,854,,,,,,,,854,854',
',854,854,854,854,,854,854,,,854,,,,,854,854,854,854,,,,,,,,,,,,,854',
'854,,854,854,854,854,854,854,854,854,854,,854,,,854,581,581,581,581',
'581,581,581,581,581,581,581,,581,581,,,581,581,,,,581,,,,,,,,,,581,',
'581,,581,581,581,581,581,581,581,,581,,,,,,,,,,,,,,,,581,,581,474,474',
'474,474,474,474,474,474,474,474,474,,474,474,,,474,474,,,,,,,,,,,,,',
'474,,474,,474,474,474,474,474,474,474,,474,,463,463,463,463,463,463',
'463,463,463,463,463,,463,463,474,474,463,463,,,,,,,,,,,,,,463,,463,',
'463,463,463,463,463,463,463,,463,781,781,781,781,781,781,781,781,781',
'781,781,,781,781,,463,781,781,,,,,,,,,,,,,,781,,781,,781,781,781,781',
'781,781,781,,781,769,769,769,769,769,769,769,769,769,769,769,,769,769',
',781,769,769,,,,,,,,,,,,,,769,,769,,769,769,769,769,769,769,769,,769',
'434,434,434,434,434,434,434,434,434,434,434,,434,434,769,769,434,434',
',,,,,,,,,,,,,434,,434,,434,434,434,434,434,434,434,,434,522,522,522',
'522,522,522,522,522,522,522,522,,522,522,,434,522,522,,,,,,,,,,,,,,522',
',522,,522,522,522,522,522,522,522,,522,698,698,698,698,698,698,698,698',
'698,698,698,,698,698,522,522,698,698,,,,,,,,,,,,,,698,,698,,698,698',
'698,698,698,698,698,,698,657,657,657,657,657,657,657,657,657,657,657',
',657,657,,698,657,657,,,,,,,,,,,,,,657,,657,,657,657,657,657,657,657',
'657,,657,701,701,701,701,701,701,701,701,701,701,701,,701,701,,657,701',
'701,,,,,,,,,,,,,,701,,701,,701,701,701,701,701,701,701,,701,45,45,45',
'45,45,45,45,45,45,45,45,,45,45,,701,45,45,,,,,,,,,,,,,,45,,45,,45,45',
'45,45,45,45,45,,45,762,762,762,762,762,762,762,762,762,762,762,,762',
'762,,45,762,762,,,,,,,,,,,,,,762,,762,,762,762,762,762,762,762,762,',
'762,140,140,140,140,140,140,140,140,140,140,140,,140,140,,762,140,140',
',,,,,,,,,,,,,140,,140,,140,140,140,140,140,140,140,,140,703,703,703',
'703,703,703,703,703,703,703,703,,703,703,,140,703,703,,,,,,,,,,,,,,703',
',703,,703,703,703,703,703,703,703,,703,547,547,547,547,547,547,547,547',
'547,547,547,,547,547,,703,547,547,,,,,,,,,,,,,,547,,547,,547,547,547',
'547,547,547,547,,547,696,696,696,696,696,696,696,696,696,696,696,,696',
'696,,547,696,696,,,,,,,,,,,,,,696,,696,,696,696,696,696,696,696,696',
',696,770,770,770,770,770,770,770,770,770,770,770,,770,770,,696,770,770',
',,,,,,,,,,,,,770,,770,,770,770,770,770,770,770,770,,770,,,,,,,,,,,,',
',,,770' ]
        racc_action_check = arr = Array.new(23880, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    25,  1512,  1035,   nil,   nil,   554, 19264,     6,   -21,
   nil,   901,   -94, 18664,   nil,   nil, 15184,   nil,   899,   nil,
 14104, 13984,   509, 13624, 13504, 12904,   nil,   895, 11944, 21544,
   nil, 10512, 10032,  9800,   537,   nil,   nil,   506,  2964,   599,
   897,   nil,   210,   965,   nil, 23492,   902,   nil,   nil,   982,
  5856,   nil,  5616,  4174,   nil,  5136,   nil,   725, 16024,  4656,
  4776,   nil,  4896,   nil,   nil,   -63,   248,   nil,   nil,   nil,
   nil,  5256,   nil,   nil,   nil,  5376,   nil,  5496,   556,   nil,
   862,   775,   nil, 21762,   nil,   nil,  6096,   nil,   nil,   858,
   nil,   nil,   nil,   nil,   901,   nil,  6456,  6576,   nil,     2,
   nil, 22166,  6936, 21930,   403,   126,   nil,   nil,    10,   959,
   250,   -13,   858,   926,   nil,   889,   871,   nil,   nil,   nil,
   849,   nil,   nil,   nil,  8480,   nil,  8600,   nil,   808,   nil,
   185,   nil,   338,  9080,    77,   nil,   840,   nil,   -34,   862,
 23580,   nil,  2601,   nil,  9912,   783,   783,   817, 10392,   774,
  1062,   -36,   773,   nil,   nil,   283,   nil, 11104,   nil,   -26,
   nil,    14,   218,   364, 11704,   577,   nil,   375,   459,   760,
   499,   831,  1996, 12664,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   401,   nil,   nil,   nil,
   nil,   487,   nil,   nil,   nil,   nil,   183,   nil,   nil,   nil,
   nil,   422,   360,   nil,   nil,   nil,   nil,   457,   nil,   nil,
   nil,   374,   481,   nil,   460,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   221,   nil,   nil,   nil, 21653,   819,   nil,   737, 14344,
 14464,   796,   795,   850,   844,   nil, 15064,   nil,   901,   nil,
   nil,   nil,   436,   727, 15544, 15664, 15784, 15904,  4536, 16144,
 16264, 16384, 16504, 16624, 16744, 16864, 16984, 17104, 17224, 17344,
 17464, 17584, 17704, 17824, 17944, 18064, 18184, 18304, 18424, 18544,
  2117,   nil,   nil,   nil,   622,    46,   730,   726,   725,  3932,
   nil, 19504, 19624, 19744, 19864, 19984, 20104,   nil,   nil,   nil,
   nil,   144, 22461, 22579,   473,   719,   nil,   680,    92, 21064,
   -76, 21304,   429,   674,    89,   244,   nil,   nil,   nil,   nil,
   nil,   nil,   185,   691,    60,   180,   nil, 19144, 18904,   249,
 18784, 15304,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   704,
 14224,   124, 13264,   nil,     0,   698, 12424,   nil,   330,   nil,
   586, 21989, 12304, 22107,   nil,   nil,   nil,   689,    97,   nil,
   nil,    78,   -44,   nil,   nil, 12064,   683,   731,   635,    96,
   631,   nil,   152,   nil,   nil, 22927, 11584, 22520,   nil, 11464,
 11224,   100, 10864,   nil, 10744,   nil, 10624,   630, 10272,   nil,
   624,   nil,   nil, 22225,  8960, 22343,   501,   nil,   nil,   493,
   261,   nil,   nil,   nil, 23272,   nil, 22638, 22697, 22756,  8720,
 22868,   nil,   523,   661,   nil,  3085,   nil,   nil,   nil,  6464,
  8128,  7896,   nil,   nil,   nil,   nil,   nil,   nil,  7776, 21424,
   731,  7416,   nil, 23140,  7296,  1028,   nil,  7056,  3327,  2601,
   680,  2238,  2117,   679, 23095,  1875,   716,   590,  1512,   999,
   639,  1149,  1028,  1270,  1391,  1633,   673,  1754,   668,  1996,
  2843,  2722,   663,  2359,  2480,   601,   -42,   nil,  2238,   nil,
   692,   nil,   572,   599,   589,   nil,   nil,   nil,   nil,   nil,
   nil,  1754,   606,   nil,   nil,   660,   518,   nil,   nil,   nil,
   nil,  9200, 23316,   nil,  8248,   nil,   nil,   775,   nil,   510,
  6816,  3448,   619,  6336,   607,   nil,   nil,  5016,   nil,   nil,
   nil,   nil,   nil,   476,   nil,    52,   nil, 23668,   nil,    53,
  4053,   885,   506,   nil,  5976,  6696,   210,   502,   nil,   nil,
   nil,  7176,  8840,   504,   255,   186,   479,   480,   110,   -19,
 20224,   -50,   nil,   nil, 20464,   nil,   nil,   nil,   nil,   -65,
   434, 23033, 21184,   385,   nil,   391, 22048, 22284,   366, 13744,
   nil,   nil,   375,   496,   353,   -39,   -36,   nil,   901,   nil,
   327, 13144,   259,   278,   nil,   271,   nil, 12784,   nil,   nil,
   393,   365,   243,   -98,   nil,  9440,  2722,   366,   395,   176,
   115,   239,   nil,   235, 21871,    56,   nil,   nil,   nil,    97,
   -45,   527,   nil,   nil,   nil,   nil,   294,  1391,   nil,   nil,
   -15,   nil,     4,   612,   -33,   nil,  8368,   189,   195,  4416,
   273,   nil,   nil,   170,   nil,   246,   151, 23404,   250, 13024,
   nil,   nil,   712,   nil,   -78,   nil,   401,   nil,   nil,   nil,
   nil,   344,   nil, 13384,   nil, 13864, 20584,   nil,   475,   nil,
    20,   387, 20944,   524,   nil,   nil,   nil,   nil,   nil,   429,
   nil,   nil,   nil,   nil,   nil,   nil, 23712,   nil, 23360, 10984,
   nil, 23448,   nil, 23624,   nil,    -7,    30,   nil,  3811,   520,
   nil,  3569,   545,  7656,   nil,   512, 11344,   nil,   nil,   556,
   566,   nil,   644,   478,  9680,   166, 20704, 19024,   587, 12544,
   nil,   606,   nil,   nil,   260,   727,   -38,   nil,   nil,   nil,
   566,   nil,  7536,   nil,   nil,   737,   nil,   665,   nil,   305,
   629,   664,   nil,   nil,   nil,  2359,   nil,   -11, 11824,   nil,
   nil,   nil, 23536,  1028, 12184,   774,   nil,   779,   nil, 23228,
 23756,   674, 20344,   nil,  3206, 20824,   nil,   nil,  4295,  1875,
   nil, 23184,   nil,   nil,  1633,   811,   nil,   712,   nil,   nil,
   707, 15424,   725,   nil, 14944,   766, 14824,   nil, 14704,   nil,
  1149,   nil,   nil,   626,   nil,   nil,   nil,   738,   nil,   741,
   743,   nil,   739,   783,   nil,   nil,  1270,   521,   496,   210,
   840,   nil,   885,   114,   nil,   nil,   nil,   nil,   266, 10152,
   900,   901,  2480,   805,   nil,   nil,  9560,   nil,   792,  9320,
   nil,   801,   nil, 22803,   919,  2843,   nil,   nil,   -43,   nil,
   nil,   954, 22402,  8008, 22986,   522,   nil,  3690,   nil,   nil,
   nil,   nil,   nil,   nil,   977,   nil,  6216,   864,   nil,  5736,
   nil,   nil,   nil,   985,   872,   nil,    21,   502,   920,    31,
    45,   642,   nil,   898, 14584,   nil,   901,   nil,   nil,   335,
   nil,   nil, 19384,   nil,   911,   nil ]

racc_action_default = [
    -1,  -499,  -497,  -499,  -497,  -375,  -499,  -499,  -251,  -290,
  -413,  -497,  -376,  -318,   -61,    -2,  -499,  -414,  -497,  -377,
  -319,  -499,  -273,  -499,   -65,  -499,  -320,  -499,  -499,  -499,
  -321,  -499,  -499,  -499,   -34,   -71,  -380,  -499,  -497,  -428,
  -488,  -407,  -486,  -499,   -20,   -40,  -499,  -427,    -5,   -42,
  -284,  -426,  -499,  -497,   -43,  -287,  -266,    -6,  -417,  -351,
  -499,  -267,  -499,  -423,  -374,   -47,  -476,  -268,  -422,  -419,
  -269,  -499,  -424,  -418,  -270,  -497,  -425,  -420,  -216,  -271,
  -499,  -486,  -421,  -497,  -272,   -35,  -497,  -430,  -497,  -499,
  -294,  -431,  -497,  -373,  -499,  -297,   -70,  -499,   896,  -499,
  -395,  -499,  -497,  -499,  -499,  -499,  -318,  -319,  -273,  -499,
  -499,  -428,  -488,  -499,  -284,  -287,  -351,  -322,  -334,  -335,
   -53,  -355,  -346,  -352,  -499,  -289,  -497,  -291,  -499,  -385,
  -499,  -378,  -499,  -499,  -273,  -238,  -261,  -471,  -428,  -499,
  -217,  -230,  -497,   -45,  -499,  -499,  -498,  -499,  -499,  -498,
    -8,  -499,  -499,  -391,   -46,  -499,  -273,  -499,  -428,  -499,
   -94,  -499,   -91,   -92,  -499,  -499,  -209,  -499,   -82,   -66,
   -75,  -499,  -497,   -68,  -311,   -73,  -193,  -168,  -150,  -121,
  -169,  -139,  -170,  -153,  -108,  -141,  -129,  -171,  -126,  -152,
  -130,  -157,  -172,  -127,  -142,  -117,  -159,  -124,  -136,  -128,
  -165,  -118,  -151,  -123,  -138,  -144,  -119,  -143,  -125,  -158,
  -120,  -134,  -109,  -148,  -115,  -135,  -499,  -313,  -147,  -160,
  -113,  -132,  -110,  -167,  -106,   -99,  -133,  -111,  -466,  -162,
  -100,   -96,  -161,  -107,   -98,  -114,  -163,  -154,  -116,  -146,
  -145,  -164,   -97,  -140,  -149,  -131,  -465,  -112,  -166,  -137,
  -156,  -122,  -155,  -101,  -132,  -133,   -96,  -161,  -102,    -9,
  -154,  -499,  -164,   -97,  -149,  -499,  -194,  -103,   -14,  -499,
  -499,  -415,  -416,  -365,  -499,  -489,  -499,  -494,  -487,  -493,
  -495,    -4,  -280,  -499,  -499,  -499,  -499,  -499,  -499,  -499,
  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,
  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,
  -497,  -343,  -340,   -44,   -41,  -499,   -61,  -499,  -499,  -497,
   -60,  -499,  -499,  -499,  -499,  -499,  -499,   -59,  -350,  -208,
   -39,  -499,  -499,  -499,  -276,  -499,  -218,  -488,  -490,  -499,
  -490,  -499,  -499,  -487,  -486,  -499,  -408,  -406,  -410,  -409,
  -411,  -468,  -490,  -499,  -490,  -499,  -393,  -499,  -499,  -499,
  -499,  -499,   -69,   -38,  -396,  -397,  -382,  -400,  -398,  -251,
  -483,  -477,  -482,  -349,  -478,  -499,  -497,  -480,  -477,  -479,
  -478,  -499,  -497,  -499,  -303,  -415,  -416,  -499,  -280,   -54,
   -50,  -497,  -497,  -252,  -253,  -254,  -499,  -230,  -488,  -488,
  -498,  -383,  -499,  -387,  -384,  -499,  -497,  -499,  -258,  -499,
  -499,  -280,  -499,  -260,  -499,  -231,  -499,  -498,  -499,  -233,
  -499,  -390,  -389,  -499,  -497,  -499,  -308,   -93,   -91,   -92,
  -499,  -433,  -306,  -432,  -182,   -30,  -499,  -499,  -499,  -497,
  -499,   -74,   -81,  -499,   -67,  -497,  -485,  -484,  -315,  -446,
  -499,  -499,   -13,   -12,   -11,  -104,   -36,   -37,  -499,  -499,
  -497,  -497,  -275,  -214,  -499,    -7,  -496,  -499,  -497,  -203,
  -189,  -184,  -204,  -188,  -499,  -205,  -185,  -210,  -200,  -186,
  -211,  -202,  -201,  -212,  -199,  -213,  -195,  -206,  -187,  -207,
  -196,  -197,  -190,  -198,  -183,  -499,  -497,  -325,  -497,  -324,
  -323,  -278,   -62,  -499,  -499,  -286,   -15,   -16,   -17,   -18,
   -19,  -497,  -251,  -477,  -478,  -251,  -488,  -282,  -219,  -491,
  -220,  -492,  -488,  -222,  -492,   -31,  -261,  -173,   -23,  -499,
  -499,  -497,  -499,  -499,  -499,  -412,  -470,  -492,  -283,  -469,
  -394,  -379,   -33,   -32,   -24,  -499,  -381,  -175,   -25,  -499,
  -497,  -499,   -57,  -348,  -499,  -499,  -281,   -55,  -229,  -347,
  -228,  -499,  -499,  -499,  -481,  -279,  -499,  -497,  -477,  -478,
  -499,  -497,  -356,  -338,  -499,  -336,  -353,  -250,  -256,  -499,
  -499,   -40,  -499,  -498,  -224,  -499,  -499,  -499,  -499,  -499,
  -388,  -386,  -481,  -279,  -499,  -477,  -478,  -473,  -173,  -259,
  -262,  -499,  -498,  -499,  -237,  -499,  -472,  -499,  -392,   -95,
   -91,   -92,  -499,  -499,  -435,  -499,  -497,   -78,   -80,  -499,
  -477,  -478,   -72,  -499,  -499,  -464,  -445,  -451,  -454,  -459,
  -450,  -499,  -457,  -456,  -461,  -448,  -499,  -497,  -460,  -447,
  -464,  -449,  -464,  -446,  -488,   -10,  -499,  -191,  -192,  -497,
  -497,  -332,  -367,  -366,  -368,  -497,  -499,  -181,  -499,  -499,
   -22,  -341,  -497,  -326,   -62,  -285,  -497,   -49,  -345,   -48,
  -344,  -499,  -262,  -499,  -223,  -499,  -499,  -265,  -499,  -301,
  -499,  -359,  -499,  -499,  -328,  -295,  -329,  -327,  -298,  -499,
  -405,  -399,  -402,  -403,  -404,   -58,  -179,   -29,  -180,  -499,
   -56,  -177,   -27,  -178,   -28,  -281,  -499,   -51,  -497,  -499,
  -337,  -497,  -499,  -499,  -255,  -498,  -499,  -243,  -225,  -497,
  -497,  -226,  -499,  -488,  -499,  -281,  -499,  -499,  -498,  -499,
  -235,  -498,  -281,  -309,  -499,  -499,   -76,  -312,  -316,  -444,
  -499,  -458,  -499,  -462,  -437,  -499,  -441,  -499,  -443,  -499,
  -488,  -499,  -105,  -333,    -3,  -497,  -372,  -499,  -499,  -370,
  -288,   -21,  -215,  -497,  -499,  -499,  -330,  -499,  -277,  -488,
  -174,  -263,  -499,  -302,  -497,  -499,  -361,  -300,  -497,  -497,
  -401,  -176,   -26,  -304,  -497,  -499,  -339,  -499,  -257,  -240,
  -498,  -499,  -498,  -249,  -499,  -499,  -499,  -232,  -499,  -234,
  -497,  -434,  -307,  -446,  -463,  -453,  -314,  -464,  -452,  -464,
  -464,  -455,  -499,  -499,  -467,  -371,  -497,  -499,   -90,   -83,
  -499,  -369,  -499,  -499,  -292,  -293,  -221,  -264,  -497,  -499,
  -499,  -499,  -497,  -499,  -357,  -354,  -499,  -239,  -498,  -499,
  -245,  -498,  -227,  -498,  -499,  -497,  -440,  -439,  -499,  -442,
  -436,  -365,  -499,  -497,  -499,   -89,  -342,  -497,  -358,  -363,
  -362,  -360,  -296,  -299,  -499,   -52,  -499,  -498,  -241,  -499,
  -244,  -236,  -310,  -499,  -464,  -364,  -481,   -88,  -499,  -477,
  -478,  -497,  -305,  -498,  -499,  -246,  -498,  -317,  -438,   -84,
  -331,  -242,  -499,  -247,  -498,  -248 ]

clist = [
'140,141,274,460,532,217,109,140,141,259,166,267,225,122,225,176,225',
'119,399,266,100,369,335,376,389,498,117,129,135,637,626,318,149,330',
'153,135,650,140,141,149,117,511,150,117,117,403,316,329,280,375,606',
'146,419,281,427,258,120,258,146,346,143,739,140,337,328,135,225,154',
'685,149,572,576,688,140,496,807,746,810,748,765,99,811,525,276,370,246',
'362,280,146,140,337,336,342,668,353,127,670,313,542,100,580,393,351',
'320,356,354,578,327,100,646,122,140,141,140,397,117,169,432,336,161',
'140,328,784,174,352,571,216,448,516,358,520,329,523,778,361,140,779',
'435,570,135,832,135,396,149,536,149,539,616,613,800,443,434,445,449',
'624,387,606,803,712,345,763,392,146,444,400,316,711,433,359,391,708',
'394,680,398,858,661,874,655,757,315,811,131,355,283,130,402,451,151',
'691,331,551,550,117,615,750,809,683,268,278,754,808,2,652,450,1,,,,344',
',,,,,,,,,,,,,,,626,,,,,783,,,,,,,,,,,,346,767,846,,847,849,,225,,707',
',512,515,,,,,,,,,,463,,,,,,,540,469,470,471,472,473,474,475,476,477',
'478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494',
'503,890,,668,670,,567,465,,,,140,141,888,,316,,528,,,590,609,,604,,',
',,369,522,376,527,566,544,,,548,,,135,,,,149,,,,140,567,,547,606,,280',
'15,510,594,,534,,567,,146,567,606,,,370,,,,504,140,337,612,,,553,,,',
',529,518,,581,845,626,,619,,370,,774,,560,140,337,529,434,140,336,598',
',140,317,547,860,140,370,575,575,623,577,140,337,,583,,,552,,370,,370',
'336,,557,,140,337,,645,,,,602,225,,614,,,,336,585,588,,,647,648,,140',
'506,507,508,509,,657,336,695,,,,,700,,,,,,816,,,,606,,,,258,651,654',
',,,723,,,,545,717,,549,,859,317,,,,,,,,529,,,,,,730,719,720,140,,,140',
'575,,,,606,140,,,140,317,,,140,,,697,560,,,560,,857,702,704,,,,,,696',
'698,,,,,,701,703,,687,,,,687,,,,671,667,,,669,,674,,,553,140,,681,,709',
',,140,722,,,735,875,,560,119,,,575,140,,39,,,117,140,111,,,,,738,745',
',,39,,,225,602,158,,,170,158,,,,158,793,733,,,,,752,6,39,,,225,104,797',
',,799,,132,,,6,,39,744,132,155,,762,167,155,,,,,,,,,,,495,769,6,770',
'140,,,756,,317,140,258,759,782,132,,132,6,,651,,,,651,132,170,132,781',
'751,,,,,,837,132,840,,706,132,,140,,,140,132,,,,,,,696,687,701,703,',
'140,,,167,132,,,,,132,,,789,140,39,,792,,,560,560,,,,801,868,734,,870',
',871,132,,132,,790,,,,,,,,140,39,170,140,,844,6,795,,94,,885,,,,567',
',,117,140,,132,140,94,781,,843,891,132,,893,,,,813,,6,167,895,,,878',
',,,94,,,,,873,,,826,,,,140,658,,94,,,,140,,,140,,,,,,,,,370,,,,,140',
'337,,,651,,,662,,,,,,140,,867,140,,,,666,,,,,,39,,,336,,140,,,,,,314',
',140,678,22,,,,,108,314,,,,823,132,132,,22,334,651,39,689,156,6,,168',
'156,,314,39,94,,,,,,39,,,22,,,,,363,,,,,,,,,,22,6,,,,,94,,,,6,,132,132',
'132,132,132,6,,,,,,,,,,,,,,,132,,,,,,,,,,,168,,,,,132,132,426,132,132',
',,,,,,,,,,,,,753,,,,,,,132,,,,,,,,,,,,,132,,,22,,,,,,,,132,,,,39,,,',
',,,,,,,94,,,132,,,,22,168,,,,39,785,,,787,,132,,,,,,6,,,,,132,,,94,',
',,,,,,,94,39,132,80,,,6,94,118,456,457,,,,39,,,80,,815,,,,,,,,822,,',
',,,,39,,6,,828,80,,,830,831,,,,,833,6,,,,39,80,,,,,,,,314,314,314,314',
',,,6,,,22,,,,,111,,,851,,,,,,,,6,,,,132,,,,864,,314,132,132,314,,,22',
',,,132,,,,104,22,,,,,,39,22,881,,,,,94,132,,,,,,,,334,,,,,39,,,80,,',
',,,94,,,39,132,6,,,,,,,,,,,,,,,,,,,80,,6,,,,94,,,,,,,,6,,,644,,94,,',
',,,,,,,,,656,,,,,,,39,94,,39,,,,,,,,,,,,,,,,,94,,,,,,132,,22,,,,,,,6',
',,6,,,,,,,,,39,,,819,22,,,,39,,,,,,,,,,,39,,80,,39,39,,,,,39,,,,,22',
'6,,,817,94,,,,6,132,39,,22,,,,,314,80,6,,,,6,6,94,39,80,,6,,,22,,80',
',,94,,,,,39,,,6,,,,,,22,690,,,39,,,,,,6,314,,,,,39,8,,,,,,,108,,6,,8',
',,8,,,,8,,,,6,,,,,,94,,132,94,,,6,,8,,,,,,,,,,,,8,22,8,8,,,,,,,8,,8',
',,,,,,,,8,22,,,8,,94,,,,8,,,22,94,,80,,408,,,,,,,94,8,,,94,94,8,,417',
',94,,,,80,,,,,,,,,,,,94,,8,,8,,,,,,,,,,,,94,,80,,8,22,,314,22,,,,,,',
'80,94,,,8,,,,,,,8,,,94,,,,,8,80,,,,,,94,,,,,,,,,,,22,,80,818,,,,,22',
',,,,,,,,,,22,,,,22,22,,118,,,22,,,,,,,,,,,,,,,,22,,,,,,,,,,,,,,,,22',
',,,,,,80,,,,,,,,,22,,8,8,,,,,,,,8,80,22,,,,,,,,,,,80,22,,,,,526,,,,',
',,,,,,,,8,,,543,,,,,,8,,8,8,8,8,8,8,,,,,,,,,,,,,,,8,,,,,,,,,80,579,',
'80,,,,8,8,,8,8,,,,,597,,,,600,,,,605,,,,,,,,8,,,,,,,,,,,,,8,,80,,,821',
',,,,80,8,,,,,,,,,,80,653,,,80,80,,,8,,80,,,,,,,,,,,,,8,,,80,,,8,,,,',
'8,,,,,,,,80,,,,,,8,,,,8,,,,,,80,,,672,,,605,,,,,,677,80,,526,,,,672',
',,,,8,80,,,,,,,,,,,,8,,,,,,,,,,,,,,,,,,,,8,,,,,,,715,,,,,,,600,,,,,8',
',,,8,,,728,,,,8,8,731,,,,,,,8,,,,,,,,,,,,,,,,,,,8,,,,,,,,,,,,,,,,,,',
',,,,,,,8,8,,,,,,,,,,,,,,,,771,,,,,8,776,,,,,,,,,,,8,,,,,,,,,,,,,,,,',
',,,,,,605,,,,,,,,,,,,,605,,,,,,,,,,,,,805,8,,,,,,,,,8,,,8,,,,,,,,,,',
',,,,,,827,,,672,,,,,,,,,,,,,,,,838,,,841,,,,,8,,,,,,,,8,8,,,,,,,,,,8',
',,,8,8,,,,,8,861,,,,,,,600,,,605,,,,,8,,,,,,,,,,,,,,,,8,,,,,,883,,,886',
',,,,,,8,,,,,,,,605,,,,,8,,,894,,,,,8,,,,8' ]
        racc_goto_table = arr = Array.new(2302, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,29,3,5,81,48,82,28,29,13,28,13,49,58,49,28,49,18,32,28,10,33,21,33',
'35,78,54,10,61,85,134,41,57,17,10,61,6,28,29,57,54,78,11,54,54,122,40',
'28,84,21,140,55,60,9,46,51,34,51,55,48,31,133,28,29,58,61,49,31,80,57',
'36,36,80,28,103,132,133,132,133,79,119,136,23,53,49,74,44,84,55,28,29',
'10,9,59,75,76,59,31,23,10,65,63,10,34,10,57,62,34,10,52,58,28,29,28',
'29,54,43,83,10,47,28,58,38,47,55,37,86,87,88,89,56,28,56,90,91,28,92',
'17,93,61,94,61,10,57,56,57,56,95,96,97,41,28,98,99,100,53,140,101,66',
'119,104,106,55,44,55,40,107,84,119,108,109,31,110,31,111,36,132,112',
'113,15,136,117,118,27,120,121,26,123,124,15,125,126,54,128,129,131,81',
'14,12,7,135,4,23,139,1,,,,15,,,,,,,,,,,,,,,,134,,,,,80,,,,,,,,,,,,48',
'6,133,,133,133,,49,,36,,33,33,,,,,,,,,,28,,,,,,,122,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,41,79,,59',
'59,,33,11,,,,28,29,133,,40,,17,,,122,46,,60,,,,,33,28,33,28,21,17,,',
'17,,,61,,,,57,,,,28,33,,28,140,,84,2,11,21,,9,,33,,55,33,140,,,49,,',
',31,28,29,21,,,58,,,,,55,53,,28,85,134,,21,,49,,78,,10,28,29,55,28,28',
'10,28,,28,2,28,6,28,49,10,10,3,61,28,29,,57,,,34,,49,,49,10,,34,,28',
'29,,13,,,,57,49,,84,,,,10,53,53,,,28,28,,28,15,15,15,15,,28,10,35,,',
',,35,,,,,,78,,,,140,,,,51,10,10,,,,32,,,,15,60,,15,,81,2,,,,,,,,55,',
',,,,60,33,33,28,,,28,10,,,,140,28,,,28,2,,,28,,,17,10,,,10,,78,17,17',
',,,,,28,28,,,,,,28,28,,84,,,,84,,,,53,34,,,34,,53,,,58,28,,55,,82,,',
'28,29,,,3,5,,10,18,,,10,28,,45,,,54,28,45,,,,,48,3,,,45,,,49,57,45,',
',45,45,,,,45,60,84,,,,,13,20,45,,,49,20,60,,,60,,20,,,20,,45,84,20,20',
',28,20,20,,,,,,,,,,,2,28,20,28,28,,,10,,2,28,51,10,17,20,,20,20,,10',
',,,10,20,45,20,28,53,,,,,,60,20,60,,15,20,,28,,,28,20,,,,,,,28,84,28',
'28,,28,,,20,20,,,,,20,,,61,28,45,,57,,,10,10,,,,84,60,15,,60,,60,20',
',20,,55,,,,,,,,28,45,45,28,,3,20,53,,19,,60,,,,33,,,54,28,,20,28,19',
'28,,28,60,20,,60,,,,53,,20,20,60,,,21,,,,19,,,,,3,,,53,,,,28,2,,19,',
',,28,,,28,,,,,,,,,49,,,,,28,29,,,10,,,2,,,,,,28,,57,28,,,,2,,,,,,45',
',,10,,28,,,,,,25,,28,2,22,,,,,22,25,,,,15,20,20,,22,25,10,45,2,22,20',
',22,22,,25,45,19,,,,,,45,,,22,,,,,25,,,,,,,,,,22,20,,,,,19,,,,20,,20',
'20,20,20,20,20,,,,,,,,,,,,,,,20,,,,,,,,,,,22,,,,,20,20,25,20,20,,,,',
',,,,,,,,,2,,,,,,,20,,,,,,,,,,,,,20,,,22,,,,,,,,20,,,,45,,,,,,,,,,,19',
',,20,,,,22,22,,,,45,2,,,2,,20,,,,,,20,,,,,20,,,19,,,,,,,,,19,45,20,16',
',,20,19,16,25,25,,,,45,,,16,,2,,,,,,,,2,,,,,,,45,,20,,2,16,,,2,2,,,',
',2,20,,,,45,16,,,,,,,,25,25,25,25,,,,20,,,22,,,,,45,,,2,,,,,,,,20,,',
',20,,,,2,,25,20,20,25,,,22,,,,20,,,,20,22,,,,,,45,22,2,,,,,19,20,,,',
',,,,25,,,,,45,,,16,,,,,,19,,,45,20,20,,,,,,,,,,,,,,,,,,,16,,20,,,,19',
',,,,,,,20,,,25,,19,,,,,,,,,,,,25,,,,,,,45,19,,45,,,,,,,,,,,,,,,,,19',
',,,,,20,,22,,,,,,,20,,,20,,,,,,,,,45,,,45,22,,,,45,,,,,,,,,,,45,,16',
',45,45,,,,,45,,,,,22,20,,,20,19,,,,20,20,45,,22,,,,,25,16,20,,,,20,20',
'19,45,16,,20,,,22,,16,,,19,,,,,45,,,20,,,,,,22,22,,,45,,,,,,20,25,,',
',,45,39,,,,,,,22,,20,,39,,,39,,,,39,,,,20,,,,,,19,,20,19,,,20,,39,,',
',,,,,,,,,39,22,39,39,,,,,,,39,,39,,,,,,,,,39,22,,,39,,19,,,,39,,,22',
'19,,16,,24,,,,,,,19,39,,,19,19,39,,24,,19,,,,16,,,,,,,,,,,,19,,39,,39',
',,,,,,,,,,,19,,16,,39,22,,25,22,,,,,,,16,19,,,39,,,,,,,39,,,19,,,,,39',
'16,,,,,,19,,,,,,,,,,,22,,16,22,,,,,22,,,,,,,,,,,22,,,,22,22,,16,,,22',
',,,,,,,,,,,,,,,22,,,,,,,,,,,,,,,,22,,,,,,,16,,,,,,,,,22,,39,39,,,,,',
',,39,16,22,,,,,,,,,,,16,22,,,,,24,,,,,,,,,,,,,39,,,24,,,,,,39,,39,39',
'39,39,39,39,,,,,,,,,,,,,,,39,,,,,,,,,16,24,,16,,,,39,39,,39,39,,,,,24',
',,,24,,,,24,,,,,,,,39,,,,,,,,,,,,,39,,16,,,16,,,,,16,39,,,,,,,,,,16',
'24,,,16,16,,,39,,16,,,,,,,,,,,,,39,,,16,,,39,,,,,39,,,,,,,,16,,,,,,39',
',,,39,,,,,,16,,,24,,,24,,,,,,24,16,,24,,,,24,,,,,39,16,,,,,,,,,,,,39',
',,,,,,,,,,,,,,,,,,,39,,,,,,,24,,,,,,,24,,,,,39,,,,39,,,24,,,,39,39,24',
',,,,,,39,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,39,39,,,,,,,',
',,,,,,,,24,,,,,39,24,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,',
',,,24,,,,,,,,,,,,,24,39,,,,,,,,,39,,,39,,,,,,,,,,,,,,,,,24,,,24,,,,',
',,,,,,,,,,,24,,,24,,,,,39,,,,,,,,39,39,,,,,,,,,,39,,,,39,39,,,,,39,24',
',,,,,,24,,,24,,,,,39,,,,,,,,,,,,,,,,39,,,,,,24,,,24,,,,,,,39,,,,,,,',
'24,,,,,39,,,24,,,,,39,,,,39' ]
        racc_goto_check = arr = Array.new(2302, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   204,   349,   -36,   201,  -270,  -424,  -451,   nil,    11,
    16,    26,   156,   -22,   164,   127,  1086,   -27,    10,   766,
   623,   -53,   879,  -259,  1400,   825,   -73,   139,   -13,   -12,
   nil,    47,  -108,   -80,    48,   -96,  -321,  -265,  -585,  1444,
    -7,   -22,   nil,    92,   -10,   588,  -105,    98,   -24,   -17,
   nil,    24,  -346,    43,    19,    38,  -208,    19,     5,  -419,
   -97,    15,  -289,   -23,   nil,  -295,  -420,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    56,     8,    86,   nil,  -290,  -583,
  -477,  -338,    -1,   -44,     6,  -420,    97,   -89,  -206,    39,
  -552,    39,  -552,  -246,  -643,  -285,  -278,  -584,   -22,   -64,
  -294,  -581,   nil,  -238,  -501,   nil,    38,  -410,    48,  -402,
  -361,  -654,  -284,  -477,   nil,   nil,   nil,   169,    94,    76,
   173,    55,   -85,   169,  -363,  -178,  -176,   nil,  -238,  -449,
   nil,  -552,  -672,  -564,  -419,  -547,  -668,   nil,   nil,   -25,
  -368 ]

racc_goto_default = [
   nil,   nil,   273,   nil,   nil,   nil,   766,   nil,    42,   nil,
    48,    57,   343,   nil,   nil,   nil,   145,    85,    89,   147,
   165,   nil,   134,   nil,   136,    34,   nil,   nil,    45,    49,
    54,   nil,    65,   563,   nil,   nil,   nil,   nil,   nil,   105,
    14,   nil,    24,    27,    35,   138,   160,   nil,   253,   377,
   230,    64,   nil,   nil,    78,   338,   nil,   340,   558,   559,
   415,   599,   nil,   nil,   124,   nil,   nil,   413,    56,    61,
    67,    70,    74,    79,    84,   nil,   125,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   500,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   311,   nil,   nil,   373,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    93,     5,    12,    19,   nil,   nil,
   nil,   nil,   364,   nil,   nil,   nil,   nil,   347,   nil,   636,
   640,   642,   625,   nil,   804,   627,   628,   629,   631,   nil,
   137 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 145, :_reduce_101,
  1, 145, :_reduce_102,
  1, 146, :_reduce_103,
  0, 184, :_reduce_104,
  4, 146, :_reduce_105,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_173,
  5, 160, :_reduce_174,
  3, 160, :_reduce_175,
  6, 160, :_reduce_176,
  5, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  4, 160, :_reduce_181,
  3, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  4, 160, :_reduce_191,
  4, 160, :_reduce_192,
  2, 160, :_reduce_193,
  2, 160, :_reduce_194,
  3, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  2, 160, :_reduce_208,
  2, 160, :_reduce_209,
  3, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  5, 160, :_reduce_215,
  1, 160, :_reduce_none,
  1, 156, :_reduce_217,
  1, 153, :_reduce_none,
  2, 153, :_reduce_219,
  2, 153, :_reduce_220,
  5, 153, :_reduce_221,
  2, 153, :_reduce_222,
  3, 153, :_reduce_223,
  3, 190, :_reduce_224,
  4, 190, :_reduce_225,
  4, 190, :_reduce_226,
  6, 190, :_reduce_227,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 163, :_reduce_230,
  2, 163, :_reduce_231,
  5, 163, :_reduce_232,
  2, 163, :_reduce_233,
  5, 163, :_reduce_234,
  4, 163, :_reduce_235,
  7, 163, :_reduce_236,
  3, 163, :_reduce_237,
  1, 163, :_reduce_none,
  4, 194, :_reduce_239,
  3, 194, :_reduce_240,
  5, 194, :_reduce_241,
  7, 194, :_reduce_242,
  2, 194, :_reduce_243,
  5, 194, :_reduce_244,
  4, 194, :_reduce_245,
  6, 194, :_reduce_246,
  7, 194, :_reduce_247,
  9, 194, :_reduce_248,
  3, 194, :_reduce_249,
  1, 194, :_reduce_none,
  0, 196, :_reduce_251,
  2, 166, :_reduce_252,
  1, 195, :_reduce_none,
  0, 197, :_reduce_254,
  3, 195, :_reduce_255,
  0, 198, :_reduce_256,
  4, 195, :_reduce_257,
  2, 193, :_reduce_258,
  2, 192, :_reduce_259,
  1, 192, :_reduce_none,
  1, 187, :_reduce_261,
  3, 187, :_reduce_262,
  3, 155, :_reduce_263,
  4, 155, :_reduce_264,
  2, 155, :_reduce_265,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_274,
  3, 186, :_reduce_275,
  0, 220, :_reduce_276,
  5, 186, :_reduce_277,
  3, 186, :_reduce_278,
  3, 186, :_reduce_279,
  2, 186, :_reduce_280,
  4, 186, :_reduce_281,
  3, 186, :_reduce_282,
  3, 186, :_reduce_283,
  1, 186, :_reduce_284,
  4, 186, :_reduce_285,
  3, 186, :_reduce_286,
  1, 186, :_reduce_287,
  5, 186, :_reduce_288,
  2, 186, :_reduce_289,
  1, 186, :_reduce_none,
  2, 186, :_reduce_291,
  6, 186, :_reduce_292,
  6, 186, :_reduce_293,
  0, 221, :_reduce_294,
  0, 222, :_reduce_295,
  7, 186, :_reduce_296,
  0, 223, :_reduce_297,
  0, 224, :_reduce_298,
  7, 186, :_reduce_299,
  5, 186, :_reduce_300,
  4, 186, :_reduce_301,
  5, 186, :_reduce_302,
  0, 225, :_reduce_303,
  0, 226, :_reduce_304,
  9, 186, :_reduce_305,
  0, 227, :_reduce_306,
  6, 186, :_reduce_307,
  0, 228, :_reduce_308,
  0, 229, :_reduce_309,
  8, 186, :_reduce_310,
  0, 230, :_reduce_311,
  5, 186, :_reduce_312,
  0, 231, :_reduce_313,
  6, 186, :_reduce_314,
  0, 232, :_reduce_315,
  0, 233, :_reduce_316,
  9, 186, :_reduce_317,
  1, 186, :_reduce_318,
  1, 186, :_reduce_319,
  1, 186, :_reduce_320,
  1, 186, :_reduce_321,
  1, 152, :_reduce_322,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 211, :_reduce_none,
  5, 211, :_reduce_331,
  1, 138, :_reduce_none,
  2, 138, :_reduce_333,
  1, 214, :_reduce_none,
  1, 214, :_reduce_335,
  1, 168, :_reduce_none,
  2, 168, :_reduce_337,
  1, 168, :_reduce_338,
  3, 168, :_reduce_339,
  0, 235, :_reduce_340,
  0, 236, :_reduce_341,
  6, 234, :_reduce_342,
  2, 164, :_reduce_343,
  4, 164, :_reduce_344,
  4, 164, :_reduce_345,
  2, 209, :_reduce_346,
  4, 209, :_reduce_347,
  4, 209, :_reduce_348,
  3, 209, :_reduce_349,
  2, 209, :_reduce_350,
  1, 209, :_reduce_351,
  0, 238, :_reduce_352,
  0, 239, :_reduce_353,
  6, 208, :_reduce_354,
  0, 240, :_reduce_355,
  0, 241, :_reduce_356,
  6, 208, :_reduce_357,
  5, 213, :_reduce_358,
  1, 242, :_reduce_none,
  4, 242, :_reduce_360,
  2, 242, :_reduce_361,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  6, 137, :_reduce_364,
  0, 137, :_reduce_365,
  1, 244, :_reduce_366,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  2, 245, :_reduce_369,
  1, 245, :_reduce_none,
  2, 139, :_reduce_371,
  1, 139, :_reduce_none,
  1, 200, :_reduce_373,
  1, 200, :_reduce_374,
  1, 200, :_reduce_none,
  1, 201, :_reduce_376,
  1, 248, :_reduce_none,
  2, 248, :_reduce_378,
  3, 249, :_reduce_379,
  1, 249, :_reduce_380,
  3, 202, :_reduce_381,
  3, 203, :_reduce_382,
  3, 204, :_reduce_383,
  3, 204, :_reduce_384,
  1, 252, :_reduce_385,
  3, 252, :_reduce_386,
  1, 253, :_reduce_none,
  2, 253, :_reduce_388,
  3, 205, :_reduce_389,
  3, 205, :_reduce_390,
  1, 255, :_reduce_391,
  3, 255, :_reduce_392,
  1, 250, :_reduce_393,
  2, 250, :_reduce_394,
  1, 251, :_reduce_395,
  2, 251, :_reduce_396,
  1, 254, :_reduce_397,
  0, 257, :_reduce_398,
  3, 254, :_reduce_399,
  0, 258, :_reduce_400,
  4, 254, :_reduce_401,
  1, 256, :_reduce_402,
  1, 256, :_reduce_403,
  1, 256, :_reduce_404,
  1, 256, :_reduce_none,
  2, 183, :_reduce_406,
  1, 183, :_reduce_407,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 259, :_reduce_none,
  3, 247, :_reduce_412,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  2, 246, :_reduce_415,
  2, 246, :_reduce_416,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_422,
  1, 177, :_reduce_423,
  1, 177, :_reduce_424,
  1, 177, :_reduce_425,
  1, 177, :_reduce_426,
  1, 177, :_reduce_427,
  1, 206, :_reduce_428,
  1, 151, :_reduce_429,
  1, 154, :_reduce_430,
  1, 154, :_reduce_431,
  1, 215, :_reduce_432,
  0, 260, :_reduce_433,
  4, 215, :_reduce_434,
  2, 215, :_reduce_435,
  4, 217, :_reduce_436,
  2, 217, :_reduce_437,
  6, 261, :_reduce_438,
  4, 261, :_reduce_439,
  4, 261, :_reduce_440,
  2, 261, :_reduce_441,
  4, 261, :_reduce_442,
  2, 261, :_reduce_443,
  2, 261, :_reduce_444,
  1, 261, :_reduce_445,
  0, 261, :_reduce_446,
  1, 267, :_reduce_447,
  1, 267, :_reduce_448,
  1, 267, :_reduce_449,
  1, 267, :_reduce_450,
  1, 262, :_reduce_451,
  3, 262, :_reduce_452,
  3, 268, :_reduce_453,
  1, 263, :_reduce_454,
  3, 263, :_reduce_455,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  2, 264, :_reduce_458,
  1, 264, :_reduce_459,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  2, 266, :_reduce_462,
  2, 265, :_reduce_463,
  0, 265, :_reduce_464,
  1, 218, :_reduce_none,
  0, 271, :_reduce_466,
  5, 218, :_reduce_467,
  1, 207, :_reduce_468,
  2, 207, :_reduce_469,
  2, 207, :_reduce_470,
  1, 189, :_reduce_none,
  3, 189, :_reduce_472,
  3, 272, :_reduce_473,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 216, :_reduce_493,
  1, 216, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_496,
  0, 142, :_reduce_497,
  0, 199, :_reduce_498 ]

Parser::Racc_reduce_n = 499

Parser::Racc_shift_n = 896

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :t_STRING => 120,
  :tSYMBOL => 121,
  :tNL => 122,
  :tEH => 123,
  :tCOLON => 124,
  :tCOMMA => 125,
  :tSPACE => 126,
  :tSEMI => 127,
  :tLBRACK_STR => 128,
  :tLAST_TOKEN => 129,
  :tEQL => 130,
  :tLOWEST => 131 }

Parser::Racc_nt_base = 132

Racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  Parser::Racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  Parser::Racc_shift_n,
  Parser::Racc_reduce_n,
  Racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "t_STRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLBRACK_STR",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "do_block",
  "@24",
  "@25",
  "operation3",
  "@26",
  "@27",
  "@28",
  "@29",
  "when_args",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@30",
  "@31",
  "sym",
  "@32",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@33",
  "assoc" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, vofs)
		      # program:
                      @lexer.lex_state=( RubyLexer::Expr_beg )
                      result = val[vofs]
                    
    result
end

def _reduce_2(val, vofs)
		      # compstmt
                      result = val[vofs+ 1]
                    
    result
end

def _reduce_3(val, vofs)
		      # bodystmt: compstmt opt_rescue opt_else opt_ensure
                      result = new_body( val, vofs)
                    
    result
end

def _reduce_4(val, vofs)
		      # compstmt: stmts opt_terms
                      result = new_compstmt(val[vofs])
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, vofs)
		      # | stmts terms stmt
                      result = self.block_append( val[vofs], val[vofs + 2])
                    
    result
end

def _reduce_8(val, vofs)
		      # | error stmt
                      result = val[vofs + 1]
                    
    result
end

def _reduce_9(val, vofs)
		      # stmt: kALIAS fitem
                      lx = @lexer
                      lx.lex_state=( RubyLexer::Expr_fname )
                      result = -901 # lx.lineno_
                    
    result
end

def _reduce_10(val, vofs)
		      # kALIAS fitem   fitem
                      result = RubyAliasNode.s(val[vofs + 1], val[vofs + 3])
                      result.src_offset=( val[vofs].src_offset ) # of kALIAS RpNameToken
                    
    result
end

def _reduce_11(val, vofs)
		      # | kALIAS tGVAR tGVA
                      result = RubyGlobalVarAliasNode.s( val[vofs + 1].symval, val[vofs + 2].symval) # s(:valias)
                    
    result
end

def _reduce_12(val, vofs)
		      # | kALIAS tGVAR tBACK_REF
                      result = RubyGlobalVarAliasNode.s( val[vofs + 1].symval, :"$#{val[vofs + 2]}" )  # s(:valias)
                    
    result
end

def _reduce_13(val, vofs)
		      # | kALIAS tGVAR tNTH_REF
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, vofs)
		      # | kUNDEF undef_list
                      result = val[vofs + 1]
                    
    result
end

def _reduce_15(val, vofs)
		      # | stmt kIF_MOD expr_value
                      result = new_if(val[vofs + 2], val[vofs ], nil ) 
                      result.src_offset=( val[vofs + 1].src_offset )
                    
    result
end

def _reduce_16(val, vofs)
		      # | stmt kUNLESS_MOD expr_value
                      result = new_if( val[vofs + 2], nil, val[vofs])
                      result.src_offset=( val[vofs + 1].src_offset )
                    
    result
end

def _reduce_17(val, vofs)
		      # | stmt kWHILE_MOD expr_value  
                      # val_[1] is kWHILE_MOD RpNameToken
                      result = new_while( val[vofs ], val[vofs + 2] )
                      result.src_offset=( val[vofs + 1].src_offset) # kWHILE_MOD  RpNameToken
                    
    result
end

def _reduce_18(val, vofs)
		      # | stmt kUNTIL_MOD expr_value   
                      # val_[1] is kUNTIL_MOD RpNameToken
                      result = new_until( val[vofs ], val[vofs + 2] )
                      result.src_offset=( val[vofs + 1].src_offset )
                    
    result
end

def _reduce_19(val, vofs)
		      # | stmt kRESCUE_MOD stmt
                      # result = s(:rescue, val_[0], s(:resbody, s(:array), val_[2]))
                      resbody = RubyRescueBodyNode.s(nil, val[vofs + 2])
                      result = RubyRescueNode.s( val[vofs ], resbody, nil)
                      ofs = val[vofs + 1].src_offset  # # kRESCUE position
                      result.src_offset=( ofs )
                      resbody.src_offset=( ofs )
                    
    result
end

def _reduce_20(val, vofs)
		      # | klBEGIN
                      if (@in_def || @in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      @env.extend( false)
                      result = val[vofs]
                    
    result
end

def _reduce_21(val, vofs)
		      # tLCURLY compstmt tRCURLY
                      # result = new_iter s(:preexe), nil, val[vofs + 3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_22(val, vofs)
		      # | klEND tLCURLY compstmt tRCURLY
                      if (@in_def || @in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      # result = new_iter s(:postexe), nil, val_[2]
                      result = new_iter(nil, val[vofs + 2])
                    
    result
end

def _reduce_23(val, vofs)
		      # | lhs tEQL command_call
                      result = self.node_assign(val[vofs ], val[vofs + 2])
                    
    result
end

def _reduce_24(val, vofs)
		      # | mlhs tEQL command_call
                      result = masgn_append_arg( val[vofs ], val[vofs + 2] ) 
                    
    result
end

def _reduce_25(val, vofs)
		      # | var_lhs tOP_ASGN command_call
                      result = new_op_asgn(val, vofs)
                    
    result
end

def _reduce_26(val, vofs)
		      # | primary_value tLBRACK_STR aref_args tRBRACK tOP_ASGN command_call
                      result = RubyOpElementAsgnNode.s(val[vofs ], val[vofs + 2], val[vofs + 4], val[vofs + 5]) # s(:op_asgn1 )
                    
    result
end

def _reduce_27(val, vofs)
		      # | primary_value tDOT tIDENTIFIER tOP_ASGN command_call
                      raise_error(":op_asgn never seen from MRI parser ")
                      # result = s(:op_asgn, val_[0], val_[4], val_[2], val_[3])
                      result = nil
                    
    result
end

def _reduce_28(val, vofs)
		      # | primary_value tDOT tCONSTANT tOP_ASGN command_call
                      raise_error(":op_asgn never seen from MRI parser ")
		      # result = s(:op_asgn, val_[0], val_[4], val_[2], val_[3])
		      result = nil
		    
    result
end

def _reduce_29(val, vofs)
		        # | primary_value tCOLON2 tIDENTIFIER tOP_ASGN command_call
                        raise_error(":op_asgn never seen from MRI parser ")
			# result = s(:op_asgn, val_[0], val_[4], val_[2], val_[3])
                        result = nil
		      
    result
end

def _reduce_30(val, vofs)
			# | backref tOP_ASGN command_call
                        v_zero = val[vofs ] 
			self.backref_assign_error( v_zero )
                        result = v_zero 
		      
    result
end

def _reduce_31(val, vofs)
			# | lhs tEQL mrhs
			result = self.node_assign(val[vofs ], RubySValueNode.s( val[vofs + 2]))
		      
    result
end

def _reduce_32(val, vofs)
			# | mlhs tEQL arg_value
			result =  masgn_append_arg(val[vofs ], val[vofs + 2] )
		      
    result
end

def _reduce_33(val, vofs)
			# | mlhs tEQL mrhs
			result = masgn_append_mrhs( val[vofs ], val[vofs + 2] )
		      
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, vofs)
			# | expr kAND expr
			result = logop( RubyAndNode,  val[vofs ], val[vofs + 2])  # s(:and )
		      
    result
end

def _reduce_37(val, vofs)
			# | expr kOR expr
			result = logop( RubyOrNode, val[vofs ], val[vofs + 2]) # s(:or )
		      
    result
end

def _reduce_38(val, vofs)
			# | kNOT expr
			result = RubyNotNode.s( val[vofs + 1]) # s(:not )
		      
    result
end

def _reduce_39(val, vofs)
			# | tBANG command_call
			result = RubyNotNode.s( val[vofs + 1]) # s(:not )
		      
    result
end

# reduce 40 omitted

def _reduce_41(val, vofs)
			# expr_value: expr
			result = value_expr(val[vofs ])
		      
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, vofs)
			# | kRETURN call_args
			# result = s(:return, ret_args(val_[1]))
                        result = RubyReturnNode.s( ret_args(val[vofs + 1]))
			result.src_offset=( val[vofs ].src_offset ) # of the kRETURN
		      
    result
end

def _reduce_45(val, vofs)
			# | kBREAK call_args
			# result = s(:break, ret_args(val_[1]))
                        result = RubyBreakNode.s( ret_args(val[vofs + 1]))
                        result.src_offset=( val[vofs ].src_offset ) #  of the kBREAK
		      
    result
end

def _reduce_46(val, vofs)
			# | kNEXT call_args
			# result = s(:next, ret_args(val_[1]))
                        result = RubyNextNode.s( ret_args(val[vofs + 1]))
                        result.src_offset=( val[vofs ].src_offset ) #  of the kNEXT
		      
    result
end

# reduce 47 omitted

def _reduce_48(val, vofs)
			# | block_call tDOT operation2 command_args
			result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
		      
    result
end

def _reduce_49(val, vofs)
			# | block_call tCOLON2 operation2 command_args
			result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
		      
    result
end

def _reduce_50(val, vofs)
			# cmd_brace_block: tLBRACE_ARG
			@env.extend( true ) # (:dynamic)
			result = -902 #  @lexer.lineno_
		      
    result
end

def _reduce_51(val, vofs)
			# opt_block_var
			result = @env.dynamic_keys
		      
    result
end

def _reduce_52(val, vofs)
			#  compstmt tRCURLY
			result = new_iter(val[vofs + 2], val[vofs + 4])
                      @env.unextend
                    
    result
end

def _reduce_53(val, vofs)
		      # command: operation command_args =tLOWEST
                      result = new_fcall( val[vofs ], val[vofs + 1])
                    
    result
end

def _reduce_54(val, vofs)
		      # | operation command_args cmd_brace_block
                      result = new_fcall( val[vofs ], val[vofs + 1])
                      v_two = val[vofs + 2]
                      if v_two then
                        if v_two.class.equal?(RubyBlockPassNode) # v_two[0] == :block_pass 
                          raise "both block arg and actual block given"
                        end
                        # result, operation = val_[2], result
                        # result.insert 1, operation
                        iter = v_two
                        call = result
                        iter.call=(call)
                        result = iter
                      end
                    
    result
end

def _reduce_55(val, vofs)
		      # | primary_value tDOT operation2 command_args =tLOWEST
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_56(val, vofs)
		      # | primary_value tDOT operation2 command_args cmd_brace_block
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_57(val, vofs)
		      # | primary_value tCOLON2 operation2 command_args =tLOWEST
                      result = new_call(val[vofs], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_58(val, vofs)
		      # | primary_value tCOLON2 operation2 command_args cmd_brace_block
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                      if val[vofs + 4] then
                        #if result[0] == :block_pass then # REFACTOR
                        if result.rcvr.class.equal?(RubyBlockPassNode) 
                          raise "both block arg and actual block given"
                        end
                        raise_error("dont know how to append to selector") 
                        val[vofs + 2] << result
                        result = val[vofs + 2]
                      end
                    
    result
end

def _reduce_59(val, vofs)
		      # | kSUPER command_args
                      result = new_super( val, vofs )
                    
    result
end

def _reduce_60(val, vofs)
		      # | kYIELD command_args
                      result = new_yield( val[vofs + 1] )
                      result.src_offset=( val[vofs ].src_offset ) # of the kYIELD
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, vofs)
		      # | tLPAREN mlhs_entry tRPAREN
                      result = val[vofs + 1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, vofs)
		      # mlhs_entry: mlhs_basic #  | tLPAREN mlhs_entry tRPAREN
                      # result = s(:masgn, s(:array, val_[1]))
                      ofs = val[vofs ].src_offset  #  of the tLPAREN
                      result = new_parasgn( RubyArrayNode.s(val[vofs + 1]) , ofs )
                    
    result
end

def _reduce_65(val, vofs)
		      # mlhs_basic: mlhs_head # result = s(:masgn, val_[0])
                      v_zero = val[vofs ]
                      result = new_parasgn( v_zero , v_zero.src_offset )
                    
    result
end

def _reduce_66(val, vofs)
		      # mlhs_basic: mlhs_head #  | mlhs_head mlhs_item
                      # result = s(:masgn, val_[0] << val_[1].compact)
                      v_zero = val[vofs ]
                      v_one = val[vofs + 1]
                      v_zero.append( v_one )
                      ofs = v_one.src_offset 
                      result = new_parasgn( v_zero, ofs )
                    
    result
end

def _reduce_67(val, vofs)
		      # mlhs_basic: mlhs_head #   mlhs_head tSTAR mlhs_node
                      # result = s(:masgn, val_[0] << s(:splat, val_[2])) 
                      v_zero = val[vofs ]
                      ofs = val[vofs + 1].src_offset # of the tSTAR
                      v_zero.append(  RubySplatNode.s(val[vofs + 2] ))
                      result = new_parasgn( v_zero , ofs )
                    
    result
end

def _reduce_68(val, vofs)
		      # mlhs_basic: mlhs_head #   mlhs_head tSTAR
                      # result = s(:masgn, val_[0] << s(:splat))
                      v_zero = val[vofs ]
                      v_zero.append(  RubySplatNode.s( nil ))
                      ofs = val[vofs + 1].src_offset  #  of the tSTAR
                      result = new_parasgn( v_zero, ofs )
                    
    result
end

def _reduce_69(val, vofs)
		      # mlhs_basic: mlhs_head #   tSTAR mlhs_node
                      # result = s(:masgn, s(:array, s(:splat, val_[1])))
                      ofs = val[vofs ].src_offset  #  of the tSTAR
             result = new_parasgn( RubyArrayNode.s( RubySplatNode.s( val[vofs + 1])), ofs )
                    
    result
end

def _reduce_70(val, vofs)
		      # mlhs_basic: mlhs_head #  | tSTAR
                      # result = s(:masgn, s(:array, s(:splat)))
                      ofs = val[vofs ].src_offset  #  of the tSTAR
                result = new_parasgn( RubyArrayNode.s( RubySplatNode.s(nil)), ofs )
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, vofs)
		      # mlhs_item: mlhs_node #  | tLPAREN mlhs_entry tRPAREN
                      result = val[vofs + 1]  # mlhs_item: mlhs_node ; tLPAREN mlhs_entry tRPAREN
                    
    result
end

def _reduce_73(val, vofs)
		      # mlhs_head: mlhs_item tCOMMA
                      # result = s(:array, val_[0]) # mlhs_head: mlhs_item tCOMMA
                      result = RubyArrayNode.s( val[vofs ])
                    
    result
end

def _reduce_74(val, vofs)
		      # mlhs_head: mlhs_item tCOMMA #  | mlhs_head mlhs_item tCOMMA
                      # result = val_[0] << val_[1].compact
                      v_zero = val[vofs ]
                      v_zero.append( val[vofs + 1] )
                      result = v_zero
                    
    result
end

def _reduce_75(val, vofs)
		      # mlhs_node: variable
                      result = self.assignable(val[vofs ], nil)
                    
    result
end

def _reduce_76(val, vofs)
		      # mlhs_node: variable #  | primary_value tLBRACK_STR aref_args tRBRACK
                      result = RubyAttrAssignNode.s(val[vofs ], :"[]=", val[vofs + 2] )
                      result.src_offset=( val[vofs + 3].src_offset )  # position of tRBRACK
                    
    result
end

def _reduce_77(val, vofs)
		      # mlhs_node: variable #  | primary_value tDOT tIDENTIFIER
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=", s(:arglist))
                      # the  tIDENTIFIER value will be a RpNameToken
                      #  all places where we send   symval   we expect a  RpNameToken
            result = RubyAttrAssignNode.s_tk(val[vofs ], val[vofs + 2], nil )
                    
    result
end

def _reduce_78(val, vofs)
		      # mlhs_node: variable #  | primary_value tCOLON2 tIDENTIFIER
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=", s(:arglist))
                      # the  tIDENTIFIER value will be a RpNameToken
           result = RubyAttrAssignNode.s_tk( val[vofs ], val[vofs + 2], nil )
                    
    result
end

def _reduce_79(val, vofs)
		      # mlhs_node: variable #  | primary_value tDOT tCONSTANT
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=", s(:arglist))
           result = RubyAttrAssignNode.s_tk( val[vofs ], val[vofs + 2], nil)
                    
    result
end

def _reduce_80(val, vofs)
		      # mlhs_node: variable #  | primary_value tCOLON2 tCONSTANT
                      if (@in_def || @in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end
                    # all RubyColon2Node.s  expect second arg to be a RpNameToken
                    #  result = s(:const, s(:colon2, val_[0], val_[2].to_sym), nil)
             nam = val[vofs + 2]
             result = RubyConstDeclNode.s( RubyColon2Node.s( val[vofs ], nam ), nil)
             result.src_offset=( nam.src_offset )
                    
    result
end

def _reduce_81(val, vofs)
		      # mlhs_node: variable #  | tCOLON3 tCONSTANT
                      if (@in_def || @in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end
                      # all RubyColon3Node.s  expects arg to be a RpNameToken
                      # result = s(:const, nil, s(:colon3, val_[1].to_sym))
                   nam = val[vofs + 1]
                   result = RubyConstDeclNode.s( RubyColon3Node.s( nam ), nil )
                   result.src_offset=( nam.src_offset )
                    
    result
end

def _reduce_82(val, vofs)
		      # mlhs_node: variable #  | backref
                      self.backref_assign_error( val[vofs ] ) 
                      result = val[vofs]
                    
    result
end

def _reduce_83(val, vofs)
		      # lhs: variable
                      result = self.assignable(val[vofs ], nil)
                    
    result
end

def _reduce_84(val, vofs)
		      # lhs: variable #   | primary_value tLBRACK_STR aref_args tRBRACK
                      result = RubyAttrAssignNode.s(val[vofs ], :"[]=", val[vofs + 2] )
                      result.src_offset=( val[vofs + 3].src_offset )  # position of tRBRACK
                    
    result
end

def _reduce_85(val, vofs)
		      # lhs: variable #  | primary_value tDOT tIDENTIFIER
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=")
                      # the  tIDENTIFIER value will be a RpNameToken
                      result = RubyAttrAssignNode.s_tk(val[vofs ], val[vofs + 2], nil)
                    
    result
end

def _reduce_86(val, vofs)
		      # lhs: variable #  | primary_value tCOLON2 tIDENTIFIER
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=")
                      # the  tIDENTIFIER value will be a RpNameToken
		      result = RubyAttrAssignNode.s_tk(val[vofs ], val[vofs + 2], nil)
                    
    result
end

def _reduce_87(val, vofs)
		      # lhs: variable #  | primary_value tDOT tCONSTANT
                      # result = s(:attrasgn, val_[0], :"#{val_[2]}=")
                      result = RubyAttrAssignNode.s_tk( val[vofs ], val[vofs + 2], nil)
                    
    result
end

def _reduce_88(val, vofs)
		      # lhs: variable #  | primary_value tCOLON2 tCONSTANT
                      if (@in_def || @in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end
                      # result = s(:const, s(:colon2, val_[0], val_[2].to_sym))
             nam = val[vofs + 2] 
             result = RubyConstDeclNode.s( RubyColon2Node.s( val[vofs ], nam ), nil)
             result.src_offset=( nam.src_offset )
                    
    result
end

def _reduce_89(val, vofs)
		      # lhs: variable #  | tCOLON3 tCONSTANT
                      if (@in_def || @in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      # result = s(:const, s(:colon3, val_[1].to_sym))
             nam = val[vofs + 1]
             result = RubyConstDeclNode.s( RubyColon3Node.s( nam ), nil )
             result.src_offset=( nam.src_offset )
                    
    result
end

def _reduce_90(val, vofs)
		      # lhs: variable #  | backref
                      self.backref_assign_error( val[vofs ] ) 
                      result = val[vofs]
                    
    result
end

def _reduce_91(val, vofs)
		      # cname: tIDENTIFIER
                      yyerror "class/module name must be CONSTANT"
                      result = val[vofs]
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, vofs)
		      # cpath: tCOLON3 cname
                      # result = s(:colon3, val_[1].to_sym)
                      result = RubyColon3Node.s( val[vofs + 1] )
                    
    result
end

def _reduce_94(val, vofs)
		      # cpath: tCOLON3 cname #   | cname  
# TODO, fix trac_1001.rb 
                      result = val[vofs ]  # a RpNameToken
                    
    result
end

def _reduce_95(val, vofs)
		      #  cpath: tCOLON3 cname #   | primary_value tCOLON2 cname
                      # result = s(:colon2, val_[0], val_[2].to_sym)
                      result =  RubyColon2Node.s( val[vofs ], val[vofs + 2] )
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, vofs)
		      # fname: tIDENTIFIER | tCONSTANT | tFID #  | op
                      @lexer.lex_state=( RubyLexer::Expr_end )
                      result = val[vofs ]   # val_[0] is a RpNameToken
                    
    result
end

def _reduce_100(val, vofs)
		      # fname: tIDENTIFIER | tCONSTANT | tFID #  | reswords
                      @lexer.lex_state=( RubyLexer::Expr_end )
                      result = val[vofs ]  # val_[0] is a RpNameToken or a String
                    
    result
end

def _reduce_101(val, vofs)
                           # TODO: cruby has fsym and dsym
		      # fitem: fname
                      v_zero = val[vofs ]  # a RpNameToken
		      result = RubySymbolNode.s( v_zero.symval)  # s(:lit)
                      result.src_offset=( v_zero.src_offset )
                      # fitem - fname path
                    
    result
end

def _reduce_102(val, vofs)
		       #  fitem: fname #    | symbol 
		       result = RubySymbolNode.s( val[vofs ])  # s(:lit)
			# fitem - symbol path 
                    
    result
end

def _reduce_103(val, vofs)
		      # undef_list: fitem
                      vsym = val[vofs ]   # a RubySymbolNode
                      result = new_undef( vsym )
                      result.src_offset=( val[ vofs - 1 ].src_offset ) # of the kUNDEF
                    
    result
end

def _reduce_104(val, vofs)
		      # undef_list: fitem #  | undef_list tCOMMA
                      @lexer.lex_state=( RubyLexer::Expr_fname )
                    
    result
end

def _reduce_105(val, vofs)
		      # undef_list: fitem #   fitem
                      result = append_undef( val[vofs ], val[vofs + 3] )
                    
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

def _reduce_173(val, vofs)
		      #  arg: lhs tEQL arg
                      result = self.node_assign(val[vofs ], val[vofs + 2])
                    
    result
end

def _reduce_174(val, vofs)
		      # | lhs tEQL arg kRESCUE_MOD arg
         # result = self.node_assign(val_[0], s(:rescue, val_[2], s(:resbody, s(:array), val_[4])) )
                      resbody = RubyRescueBodyNode.s(nil, val[vofs + 4])
                      resbody.src_offset=( val[vofs + 3].src_offset )   # kRESCUE_MOD position
                      rescue_nod = RubyRescueNode.s( val[vofs + 2], resbody, nil)
                      rescue_nod.src_offset=( val[vofs + 1].src_offset )   # tEQL position
                      result = self.node_assign(val[vofs ], rescue_nod )        # Fix trac 545
                    
    result
end

def _reduce_175(val, vofs)
		      # | var_lhs tOP_ASGN arg
                      result = new_op_asgn( val, vofs )
                    
    result
end

def _reduce_176(val, vofs)
		      # | primary_value tLBRACK_STR aref_args tRBRACK tOP_ASGN arg
                      v_two = val[vofs + 2]
                      unless v_two.class.equal?(RubyRpCallArgs) ; 
                        raise_error('aref_args is not a RubyRpCallArgs')
                      end
                      result = RubyOpElementAsgnNode.s(val[vofs ], v_two, val[vofs + 4], val[vofs + 5])
                    
    result
end

def _reduce_177(val, vofs)
		      # | primary_value tDOT tIDENTIFIER tOP_ASGN arg
                      # result = s(:op_asgn2, val_[0], :"#{val_[2]}=", val_[3].to_sym, val_[4])
                      # val_[2], val_[3] are RpNameToken
                     result = RubyOpAsgnNode.s(val[vofs ], val[vofs + 2], val[vofs + 3], val[vofs + 4])
                    
    result
end

def _reduce_178(val, vofs)
		     # | primary_value tDOT tCONSTANT tOP_ASGN arg
                     # result = s(:op_asgn2, val_[0], :"#{val_[2]}=", val_[3].to_sym, val_[4])
                     # val_[2], val_[3] are RpNameToken
	             result = RubyOpAsgnNode.s(val[vofs ], val[vofs + 2], val[vofs + 3], val[vofs + 4])
                    
    result
end

def _reduce_179(val, vofs)
		      # | primary_value tCOLON2 tIDENTIFIER tOP_ASGN arg
                      raise_error(":op_asgn never seen from MRI parser ")
                      # result = s(:op_asgn, val_[0], val_[4], val_[2], val_[3])
                      result = nil
                    
    result
end

def _reduce_180(val, vofs)
		      # | primary_value tCOLON2 tCONSTANT tOP_ASGN ar
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_181(val, vofs)
		      # | tCOLON3 tCONSTANT tOP_ASGN arg
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, vofs)
		      # | backref tOP_ASGN arg
                      self.backref_assign_error( val[vofs ])  
                      result = val[vofs]
                    
    result
end

def _reduce_183(val, vofs)
		      # ! arg tDOT2 arg
                      v1 = val[vofs ]
                      v2 = val[vofs + 2]
                      result = RubyDotNode.s(:dot2, v1, v2)
		      result.src_offset=( val[vofs + 1 ].src_offset ) # of the DOT2
                    
    result
end

def _reduce_184(val, vofs)
		      # | arg tDOT3 arg
                      v1 = val[vofs ]
                      v2 = val[vofs + 2]
                      result = RubyDotNode.s(:dot3, v1, v2)
		      result.src_offset=( val[vofs + 1 ].src_offset ) # of the DOT3
                    
    result
end

def _reduce_185(val, vofs)
		      # | arg tPLUS arg
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2]  ) 
                    
    result
end

def _reduce_186(val, vofs)
		      # | arg tMINUS arg
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2]  )
                    
    result
end

def _reduce_187(val, vofs)
		      # | arg tSTAR2 arg
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2]  )
                    
    result
end

def _reduce_188(val, vofs)
		      # | arg tDIVIDE arg
                      result = new_call_1( val[vofs ], val[vofs + 1], val[vofs + 2] )  # tDIVIDE_a
                    
    result
end

def _reduce_189(val, vofs)
		      # | arg tPERCENT arg
                      result = new_call_1(val[vofs ], val[vofs + 1] , val[vofs + 2] )  # tPERCENT_a
                    
    result
end

def _reduce_190(val, vofs)
		      # | arg tPOW arg
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] ) # tPOW_a
                    
    result
end

def _reduce_191(val, vofs)
		      # | tUMINUS_NUM tINTEGER tPOW arg
                      lit_one =  RubyAbstractNumberNode.s( val[vofs + 1])  # s(:lit )
                      pow_sel = val[vofs + 2]
                      minus_sel = RpNameToken.new( :"-@" , pow_sel.src_offset )
                      result = new_vcall( new_call_1( lit_one, pow_sel, val[vofs + 3] ), minus_sel )
                    
    result
end

def _reduce_192(val, vofs)
		      # | tUMINUS_NUM tFLOAT tPOW arg
                      lit_one = RubyAbstractNumberNode.s( val[vofs + 1])  # s(:lit )
                      pow_sel = val[vofs + 2]
                      minus_sel = RpNameToken.new( :"-@" , pow_sel.src_offset )
                      result = new_vcall(new_call_1( lit_one, pow_sel, val[vofs + 3] ), minus_sel )
                    
    result
end

def _reduce_193(val, vofs)
		      # | tUPLUS arg
                      v_one = val[vofs + 1]
                      if v_one.kind_of?(RubyAbstractLiteralNode) # val_[1][0] == :lit 
                        result = v_one
                      else
                        sel_tok = RpNameToken.new( :"+@" , val[vofs ].src_offset )
                        result = new_vcall( v_one, sel_tok )
                      end
                    
    result
end

def _reduce_194(val, vofs)
		      #  | tUMINUS arg
                      sel_tok = RpNameToken.new( :"-@" , val[vofs ].src_offset )
                      result = new_vcall( val[vofs + 1], sel_tok )
                    
    result
end

def _reduce_195(val, vofs)
		      # | arg tPIPE arg
                      result = new_call_1( val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_196(val, vofs)
		      # | arg tCARET arg
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_197(val, vofs)
		      # | arg tAMPER2 arg
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_198(val, vofs)
		      # | arg tCMP arg
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_199(val, vofs)
		      # | arg tGT arg
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_200(val, vofs)
		      # | arg tGEQ arg
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_201(val, vofs)
		      # | arg tLT arg
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_202(val, vofs)
		      # | arg tLEQ arg
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_203(val, vofs)
		      # | arg tEQ arg
                      result = new_call_1(val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_204(val, vofs)
		      # | arg tEQQ arg
                      result = new_call_1(val[vofs ], val[vofs + 1],  val[vofs + 2] )
                    
    result
end

def _reduce_205(val, vofs)
		      # | arg tNEQ arg
					# TODOryan: port call_op and clean these
                      v_zero = value_expr(val[vofs ] ) 
                      v_two = value_expr( val[vofs + 2])
                      sel_tok = RpNameToken.new( :"==" , val[vofs + 1].src_offset ) 
                      result = RubyNotNode.s( new_call_1(v_zero, sel_tok,  v_two ) ) # s(:not )
                    
    result
end

def _reduce_206(val, vofs)
		      # | arg tMATCH arg
                      result = self.get_match_node( val[vofs ], val[vofs + 1], val[vofs + 2] )
                    
    result
end

def _reduce_207(val, vofs)
		      # | arg tNMATCH arg
                      result = RubyNotNode.s( self.get_match_node(val[vofs ], val[vofs + 1], val[vofs + 2])) # s(:not )
                    
    result
end

def _reduce_208(val, vofs)
		      # | tBANG arg
                      result = RubyNotNode.s( val[vofs + 1]) # s(:not )
                    
    result
end

def _reduce_209(val, vofs)
		      # | tTILDE arg           # val_[0] already a NameToken
                      # val_[2] = value_expr( val[2]) # TODO ask ryan , why ??
                      # result = new_call val_[1], :"~", s(:arglist)
                      v_one = value_expr( val[vofs + 1] )
                      result = new_vcall( v_one, val[vofs ] )
                    
    result
end

def _reduce_210(val, vofs)
		      # | arg tLSHFT arg
                      v_zero = value_expr( val[vofs ])
	              v_two = value_expr( val[vofs + 2])
                      result = new_call_1(v_zero, val[vofs + 1],  v_two  )
                    
    result
end

def _reduce_211(val, vofs)
		      # | arg tRSHFT arg
                      v_zero = value_expr( val[vofs ])
                      v_two = value_expr( val[vofs + 2])
                      result = new_call_1(v_zero , val[vofs + 1],  v_two )
                    
    result
end

def _reduce_212(val, vofs)
		      # | arg tANDOP arg
                      result = logop( RubyAndNode, val[vofs ], val[vofs + 2]) # s(:and )
                    
    result
end

def _reduce_213(val, vofs)
		      # | arg tOROP arg
                      result = logop( RubyOrNode, val[vofs ], val[vofs + 2]) # s(:or )
                    
    result
end

def _reduce_214(val, vofs)
		      # | kDEFINED opt_nl arg
                      result = RubyDefinedNode.s( val[vofs + 2])  # s(:defined )
                    
    result
end

def _reduce_215(val, vofs)
		      # | arg tEH arg tCOLON arg
                      result = RubyIfNode.s(val[vofs ], val[vofs + 2], val[vofs + 4]) # s(:if )
                    
    result
end

# reduce 216 omitted

def _reduce_217(val, vofs)
		      # arg_value: arg
                      result = value_expr(val[vofs ])
                    
    result
end

# reduce 218 omitted

def _reduce_219(val, vofs)
		      #  | command opt_nl
                      warning 'parenthesize argument(s) for future version'
                      # result = s(:array, val_[0])
                      result = RubyRpCallArgs.s( val[vofs ])
                    
    result
end

def _reduce_220(val, vofs)
		      # | args trailer
                      result = val[vofs ]
                    
    result
end

def _reduce_221(val, vofs)
		      #  | args tCOMMA tSTAR arg opt_nl
                      result = val[vofs ]
                      result.append( RubySplatNode.s( val[vofs + 3] ))
                    
    result
end

def _reduce_222(val, vofs)
		      #  | assocs trailer
                      # result = s(:array, s(:hash, *val_[0].values))
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ] ))
                    
    result
end

def _reduce_223(val, vofs)
		      #  | tSTAR arg opt_nl
                      # result = s(:array, s(:splat, val_[1]))
                     result = RubyRpCallArgs.s( RubySplatNode.s( val[vofs + 1])) 
                    
    result
end

def _reduce_224(val, vofs)
		      #  paren_args: tLPAREN2 none tRPAREN
                      result = val[vofs + 1]
                    
    result
end

def _reduce_225(val, vofs)
		      #  | tLPAREN2 call_args opt_nl tRPAREN
                      result = val[vofs + 1]
                    
    result
end

def _reduce_226(val, vofs)
		      #  | tLPAREN2 block_call opt_nl tRPAREN
                      warning "parenthesize argument(s) for future version"
                      # result = s(:array, val_[1])
                      result = RubyRpCallArgs.s( val[vofs + 1])
                    
    result
end

def _reduce_227(val, vofs)
		      # | tLPAREN2 args tCOMMA block_call opt_nl tRPAREN
                      warning "parenthesize argument(s) for future version"
                      # result = val_[1].add val_[3]
                      result = val[vofs + 1].append(  val[vofs + 3] )
                    
    result
end

# reduce 228 omitted

# reduce 229 omitted

def _reduce_230(val, vofs)
		      # call_args: command
                      warning "parenthesize argument(s) for future version"
                      # result = s(:array, val_[0])
                      result = RubyRpCallArgs.s( val[vofs ])
                    
    result
end

def _reduce_231(val, vofs)
		      #  | args opt_block_arg
                      result = val[vofs ]  # should be a RubyRpCallArgs
                      result.append_blk_arg( val[vofs + 1])
                    
    result
end

def _reduce_232(val, vofs)
		      #  | args tCOMMA tSTAR arg_value opt_block_arg
                      result = val[vofs ]  # should be a RubyRpCallArgs
                      result.append_arg( RubySplatNode.s( val[vofs + 3]) )
                      result.append_blk_arg( val[vofs + 4])
                    
    result
end

def _reduce_233(val, vofs)
		      #  | assocs opt_block_arg
                      # result = s(:array, s(:hash, *val_[0].values))
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ] ))
                      result.append_blk_arg( val[vofs + 1] )
                    
    result
end

def _reduce_234(val, vofs)
		      #  ! assocs tCOMMA tSTAR arg_value opt_block_arg
                      # result = self.arg_concat s(:array, s(:hash, *val_[0].values)), val_[3]
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ]) )
                      result.append_arg( RubySplatNode.s( val[vofs + 3] ) )
                      result.append_blk_arg( val[vofs + 4] )
                    
    result
end

def _reduce_235(val, vofs)
		      #  | args tCOMMA assocs opt_block_arg
                      # result = val_[0] << s(:hash, *val_[2].values)
                      result = val[vofs ]
                      result.append_arg( RubyHashNode.s( val[vofs + 2] ))
                      result.append_blk_arg( val[vofs + 3])
                    
    result
end

def _reduce_236(val, vofs)
		      #  | args tCOMMA assocs tCOMMA tSTAR arg opt_block_arg
                      # val_[0] << s(:hash, *val_[2].values)
                      result = val[vofs ]
                      result.append_arg( RubyHashNode.s( val[vofs + 2] ))
                      result.append_arg( RubySplatNode.s( val[vofs + 5] ))
                      result.append_blk_arg( val[vofs + 6])
                    
    result
end

def _reduce_237(val, vofs)
		      #  | tSTAR arg_value opt_block_arg
                      # result = self.arg_blk_pass s(:splat, val_[1]), val_[2]
                      result = RubyRpCallArgs.s( RubySplatNode.s( val[vofs + 1]))
                      result.append_blk_arg( val[vofs + 2] )
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, vofs)
		      #  call_args2: arg_value tCOMMA args opt_block_arg
                      args = self.list_prepend( val[vofs + 2], val[vofs ] )
                      result = args.append_blk_arg( val[vofs + 3] )
                    
    result
end

def _reduce_240(val, vofs)
		      #  | arg_value tCOMMA block_arg
                      result = RubyRpCallArgs.s( val[vofs ])
                      result.append_blk_arg( val[vofs + 2])
                    
    result
end

def _reduce_241(val, vofs)
		      #  | arg_value tCOMMA tSTAR arg_value opt_block_arg
                      result = RubyRpCallArgs.s( val[vofs ])
                      result.append_arg( RubySplatNode.s( val[vofs + 3] ))
                      result.append_blk_arg( val[vofs + 4] )
                    
    result
end

def _reduce_242(val, vofs)
		      #  ! arg_value tCOMMA args tCOMMA tSTAR arg_value opt_block_arg
                      #result = self.arg_concat s(:array, val_[0], s(:hash, *val_[2].values)), val_[5]
                      result = RubyRpCallArgs.s(val[vofs ], RubyHashNode.s( val[vofs + 2]) )
                      result.append_arg( val[vofs + 5])
                      result.append_blk_arg( val[vofs + 6] )
                    
    result
end

def _reduce_243(val, vofs)
		      #  | assocs opt_block_arg
                      # result = s(:array, s(:hash, *val_[0].values))
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ] ))
                      result.append_blk_arg( val[vofs + 1])
                    
    result
end

def _reduce_244(val, vofs)
		      #  ! assocs tCOMMA tSTAR arg_value opt_block_arg
                      result = RubyRpCallArgs.s( RubyHashNode.s( val[vofs ]), RubySplatNode.s(val[vofs + 3]) )
                      result.append_blk_arg( val[vofs + 4] )
                    
    result
end

def _reduce_245(val, vofs)
		      #  | arg_value tCOMMA assocs opt_block_arg
                      # result = s(:array, val_[0], s(:hash, *val_[2].values))
                      result = RubyRpCallArgs.s( val[vofs ], RubyHashNode.s( val[vofs + 2]))
                      result.append_blk_arg( val[vofs + 3] )
                    
    result
end

def _reduce_246(val, vofs)
		      #  | arg_value tCOMMA args tCOMMA assocs opt_block_arg
                      result = RubyRpCallArgs.s( val[vofs ] )
                      result.appendAll( val[vofs + 2] ) 
                      result.append_arg( RubyHashNode.s( val[vofs + 4] ))
                      result.append_blk_arg( val[vofs + 5] )
                    
    result
end

def _reduce_247(val, vofs)
		      #  | arg_value tCOMMA assocs tCOMMA tSTAR arg_value opt_block_arg
                      result = RubyRpCallArgs.s( val[vofs ] , RubyHashNode.s( val[vofs + 2] ))
                      result.append_arg( RubySplatNode.s( val[vofs + 5] ))
                      result.append_blk_arg( val[vofs + 6] )
                    
    result
end

def _reduce_248(val, vofs)
		      #  | arg_value tCOMMA args tCOMMA assocs tCOMMA tSTAR arg_value opt_block_arg
                      result = RubyRpCallArgs.s( val[vofs ] )
                      result.appendAll( val[vofs + 2] )  
                      result.append_arg( RubyHashNode.s( val[vofs + 4] ))
                      result.append_arg( RubySplatNode.s( val[vofs + 7]))
                      result.append_blk_arg( val[vofs + 8])
                    
    result
end

def _reduce_249(val, vofs)
		      #  | tSTAR arg_value opt_block_arg
                      result = RubyRpCallArgs.s( RubySplatNode.s( val[vofs + 1]))
                      result.result.append_blk_arg( val[vofs + 2] )
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, vofs)
		      #  command_args:
		      lex_cmdarg = @lexer.cmdarg_ 
                      result = lex_cmdarg.dup
                      lex_cmdarg.push( true )
                    
    result
end

def _reduce_252(val, vofs)
		      #  open_args
                      # @lexer.cmdarg_.stack.replace( val_[0] )
                      @lexer.cmdarg=( val[vofs ].dup  )
                      result = val[vofs + 1]
                    
    result
end

# reduce 253 omitted

def _reduce_254(val, vofs)
		      # open_args: call_args #   | tLPAREN_ARG
                      @lexer.lex_state=( RubyLexer::Expr_endArg )
                      result = val[vofs]
                    
    result
end

def _reduce_255(val, vofs)
		      # open_args: call_args #   tRPAREN 
                      msg = "don't put space before argument parentheses"
                      if @mydebug ; msg << " (B)" ; end 
                      warning(msg)
                      result = nil
                    
    result
end

def _reduce_256(val, vofs)
		      #  | tLPAREN_ARG call_args2
                      @lexer.lex_state=( RubyLexer::Expr_endArg )
                      result = val[vofs]
                    
    result
end

def _reduce_257(val, vofs)
		      #  | tLPAREN_ARG call_args2
		      #    tRPAREN
                      msg = "don't put space before argument parentheses"
                      if @mydebug ; msg << " (C)" ; end 
                      warning(msg)
                      result = val[vofs + 1]
                    
    result
end

def _reduce_258(val, vofs)
		      # block_arg: tAMPER arg_value
                      # result = s(:block_pass, val_[1])
                      result = RubyBlockPassNode.s(val[vofs + 1])
                    
    result
end

def _reduce_259(val, vofs)
		      #  opt_block_arg: tCOMMA block_arg
                      result = val[vofs + 1]
                    
    result
end

# reduce 260 omitted

def _reduce_261(val, vofs)
		      #  args: arg_value
                      result = RubyRpCallArgs.s( val[vofs ]) # s(:array )
                    
    result
end

def _reduce_262(val, vofs)
		      #  | args tCOMMA arg_value
                      result = val[vofs ]
                      result.append_arg( val[vofs + 2])
                    
    result
end

def _reduce_263(val, vofs)
		      # mrhs: args tCOMMA arg_value # result = val_[0] << val_[2] 
                      result = val[vofs ]
                      result.append_arg( val[vofs + 2] )
                    
    result
end

def _reduce_264(val, vofs)
		      # mrhs: args tCOMMA arg_value #  | args tCOMMA tSTAR arg_value
                      result = val[vofs ]
                      result.append_arg( RubySplatNode.s( val[vofs + 3]))
                    
    result
end

def _reduce_265(val, vofs)
		      # mrhs: args tCOMMA arg_value #  | tSTAR arg_value
                      result = RubySplatNode.s( val[vofs + 1])  # s(:splat ) 
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, vofs)
		      # primary: literal
                      result = new_fcall( val[vofs ], nil) 
                    
    result
end

def _reduce_275(val, vofs)
		      # primary: kBEGIN bodystmt kEND
                      if val[vofs + 2].equal?( :tEOF )
                        raise SyntaxError, 'unexpected $end, expecting kEND for kBEGIN'
                      end
                      v_two = val[vofs + 1]  # the  bodystmt
                      unless v_two then
                        result = RubyNilNode._new # s(:nil)
                      else
                        result = RubyKBeginNode.s( v_two ) # s(:begin )
                      end
                    
    result
end

def _reduce_276(val, vofs)
		      # primary: #  | tLPAREN_ARG expr
                      @lexer.lex_state=( RubyLexer::Expr_endArg )
                      result = val[vofs]
                    
    result
end

def _reduce_277(val, vofs)
		      # primary: #  opt_nl tRPAREN
                      warning "(...) interpreted as grouped expression"
                      result = val[vofs + 1]
                    
    result
end

def _reduce_278(val, vofs)
		      # primary: #  | tLPAREN compstmt tRPAREN
                      # result = val_[1] || s(:nil)
                      result = val[vofs + 1] || RubyNilNode._new 
                      result.paren=( true )
                    
    result
end

def _reduce_279(val, vofs)
		      # primary: #  | primary_value tCOLON2 tCONSTANT
                      # result = s(:colon2, val_[0], val_[2].to_sym) 
                      result = RubyColon2Node.s( val[vofs ], val[vofs + 2])
                    
    result
end

def _reduce_280(val, vofs)
		      # primary: # | tCOLON3 tCONSTANT
                      # result = s(:colon3, val_[1].to_sym)  
                      result = RubyColon3Node.s( val[vofs + 1])
                    
    result
end

def _reduce_281(val, vofs)
		      # primary: #  | primary_value tLBRACK_STR aref_args tRBRACK
                      result = new_aref( val, vofs )
                    
    result
end

def _reduce_282(val, vofs)
		      # primary: #  | tLBRACK aref_args tRBRACK
                      # result = val_[1] || s(:array)
                      result = val[vofs + 1] || RubyRpCallArgs._new 
                    
    result
end

def _reduce_283(val, vofs)
		      # primary:  # | tLBRACE assoc_list tRCURLY
                      # result = s(:hash, *val_[1].values)
                      result = RubyHashNode.s( val[vofs + 1] )
                    
    result
end

def _reduce_284(val, vofs)
		      # primary:  # | kRETURN
                      # result = s(:return)
                      result = RubyReturnNode.s(nil)
		      result.src_offset=( val[vofs ].src_offset ) # of the kRETURN
                    
    result
end

def _reduce_285(val, vofs)
		      # primary:  # | kYIELD tLPAREN2 call_args tRPAREN
                      result = new_yield( val[vofs + 2])  
                      result.src_offset=( val[vofs ].src_offset ) # of the kYIELD
                    
    result
end

def _reduce_286(val, vofs)
		      # primary:  # | kYIELD tLPAREN2 tRPAREN
                      result = new_yield_0
                      result.src_offset=( val[vofs ].src_offset ) # of the kYIELD
                    
    result
end

def _reduce_287(val, vofs)
		      # primary:  # | kYIELD
                      result = new_yield_0
                      result.src_offset=( val[vofs ].src_offset ) # of the kYIELD
                    
    result
end

def _reduce_288(val, vofs)
		      # primary:  # | kDEFINED opt_nl tLPAREN2 expr tRPAREN
                      result = RubyDefinedNode.s( val[vofs + 3])   # s(:defined )
                    
    result
end

def _reduce_289(val, vofs)
		      # primary:  # | operation brace_block
                      oper = val[vofs ]
                      iter = val[vofs + 1]
                      call = new_fcall( oper, nil  )  # zero args
                      # iter.insert(1, call)
                      iter.call=(call)
                      result = iter
                      # call.line ||= iter.line
                    
    result
end

# reduce 290 omitted

def _reduce_291(val, vofs)
		      # primary:  # | method_call
                      call = val[vofs ]
                      iter = val[vofs + 1]
                      # iter.insert(1, call)
                      iter.call=(call)
                      result = iter
                    
    result
end

def _reduce_292(val, vofs)
		      # primary:  # | kIF expr_value then compstmt if_tail kEND
                      if val[vofs + 5].equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_if( val[vofs + 1], val[vofs + 3], val[vofs + 4] )
                      result.src_offset=( val[vofs ].src_offset )
                    
    result
end

def _reduce_293(val, vofs)
		      # primary:  # | kUNLESS expr_value then compstmt opt_else kEND
                      if val[vofs + 5].equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_if( val[vofs + 1], val[vofs + 4], val[vofs + 3])
                      result.src_offset=( val[vofs ].src_offset )
                    
    result
end

def _reduce_294(val, vofs)
		      # primary:  # | kWHILE
                      @lexer.cond_.push( true )
                      result = val[vofs]
                    
    result
end

def _reduce_295(val, vofs)
		      # kWHILE  # expr_value do
                      @lexer.cond_.pop
                      result = val[vofs]
                    
    result
end

def _reduce_296(val, vofs)
		      # kWHILE  # compstmt kEND
                      if val[vofs + 6].equal?(:tEOF)
                        premature_eof( val[vofs ] )
                      end
                      result = new_while( val[vofs + 5], val[vofs + 2])
                      result.src_offset=( val[vofs ].src_offset) # kWhile is a RpNameToken
                    
    result
end

def _reduce_297(val, vofs)
		      # primary: | kUNTIL
                      @lexer.cond_.push( true )
                      result = val[vofs]
                    
    result
end

def _reduce_298(val, vofs)
		      # kUNTIL # expr_value do
                      @lexer.cond_.pop
                      result = val[vofs]
                    
    result
end

def _reduce_299(val, vofs)
		      # kUNTIL compstmt kEND
                      if val[vofs + 6].equal?(:tEOF)
                        premature_eof( val[vofs ] )
                      end
                      result = new_until( val[vofs + 5], val[vofs + 2] )
                      result.src_offset=( val[vofs ].src_offset ) # kUNTIL RpNameToken
                    
    result
end

def _reduce_300(val, vofs)
		      #  | kCASE expr_value opt_terms case_body kEND
                      if val[vofs + 4].equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_case( val[vofs + 1], val[vofs + 3])
                      result.src_offset=(   val[vofs ].src_offset ) # kCASE position
                    
    result
end

def _reduce_301(val, vofs)
		      # | kCASE    opt_terms case_body kEND
                      if val[vofs + 3].equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_case( nil, val[vofs + 2] )
                      result.src_offset=(   val[vofs ].src_offset ) # kCASE position
                    
    result
end

def _reduce_302(val, vofs)
		      # | kCASE opt_terms kELSE compstmt kEND
                      if val[vofs + 4].equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_case( nil, val[vofs + 3] )
                      result.src_offset=(   val[vofs ].src_offset ) # kCASE position
                    
    result
end

def _reduce_303(val, vofs)
		      # | kFOR block_var kIN
                      @lexer.cond_.push( true )
                      result = val[vofs]
                    
    result
end

def _reduce_304(val, vofs)
		      # kFOR # expr_value do
                      @lexer.cond_.pop
                      result = val[vofs]
                    
    result
end

def _reduce_305(val, vofs)
		      #  kFOR # compstmt kEND
                      if val[vofs + 8].equal?( :tEOF )
                        premature_eof( val[vofs ] )
                      end
                      result = new_for( val[vofs + 4], val[vofs + 1], val[vofs + 7])
                    
    result
end

def _reduce_306(val, vofs)
		      # kCLASS cpath superclass
                      # @comments.push( @lexer.comments_ )
                      if (@in_def || @in_single > 0) then
raise SyntaxError, "class definition in method body, near line #{@lexer.lineno_}\n cannot continue parsing."
                      end
                      @env.extend( false)
                      result = val[vofs]
                    
    result
end

def _reduce_307(val, vofs)
		      # kCLASS # bodystmt kEND
                      result = new_class( val, vofs )
                      @env.unextend
                    
    result
end

def _reduce_308(val, vofs)
		      # | kCLASS tLSHFT expr
                      result = @in_def
                      @in_def = false
                    
    result
end

def _reduce_309(val, vofs)
		      # | kCLASS tLSHFT # term
                      result = @in_single
                      @in_single = 0
                      @env.extend( false)
                    
    result
end

def _reduce_310(val, vofs)
		      # | kCLASS tLSHFT # bodystmt kEND
                      result = new_sclass(val, vofs )
                      @env.unextend
                    
    result
end

def _reduce_311(val, vofs)
		      # | kMODULE cpath
                      # @comments.push( @lexer.comments_ )
                      if   @in_def or @in_single > 0
                        yyerror "module definition in method body" 
                      end
                      @env.extend( false)
                      result = val[vofs]
                    
    result
end

def _reduce_312(val, vofs)
		      # | kMODULE # bodystmt kEND
                      result = new_module( val, vofs )
                      @env.unextend
                    
    result
end

def _reduce_313(val, vofs)
		      #  | kDEF fname
                      lx = @lexer
                      # @comments.push( lx.comments_ )
                      @in_def = true
                      @env.extend( false)
                      result =  -907  # dummy result, replaces [line, beginOfLine]
                    
    result
end

def _reduce_314(val, vofs)
		      #  | kDEF fname # f_arglist bodystmt kEND
                      result = new_defn( val , vofs )
                      @env.unextend
                      @in_def = false
                    
    result
end

def _reduce_315(val, vofs)
		      # | kDEF singleton dot_or_colon
                      lx = @lexer
                      # @comments.push( lx.comments_ )
                      lx.lex_state=( RubyLexer::Expr_fname )
                      result = val[vofs]
                    
    result
end

def _reduce_316(val, vofs)
		      # | kDEF singleton dot_or_colon # fname
                      @in_single += 1
                      @env.extend( false)
                      @lexer.lex_state=( RubyLexer::Expr_end )# force for args
                      result = val[vofs]
                    
    result
end

def _reduce_317(val, vofs)
		      # | kDEF singleton dot_or_colon # f_arglist bodystmt kEND
                      result = new_defs( val , vofs )

                      @env.unextend
                      @in_single -= 1
                    
    result
end

def _reduce_318(val, vofs)
		      # | kBREAK
                      result = RubyBreakNode.s(nil) # s(:break)
                      result.src_offset=( val[vofs ].src_offset ) #  of the kBREAK
                    
    result
end

def _reduce_319(val, vofs)
		      # | kNEXT
                      result = RubyNextNode.s(nil) #  s(:next)
                      result.src_offset=( val[vofs ].src_offset ) #  of the kNEXT
                    
    result
end

def _reduce_320(val, vofs)
		      # | kREDO
                      result = RubyRedoNode._new # s(:redo)
                      result.src_offset=( val[vofs ].src_offset ) #  of the kREDO
                    
    result
end

def _reduce_321(val, vofs)
		      # | kRETRY
                      result = RubyRetryNode._new # s(:retry)
                      result.src_offset=( val[vofs ].src_offset ) #  of the kRETRY
                    
    result
end

def _reduce_322(val, vofs)
		      # primary_value: primary
                      result = value_expr(val[vofs ])
                    
    result
end

# reduce 323 omitted

# reduce 324 omitted

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

def _reduce_331(val, vofs)
		      # if_tail: opt_else ....
                      result = RubyIfNode.s(val[vofs + 1], val[vofs + 3], val[vofs + 4]) # s(:if )
                    
    result
end

# reduce 332 omitted

def _reduce_333(val, vofs)
		      # opt_else: none ...
                      result = val[vofs + 1]
                    
    result
end

# reduce 334 omitted

def _reduce_335(val, vofs)
		      # block_var: lhs
                      # val_[0].delete_at 1 if val[0][1].nil? # HACK 
                      # Maglev, do nothing for now
                      result = val[vofs]
                    
    result
end

# reduce 336 omitted

def _reduce_337(val, vofs)
		      # opt_block_var: none # | tPIPE tPIPE
                      result = 0
                    
    result
end

def _reduce_338(val, vofs)
		      # opt_block_var: none # | tOROP
                      result = 0
                    
    result
end

def _reduce_339(val, vofs)
		      # opt_block_var: none # | tPIPE block_var tPIPE
                      result = val[vofs + 1]
                    
    result
end

def _reduce_340(val, vofs)
		      # do_block: kDO_BLOCK
		      @env.extend( true ) # (:dynamic)
                      result = val[vofs]
                    
    result
end

def _reduce_341(val, vofs)
		      # do_block: kDO_BLOCK # opt_block_var
                      result = @env.dynamic_keys
                    
    result
end

def _reduce_342(val, vofs)
		      # do_block: kDO_BLOCK # compstmt kEND
                      if val[vofs + 5].equal?( :tEOF )
                        premature_eof( val[vofs] )  # of kDO
                      end
                      vars   = val[vofs + 2]
                      body   = val[vofs + 4]
                      result = new_iter(vars, body)
                      @env.unextend
                    
    result
end

def _reduce_343(val, vofs)
		      # block_call: command do_block
                      v_zero = val[vofs ]
                      if v_zero.equal?(nil)
                        # ok
                      elsif v_zero.class.equal?(RubyBlockPassNode) 
                        raise SyntaxError, "Both block arg and actual block given." 
                      end
                      iter = val[vofs + 1]
                      iter.call=(v_zero)
                      result = iter
                    
    result
end

def _reduce_344(val, vofs)
		      # | block_call tDOT operation2 opt_paren_args
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_345(val, vofs)
		      # | block_call tCOLON2 operation2 opt_paren_args
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3])
                    
    result
end

def _reduce_346(val, vofs)
		      # method_call: operation  paren_args
                      result = new_fcall( val[vofs ], val[vofs + 1] )
                    
    result
end

def _reduce_347(val, vofs)
		      # # method_call: | primary_value tDOT operation2 opt_paren_args
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3] )
                    
    result
end

def _reduce_348(val, vofs)
		      # # method_call: | primary_value tCOLON2 operation2 paren_args
                      result = new_call(val[vofs ], val[vofs + 2], val[vofs + 3] )
                    
    result
end

def _reduce_349(val, vofs)
		      # # method_call: | primary_value tCOLON2 operation3
                      result = new_vcall( val[vofs ], val[vofs + 2] )
                    
    result
end

def _reduce_350(val, vofs)
		      # # method_call: | kSUPER paren_args
                      result = new_super( val , vofs )
                    
    result
end

def _reduce_351(val, vofs)
		      # method_call:  | kSUPER
                      result = RubyZSuperNode._new # s(:zsuper)
                      result.src_offset=( val[vofs].src_offset ) # of the kSUPER
                    
    result
end

def _reduce_352(val, vofs)
		      # brace_block: tLCURLY
		      @env.extend( true ) # (:dynamic)
                      result = -909 # @lexer.lineno_
                    
    result
end

def _reduce_353(val, vofs)
		      # brace_block: tLCURLY # opt_block_var
                      result = @env.dynamic_keys
                    
    result
end

def _reduce_354(val, vofs)
		      # brace_block: tLCURLY #  compstmt tRCURLY
                      # REFACTOR
                      args   = val[vofs + 2]
                      body   = val[vofs + 4]
                      result = new_iter(args, body)
                      @env.unextend
                    
    result
end

def _reduce_355(val, vofs)
		      # brace_block: tLCURLY # | kDO
		      @env.extend( true ) # (:dynamic)
                      result = -910 # @lexer.lineno_      
                    
    result
end

def _reduce_356(val, vofs)
		      # brace_block: tLCURLY # opt_block_var
                      result = @env.dynamic_keys
                    
    result
end

def _reduce_357(val, vofs)
		      # brace_block: tLCURLY # compstmt kEND
                      if val[vofs + 5].equal?( :tEOF )
                        premature_eof( val[vofs + 1] )
                      end
                      args = val[vofs + 2]
                      body = val[vofs + 4]
                      result = new_iter(args, body)
                      @env.unextend
                    
    result
end

def _reduce_358(val, vofs)
                      result = RubyWhenNode.s( val[vofs + 1], val[vofs + 3], val[vofs + 4])  # s(:when )
                      result.src_offset=(   val[vofs ].src_offset ) # kWHEN position
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, vofs)
		      # when_args: args  # | args tCOMMA tSTAR arg_value
                      wh = RubyWhenNode.s(val[vofs + 3], nil, nil)
                      wh.src_offset=(   val[vofs + 2].src_offset ) # tSTAR position
                      result = self.list_append( val[vofs ], wh )
                    
    result
end

def _reduce_361(val, vofs)
		      # # when_args: args # | tSTAR arg_value
                      # result = s(:array, s(:when, val_[1], nil))
                      wh = RubyWhenNode.s( val[vofs + 1], nil, nil)
                      wh.src_offset=(   val[vofs ].src_offset ) # tSTAR position
                      result = RubyRpCallArgs.s( wh )
                    
    result
end

# reduce 362 omitted

# reduce 363 omitted

def _reduce_364(val, vofs)
	              # opt_rescue: kRESCUE exc_list exc_var then compstmt opt_rescue
                      # klasses, var, body, rest = val_[1], val_[2], val_[4], val_[5]
                      # klasses ||= s(:array )  # Maglev not used
                      klasses = val[vofs + 1]   # ok if nil
                      var = val[vofs + 2]
                      body = val[vofs + 4]
                      rest = val[vofs + 5] 
                      if var 
                        rhs = RubyGlobalVarNode.s( :"$!" )  # s(:gvar )
                        asgn = node_assign(var, rhs )
                        if body.equal?(nil)
                          body = RubyBlockNode.s( [ asgn ] )
                        else
                          body = body.prepend_to_block( asgn )
                        end
                      end   
                      result = RubyRescueBodyNode.s(klasses, body, rest)   # s(:resbody )
                      result.src_offset=( val[vofs ].src_offset )   # kRESCUE position
                    
    result
end

def _reduce_365(val, vofs)
		      # opt_rescue: # |
                      result = nil
                    
    result
end

def _reduce_366(val, vofs)
		      # exc_list: arg_value
                      result = RubyArrayNode.s( val[vofs ])  # s(:array )
                    
    result
end

# reduce 367 omitted

# reduce 368 omitted

def _reduce_369(val, vofs)
		      # exc_var: tASSOC lhs
                      result = val[vofs + 1]
                    
    result
end

# reduce 370 omitted

def _reduce_371(val, vofs)
		      # opt_ensure: kENSURE compstmt
                      v_one = val[vofs + 1]
                      if (v_one != nil) then
                        result = v_one
                      else
                        result = RubyNilNode._new # s(:nil)
                      end
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, vofs)
			    # literal: numeric
                            result = RubyAbstractNumberNode.s( val[vofs ])  # s(:lit )
                            # literal - numeric path 
                          
    result
end

def _reduce_374(val, vofs)
			    # literal: numeric # | symbol
		            result = RubySymbolNode.s( val[vofs ]) # s(:lit )
			    # literal - symbol path 
                          
    result
end

# reduce 375 omitted

def _reduce_376(val, vofs)
		      # strings: string
                      # val_[0] = s(:dstr, val[0].value) if val[0][0] == :evstr 
                      # result = val_[0]
                      v_zero = val[vofs ] 
                      if v_zero.class.equal?(RubyEvStrNode)
                        result = RubyDStrNode.s( [ v_zero.evStrBody ] )
                      else
                        result = v_zero
                      end 
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, vofs)
		      # string: string1
                      result = self.literal_concat( val[vofs ], val[vofs + 1])  
                    
    result
end

def _reduce_379(val, vofs)
		      # string1: tSTRING_BEG string_contents tSTRING_END
                      result = val[vofs + 1]
                    
    result
end

def _reduce_380(val, vofs)
		      # string1: tSTRING_BEG string_contents tSTRING_END # | t_STRING
                      result = RubyStrNode.s( val[vofs ])  # s(:str )
                    
    result
end

def _reduce_381(val, vofs)
		      # xstring: tXSTRING_BEG xstring_contents tSTRING_END
                      result = new_xstring( val[vofs + 1])
                    
    result
end

def _reduce_382(val, vofs)
		      # regexp: tREGEXP_BEG xstring_contents tREGEXP_END
                      result = new_regexp(val, vofs)
                    
    result
end

def _reduce_383(val, vofs)
		      # words: tWORDS_BEG tSPACE tSTRING_END
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_384(val, vofs)
		      # words: | tWORDS_BEG word_list tSTRING_END
                      result = val[vofs + 1]
                    
    result
end

def _reduce_385(val, vofs)
		      # word_list: none
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_386(val, vofs)
		      # word_list: # | word_list word tSPACE
                      # word = val_[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1] #
                      # result = val_[0] << word
                      v_one = val[vofs + 1]
                      if v_one.class.equal?(RubyEvStrNode)
                        word = RubyDStrNode.s([ RubyStrNode.s('') , v_one ])
                      else
                        word = v_one
                      end
                      result = val[vofs ].append( word)  # v[0] should be a RubyArrayNode
                    
    result
end

# reduce 387 omitted

def _reduce_388(val, vofs)
		      # word: string_content
                      result = self.literal_concat( val[vofs ], val[vofs + 1])
                    
    result
end

def _reduce_389(val, vofs)
		      # awords: tAWORDS_BEG tSPACE tSTRING_END
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_390(val, vofs)
		      # awords: # | tAWORDS_BEG qword_list tSTRING_END
                      result = val[vofs + 1]
                    
    result
end

def _reduce_391(val, vofs)
		      # qword_list: none
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_392(val, vofs)
		      # qword_list: # | qword_list tSTRING_CONTENT tSPACE
                      # result = val_[0] << s(:str, val_[1]) # assume val[0] is ArrayNode 
                      result = val[vofs ].append( RubyStrNode.s(val[vofs + 1]))
                    
    result
end

def _reduce_393(val, vofs)
			# string_contents: none
                      	# result = s(:str, "")
			result = RubyStrNode.s( "")
                    
    result
end

def _reduce_394(val, vofs)
		      # string_contents: # | string_contents string_content
                      result = self.literal_concat(val[vofs ], val[vofs + 1])
                    
    result
end

def _reduce_395(val, vofs)
		      # xstring_contents: none
                      result = nil
                    
    result
end

def _reduce_396(val, vofs)
		      # xstring_contents: # | xstring_contents string_content
                      result = self.literal_concat(val[vofs ], val[vofs + 1])
                    
    result
end

def _reduce_397(val, vofs)
		      # string_content: tSTRING_CONTENT
                      # result = s(:str, val_[0])
		      result = RubyStrNode.s( val[vofs ])
                    
    result
end

def _reduce_398(val, vofs)
		      # string_content: # | tSTRING_DVAR
                      lx = @lexer
                      result = lx.lex_strterm_
                      lx.lex_strterm=( nil )
                      lx.lex_state=( RubyLexer::Expr_beg )
                    
    result
end

def _reduce_399(val, vofs)
		      # string_content: # string_dvar
                      # result = s(:evstr, val_[2]) 
                      @lexer.lex_strterm=( val[vofs + 1])
                      result = RubyEvStrNode.s( val[vofs + 2] )
                    
    result
end

def _reduce_400(val, vofs)
		      # string_content: # | tSTRING_DBEG
                      lx = @lexer
                      result = lx.lex_strterm_
                      lx.lex_strterm=( nil )
                      lx.lex_state=( RubyLexer::Expr_beg )
                      lx.cond_.push( false)
                      lx.cmdarg_.push( false)
                    
    result
end

def _reduce_401(val, vofs)
		      # string_content: # compstmt tRCURLY
                      lx = @lexer
                      lx.lex_strterm=( val[vofs + 1] )
                      lx.cond_.lexpop
                      lx.cmdarg_.lexpop

                      v_two = val[vofs + 2] 
                      if v_two.equal?(nil) 
                        result = RubyEvStrNode.s(nil) #  s(:evstr ) 
                      else 
                        knd = v_two.str_dstr_evstr_kind  # MNU here if "unknown rescue body"
                        if knd.equal?(nil) 
                           result = RubyEvStrNode.s(v_two)
                        else
                           result = v_two  # v_two is one of  :str :dstr: evstr
                        end
                      end
                    
    result
end

def _reduce_402(val, vofs)
			  # string_dvar: tGVAR 
                          # result = s(:gvar, val_[0].to_sym)   
			  result = RubyGlobalVarNode.s( val[vofs ].symval )
			
    result
end

def _reduce_403(val, vofs)
			  # string_dvar: # | tIVAR
		          # result = s(:ivar, val_[0].to_sym) 
			  result = RubyInstVarNode.s( val[vofs ].symval )
			
    result
end

def _reduce_404(val, vofs)
			  # string_dvar: # | tCVAR
	                  # result = s(:cvar, val_[0].to_sym) 
			  result = RubyClassVarNode.s( val[vofs ].symval)
			
    result
end

# reduce 405 omitted

def _reduce_406(val, vofs)
		      # symbol: tSYMBEG sym
                      @lexer.lex_state=( RubyLexer::Expr_end )
                      result = val[vofs + 1].symval  # expect an RpNameToken
                    
    result
end

def _reduce_407(val, vofs)
		      # symbol: # | tSYMBOL
                      result = val[vofs ]._as_symbol
                    
    result
end

# reduce 408 omitted

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

def _reduce_412(val, vofs)
		      # dsym: tSYMBEG xstring_contents tSTRING_END
                      @lexer.lex_state=( RubyLexer::Expr_end )
                      v_one = val[vofs + 1]

		      v_cls = v_one.class
		      if v_cls.equal?(RubyDStrNode)  # convert :dstr to :dsym
		        result =v_one.asDSymbolNode 
                      elsif v_cls.equal?(RubyStrNode) # convert :str to :sym
                        str = v_one.strNodeValue
                        if str.size.equal?(0)
                          yyerror "empty symbol literal"
                        end
			result = RubySymbolNode.s( str._as_symbol )
                      elsif v_one.equal?( nil) 
                        yyerror "empty symbol literal" 
                        result = nil
                      elsif v_cls.equal?(RubyEvStrNode)
                        result = RubyDSymbolNode.s([ RubyStrNode.s('') , v_one ])
                        # result = s(:dsym, "", result)
                      else
			raise_error("unimplemented dsym conversion")
                        result = nil
                      end
                    
    result
end

# reduce 413 omitted

# reduce 414 omitted

def _reduce_415(val, vofs)
		      # numeric: tINTEGER ...
                      result = val[vofs + 1] * -1 # TODO: pt_testcase
                    
    result
end

def _reduce_416(val, vofs)
		      # numeric: # | tUMINUS_NUM tFLOAT   =tLOWEST
                      result = val[vofs + 1] * -1 # TODO: pt_testcase
                    
    result
end

# reduce 417 omitted

# reduce 418 omitted

# reduce 419 omitted

# reduce 420 omitted

# reduce 421 omitted

def _reduce_422(val, vofs)
  # variable: | kNIL
                              result = :nil      
                            
    result
end

def _reduce_423(val, vofs)
  # variable: | kSELF
			      result = :self     
                            
    result
end

def _reduce_424(val, vofs)
  # variable: | kTRUE
			      result = :true     
                            
    result
end

def _reduce_425(val, vofs)
  # variable: | kFALSE
			      result = :false    
                            
    result
end

def _reduce_426(val, vofs)
 # variable: | k__FILE__
			      result = :__FILE__ 
                            
    result
end

def _reduce_427(val, vofs)
 # variable: | k__LINE__
			      result =  RpNameToken.new( :__LINE__ ,  @lexer.line_num_)  
                            
    result
end

def _reduce_428(val, vofs)
		      # var_ref: variable
                      result = self.gettable( val[vofs ])
                    
    result
end

def _reduce_429(val, vofs)
		      # var_lhs: variable
                      result = self.assignable(val[vofs ], nil)
                    
    result
end

def _reduce_430(val, vofs)
			      # backref: tNTH_REF
	                      # result = s(:nth_ref,  val_[0]) 
			      result = RubyNthRefNode.s(val[vofs ])
			    
    result
end

def _reduce_431(val, vofs)
			      # backref: #  tBACK_REF
			      # result = s(:back_ref, val_[0])
			      result = RubyBackRefNode.s( val[vofs ] )
			    
    result
end

def _reduce_432(val, vofs)
		      # superclass: term
                      result = nil
                    
    result
end

def _reduce_433(val, vofs)
		      # superclass: # | tLT
                      @lexer.lex_state=( RubyLexer::Expr_beg )
                      result = val[vofs]
                    
    result
end

def _reduce_434(val, vofs)
		      # superclass: # expr_value term
                      result = val[vofs + 2]
                    
    result
end

def _reduce_435(val, vofs)
		      # superclass: # | error term
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_436(val, vofs)
		      # f_arglist: tLPAREN2 f_args opt_nl tRPAREN
                      result = val[vofs + 1]
                      @lexer.lex_state=( RubyLexer::Expr_beg )
                    
    result
end

def _reduce_437(val, vofs)
		      # f_arglist: # | f_args term
                      result = val[vofs ]
                    
    result
end

def _reduce_438(val, vofs)
		      # f_args: f_arg tCOMMA f_optarg tCOMMA f_rest_arg opt_f_block_arg
                      # result = args( val_[0], val_[2], val_[4], val_[5])
                      result = val[vofs ]
                      result.add_optional_arg( val[vofs + 2] )
                      result.add_star_arg( val[vofs + 4] )
                      result.add_block_arg( val[vofs + 5] )
                    
    result
end

def _reduce_439(val, vofs)
		      # f_args: # | f_arg tCOMMA f_optarg  opt_f_block_arg
                      # result = args( val_[0], val_[2],    nil, val_[3])
                      result = val[vofs ] 
                      result.add_optional_arg( val[vofs + 2] )
                      result.add_block_arg( val[vofs + 3] )
                    
    result
end

def _reduce_440(val, vofs)
		      # f_args: # | f_arg tCOMMA   f_rest_arg opt_f_block_arg
                      # result = args( val_[0],    nil, val_[2], val_[3])
                      result = val[vofs ] 
                      result.add_star_arg( val[vofs + 2] )
                      result.add_block_arg( val[vofs + 3] )
                    
    result
end

def _reduce_441(val, vofs)
		      # f_args: # | f_arg  opt_f_block_arg
                      # result = args( val_[0],    nil,    nil, val_[1])
                      result = val[vofs ] 
                      result.add_block_arg( val[vofs + 1] )
                    
    result
end

def _reduce_442(val, vofs)
		      # f_args: # |    f_optarg tCOMMA f_rest_arg opt_f_block_arg
                      # result = args(    nil, val_[0], val_[2], val_[3])
                      result = RubyArgsNode._new
                      result.add_optional_arg(val[vofs ] )
                      result.add_star_arg( val[vofs + 2] )
                      result.add_block_arg( val[vofs + 3] )
                    
    result
end

def _reduce_443(val, vofs)
		      # f_args: # |  f_optarg  opt_f_block_arg
                      # result = args(    nil, val_[0],    nil, val_[1])
                      result = RubyArgsNode._new
                      result.add_optional_arg(val[vofs ])
                      result.add_block_arg( val[vofs + 1] )

                    
    result
end

def _reduce_444(val, vofs)
		      # f_args: # |   f_rest_arg opt_f_block_arg
                      # result = args(    nil,    nil, val_[0], val_[1])
                      result = RubyArgsNode._new
                      result.add_star_arg( val[vofs ] )
                      result.add_block_arg( val[vofs + 1] )
                    
    result
end

def _reduce_445(val, vofs)
		      # f_args: # |   f_block_arg
                      # result = args(    nil,    nil,    nil, val_[0])
                      result = RubyArgsNode._new
                      result.add_block_arg( val[vofs ] )
                    
    result
end

def _reduce_446(val, vofs)
		      # f_args: # | #
                      #result = args(    nil,    nil,    nil,    nil)
                      result = RubyArgsNode._new
                    
    result
end

def _reduce_447(val, vofs)
		      # f_norm_arg: tCONSTANT
                      yyerror "formal argument cannot be a constant: #{val[vofs ]}"
                      result = val[vofs]
                    
    result
end

def _reduce_448(val, vofs)
		      # f_norm_arg: # | tIVAR
                      yyerror "formal argument cannot be an instance variable"
                      result = val[vofs]
                    
    result
end

def _reduce_449(val, vofs)
		      # f_norm_arg: # | tCVAR
                      yyerror "formal argument cannot be a class variable"
                      result = val[vofs]
                    
    result
end

def _reduce_450(val, vofs)
		      # f_norm_arg: # | tIDENTIFIER
                      v_zero = val[vofs ]  # val_[0] will be a RpNameToken
                      @env[ v_zero.symval ] = :lvar
                      result = v_zero
                    
    result
end

def _reduce_451(val, vofs)
		      # f_arg: f_norm_arg
                      # result = s(:args)
                      # result << val_[0].to_sym
                      result = RubyArgsNode._new
                      result.add_arg( val[vofs ].symval )
                    
    result
end

def _reduce_452(val, vofs)
		      # f_arg: # | f_arg tCOMMA f_norm_arg
                      result = val[vofs ]
                      result.add_arg( val[vofs + 2].symval )
                    
    result
end

def _reduce_453(val, vofs)
		      # f_opt: tIDENTIFIER tEQL arg_value
                      result = self.assignable(val[vofs ], val[vofs + 2])
                      # TODO: detect duplicate names  ??
                    
    result
end

def _reduce_454(val, vofs)
		      # f_optarg: f_opt
                      result = RubyBlockNode.s( [ val[vofs ] ] ) # s(:block )
                    
    result
end

def _reduce_455(val, vofs)
		      # f_optarg: # | f_optarg tCOMMA f_opt
                      result = val[vofs ] # a RubyBlockNode
                      result.append_to_block( val[vofs + 2] )
                    
    result
end

# reduce 456 omitted

# reduce 457 omitted

def _reduce_458(val, vofs)
		      # f_rest_arg: restarg_mark tIDENTIFIER
                      # TODO: differs from parse.y - needs tests
                      name = val[vofs + 1].symval    # expect a RpNameToken
                      self.check_assignable( name ) # updates env
                      result = name   # MagLev, no prefixing of f_rest_arg with '*' 
                    
    result
end

def _reduce_459(val, vofs)
		      # f_rest_arg: # | restarg_mark
                      name = :"*"
                      @env[name] = :lvar
                      result = name
                    
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, vofs)
		      # f_block_arg: blkarg_mark tIDENTIFIER
                      identifier = val[vofs + 1].symval

                      @env[identifier] = :lvar
                      # result = s(:block_arg, identifier.to_sym)
		      result = RubyBlockArgNode.s( identifier)
                    
    result
end

def _reduce_463(val, vofs)
		      # opt_f_block_arg: tCOMMA f_block_arg
                      result = val[vofs + 1]
                    
    result
end

def _reduce_464(val, vofs)
		      # opt_f_block_arg: # | #
                      result = nil
                    
    result
end

# reduce 465 omitted

def _reduce_466(val, vofs)
		      # singleton: var_ref
                      @lexer.lex_state=( RubyLexer::Expr_beg )
                      result = val[vofs]
                    
    result
end

def _reduce_467(val, vofs)
		      # singleton: # expr opt_nl tRPAREN
                      result = val[vofs + 2]
		      if result.kind_of?(RubyAbstractLiteralNode)
                        yyerror "Can't define singleton method for literals." 
		      end
                    
    result
end

def _reduce_468(val, vofs)
		      # assoc_list: none
                      result = RubyArrayNode._new # s(:array)
                    
    result
end

def _reduce_469(val, vofs)
		      # assoc_list: # | assocs trailer
                      result = val[vofs ]
                    
    result
end

def _reduce_470(val, vofs)
		      # assoc_list: # | args trailer
                      # size = val_[0].size
                      # if (size % 2 != 1) then # != 1 because of leading :array
                      v_zero = val[vofs ]
                      size = v_zero.arrayLength
                      unless (size & 1).equal?(0)
                        yyerror "Odd number (#{size}) list for Hash. #{v_zero.inspect}"
                      end
                      result = v_zero
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, vofs)
		      # assocs: assoc
                      # list = val_[0].dup
                      # more = val_[2][1..-1]            
                      # list.push(*more) unless more.empty?
                      list = val[vofs ].arrayDup  # dup a RubyArrayNode
                      v_two = val[vofs + 2]
                      list.appendAll(v_two) # expect v_two to be a RubyArrayNode
                      result = list
                    
    result
end

def _reduce_473(val, vofs)
		      # assoc: arg_value tASSOC arg_value
                      result = RubyArrayNode.s( val[vofs ], val[vofs + 2]) # s(:array )
                    
    result
end

# reduce 474 omitted

# reduce 475 omitted

# reduce 476 omitted

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

def _reduce_493(val, vofs)
  # term: tSEMI
                          yyerrok ; result = val[vofs] 
                         
    result
end

# reduce 494 omitted

# reduce 495 omitted

def _reduce_496(val, vofs)
  # term: # | terms tSEMI 
				yyerrok  ; result = val[vofs] 
				
    result
end

def _reduce_497(val, vofs)
  # none:
		      result = nil  
		  
    result
end

def _reduce_498(val, vofs)
  # none_block_pass:
			result = nil 
		  
    result
end

def _reduce_none(val, vofs)
  val[0]
end

  end   # class RubyParser
  end   # module MagRp
