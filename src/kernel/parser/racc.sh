#! /bin/csh
#
#  requires that /usr/local/bin/racc  exist
#   from installation of the Ruby  gem  racc 1.4.6  .

if ( "$OSTYPE" == "linux" ) then
  # ok
else
  echo "don't use m4 on Solaris to produce the parser"
  # have seen 'define' and 'format' in Ruby string constants getting swallowed 
  exit 1
endif

if ( "$1" == "-D" ) then
  # debug and tracing code will be included in generated .rb files
  setenv M4FLAGS "-DPARSER_DEBUG"
else
  # debug and tracing code will be excluded
  setenv M4FLAGS " "
endif

if ( -f /usr/ccs/bin/m4 ) then
  setenv M4 /usr/ccs/bin/m4 # Solaris
else
  setenv M4 /usr/bin/m4  # Linux, Mac, others
endif

rm -f parser.racc_out ruby_parser.y ruby_parser.rb racc_parser.rb lexer.rb racc.log
echo "M4FLAGS = $M4FLAGS"
echo "M4FLAGS = $M4FLAGS" > racc.log

# use m4 to generate ruby_parser.y from ruby_parser.ym4
echo "m4 producing ruby_parser.y"
echo "# file ruby_parser.y " > ruby_parser.y
echo "#  generated by m4 processing of ruby_parser.ym4 " >> ruby_parser.y
echo "#  DO NOT EDIT THIS FILE , edit ruby_parser.ym4 " >> ruby_parser.y
$M4 $M4FLAGS ruby_parser.ym4 >> ruby_parser.y
if ( $status != 0) then
  echo "Error: NON-ZERO status from m4 ruby_parser.y" >> racc.log
  cat racc.log
  exit 1
endif
chmod -w ruby_parser.y

# run racc to generate the parser from the .y file 
echo "racc ..."
/usr/local/bin/racc -v -t -l -o parser.racc_out ruby_parser.y
if ( $status != 0) then
  echo "Error: NON-ZERO status from racc" >> racc.log
  cat racc.log
  exit 1
endif

# use  sed on the generated parser to 
#   convert various variables to constants
#   comment out some requires
#   change the parser's module name from Racc to MagRp
#   change the signature of the _reduce methods from (val,_values, result) to (val,vofs)
echo "sed ... "
 cat parser.racc_out | \
   sed -e '1,$s+Racc::+MagRp::+' | \
   sed -e '1,$s+require+# require+' | \
   sed -e '1,$s+racc_reduce_n+Parser::Racc_reduce_n+' | \
   sed -e '1,$s+racc_shift_n+Parser::Racc_shift_n+' | \
   sed -e '1,$s+racc_nt_base+Parser::Racc_nt_base+' | \
   sed -e '1,$s+racc_use_result_var+Racc_use_result_var+' | \
   sed -e '1,$s+, _values, result)+, vofs)+' > ruby_parser.rb
if ( $status != 0) then
  echo "Error: NON-ZERO status from sed " >> racc.log
  cat racc.log
  exit 1
endif
chmod -w ruby_parser.rb parser.racc_out 

echo "# file racc_parser.rb " > racc_parser.rb
echo "#  generated by m4 processing of racc_parser.rbm4 " >> racc_parser.rb
echo "#  DO NOT EDIT THIS FILE , edit the .rbm4 files  " >> racc_parser.rb

# use m4 to 
#  include/exclude the debug and tracing code 
#  do some inlining optimizations in the parser state machine
#
echo "m4 producing racc_parser.rb"
$M4 $M4FLAGS racc_parser.rbm4 >> racc_parser.rb
if ( $status != 0) then
  echo "Error: NON-ZERO status from m4 racc_parser.rbm4 " >> racc.log
  cat racc.log
  exit 1
endif

echo "# file lexer.rb " > lexer.rb
echo "#  generated by m4 processing of lexer.rbm4 " >> lexer.rb
echo "#  DO NOT EDIT THIS FILE , edit the .rbm4 files  " >> lexer.rb

# use m4 to 
#  include/exclude the debug and tracing code in the lexer
#
echo "m4 producing lexer.rb"
$M4 $M4FLAGS lexer.rbm4 >> lexer.rb
if ( $status != 0) then
  echo "Error: NON-ZERO status from m4 lexer.rbm4 " >> racc.log
  cat racc.log
  exit 1
endif

chmod -w racc_parser.rb lexer.rb 
echo "racc.sh Successful" >> racc.log
