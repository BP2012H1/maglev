
task :default => :test
RAILS_INCLUDES = %w(railties
                    activeresource
                    activerecord
                    actionmailer
                    actionpack
                    activemodel
                    activesupport
                    ).reverse.inject("") { |s,p| s << " -I../rails/#{p}/lib" ; s }

MH = ENV['MAGLEV_HOME']
TZ_INC = " -I#{MH}/lib/maglev/gems/1.8/gems/tzinfo-0.3.20/lib"
REQ = '-r tzinfo -r ../core_ext.rb'
RAILS_INCLUDES << TZ_INC

desc "Run the tests: takes optional file arg: 'rake test[test/foo_test.rb]'"
task :test, :file do |t, args|
  cd('test') do
    test_files = args.file || FileList['*_test.rb']
    sh %{ $MAGLEV_HOME/bin/testrb #{RAILS_INCLUDES} -I. #{test_files} }
  end
end

desc "Run the std app via gems in maglev"
task :gemapp do
  cd('my_app') do
    sh %{ maglev-ruby -MallIvsDynamic  #{TZ_INC} #{REQ} script/rails server }
  end
end

desc "Run the std app my_app with maglev"
task :app do
  cd('my_app') do
    sh %{ maglev-ruby -MallIvsDynamic #{RAILS_INCLUDES} #{REQ} script/rails server }
  end
end

namespace :mri do
  desc "Run the tests using MRI: takes optional file arg: 'rake test[test/foo_test.rb]'"
  task :tests, :file do |t,args|
    test_files = args.file || FileList['test/*_test.rb']
    sh %{ testrb #{RAILS_INCLUDES} -Itest #{test_files} }
  end

  desc "Run the app using MRI"
  task :app do
    cd('my_app') do
      sh %{ ruby script/rails server }
    end
  end
end


desc "Run multitest in maglev"
task :mm do
  mmlib = '/Users/pmclain/external/multimap/lib'
  sh %{ maglev-ruby -I #{mmlib} multitest.rb }
end

desc "Run app on maglev from gems (should do 'rake patchgems' first)"
task :gemapp do
  cd('my_app') do
    sh %{ maglev-ruby -MallIvsDynamic -r ../core_ext.rb script/rails server }
  end
end

desc "cp patches to rubygems; backup originals"
task :patchgems do
  gemd = ENV['MAGLEV_HOME'] + '/lib/maglev/gems/1.8/gems'
  gem_suffix = '-3.0.0.beta4'
  patches = [
             # # Work around Trac 730: IO#readpartial is not implemented.
             # ['activesupport', 'lib/active_support/secure_random.rb'],

             # Work around a file not found problem.  Root cause TBD.
#             ['railties', 'lib/rails/application/finisher.rb'],

             # Work around can't remove const_missing
             ['activesupport', 'lib/active_support/dependencies.rb'],

             # Work around MagLev's prohibition on aliasing to __send__.
             ['activesupport', 'lib/active_support/core_ext/object/try.rb'],

             # Provide MagLev implementation for finding subclasses through
             # ObjectSpace#loaded_classes rather than
             # ObjectSpace#each_object.
             ['activesupport', 'lib/active_support/core_ext/class/subclasses.rb'],

             # Work around issue trying to remove_method on a persistent
             # module while in transient mode.
             ['activesupport', 'lib/active_support/core_ext/enumerable.rb']
            ]
  patches.each do |mod, file|
    src = "rails/#{mod}/#{file}"
    dest = "#{gemd}/#{mod}#{gem_suffix}/#{file}"

    # Backup original
    cp dest, "#{dest}.orig"

    # Apply patch
    cp src, dest
  end
end
