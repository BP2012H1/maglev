== MagLev Rake Commands

Run <tt>rake -D</tt> for full documentation of all the MagLev rake tasks.


=== Admin and Management Tasks 

  rake status                      # Show status of all stones
  rake stone:all[task_name]        # Invoke a task on all MagLev servers
  rake stone:create[server_name]   # Create a new MagLev server and repository
  rake stone:destroy[server_name]  # Destroy an existing MagLev server and repository
  rake stone:list                  # List MagLev servers managed by this Rakefile
  rake stwrappers                  # Create .rb files for each smalltalk class (lib/ruby/site_ruby/1.8/smalltalk/*)

The <tt>maglev:</tt> namespace holds the rake tasks for administration of the
MagLev Server. If you create additionl servers with 'rake stone:create[server_name]' 
it will have its own namespace which includes the tasks below.

  rake maglev:reload               # Destroy the "maglev" repository then load a fresh one
  rake maglev:reload_prims         # [DEV] Reset the ruby context in "maglev" then reload primitives
  rake maglev:restart              # Stop then start the "maglev" server
  rake maglev:restore_snapshot     # Restore the "maglev" repository from its previous snapshot
  rake maglev:start                # Start the "maglev" server
  rake maglev:status               # Report status of the "maglev" server
  rake maglev:stop                 # Stop the "maglev" server
  rake maglev:take_snapshot        # Stop the "maglev" server then make a backup copy of its repository

* There are <tt>-debug</tt> versions of several of the commands, which run
  the associated item with a higher level of debug information.
* The Topaz related tasks start a MagLev VM and leave the developer at the
  <tt>topaz 1></tt> prompt.  See the Debug[link:files/docs/debugging.html]
  section for details on Topaz and debugging


=== RubySpec and MSpec Tasks in <tt>spec:</tt> Namespace

  rake spec:ci                     # Run the integration specs on MagLev
  rake spec:civ                    # Run the verbose continuous integration specs on MagLev
  rake spec:debug                  # Debug an mspec file: spec=<dir_or_file_name>
  rake spec:debugci                # Run the continuous integration specs on MagLev with debug
  rake spec:help                   # Run mspec run --help
  rake spec:lsfails                # List the specs currently tagged as fails for the dir
  rake spec:mri                    # Run the continuous integration specs against MRI
  rake spec:run                    # Run an mspec file: spec=<dir_or_file_name>
  rake spec:runnofail              # Run an mspec file with -G fails: spec=<dir_or_file_name>
  rake spec:tag                    # Run the named specs and tag the failing ones
  rake spec:untag                  # Run specs currently tagged as fails, and untag ones now passing

* The debug versions of the spec tasks setup MagLev to leave the developer
  at the Topaz prompt if there is a spec failure or an uncaught exception.
* For the spec tasks that require a spec parameter, pass the parameter in
  with <tt>spec=...</tt>, e.g.,:
    rake spec:run spec=spec/rubyspec/core/string/append_spec.rb
  The spec may be a file or directory.

=== Benchmark Tasks

The benchmark tasks run benchmarks from the Ruby Benchmark Suite project.

  rake bench                       # Run all the RBS benchmarks
  rake bench:dir                   # Run all the RBS benchmarks in DIR
  rake bench:file                  # Run only the RBS benchmark specified by FILE
  rake bench:pattern               # Run all the RBS benchmarks that match PATTERN ex: PATTERN=benchmarks/micro-benchmarks/bm_gc*
  rake bench:results               # Plot the RBS benchmark results (not implemented)
  rake bench:to_csv                # Generate a CSV file of RBS results


=== Miscellaneous

The Standard documentation, clean and clobber targets:

  rake rdoc                        # Build the rdoc HTML Files
  rake rerdoc                      # Force a rebuild of the RDOC files

  rake clean                       # Remove any temporary products.
  rake clobber                     # Remove any generated file.
  rake clobber_rdoc                # Remove rdoc products

* The rdoc gets dumped into <tt>$MAGLEV_HOME/html</tt>

=== Developer tasks

The developer tasks are specific to the GemStone's internal MagLev development
environment and may depend on files not shipped with the Alpha release.
Run at your own risk:

  rake dev:clean-gems              # Clean up after a test install of rubygems
  rake dev:installprims            # Load the primitives into the default image.
  rake dev:load_native_parser      # Load the MagLev native parser
  rake dev:new-gems                # Clear out the old rubygems and install a new version
  rake dev:p-tests[stone_name]     # Run the persistence tests on stone_name (default ptest).
  rake dev:passing                 # Run the passing specs
  rake dev:quick-p-tests           # Run p-tests on maglev
  rake dev:smoke                   # Run the passing specs and the vm tests
  rake dev:topaz                   # Run topaz (use rlwrap, if available)
  rake dev:vm-tests                # Run the vm smoke tests

  rake parser:start                # Start the ParseTree based parser (deprecated)
  rake parser:status               # Show if the ParseTree based parser is running
  rake parser:stop                 # Stop the ParseTree based parser (deprecated)

  rake netldi:start                # Start NetLDI process
  rake netldi:stop                 # Stop NetLDI process

  rake squeak                      # Run a squeak image
