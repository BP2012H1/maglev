== Debugging scripts with MagLev

Topaz is currently, the primary debugging tool for use with MagLev.  Most
of this document describes debugging with Topaz.  An alternate approach, is
to use the Squeak debugger.  See the section at the end on "Using Squeak to
debug" 

=== Topaz Overview, Documentation and Help

MagLev runs in the Topaz VM.  Topaz is command line driven, and connects to
MagLev's built-in database (the stone).  Most of the scripts and rake tasks
are based on topaz scripts and use the initialization files in
<tt>$MAGLEV_HOME/etc/*</tt> to log into topaz and setup the MagLev ruby
environment.

==== Topaz Manual

{The Topaz Programming
Environment}[http://seaside.gemstone.com/docs/GS64-Topaz-2.3.pdf]
manual contains documentation for the Smalltalk version of Topaz.

==== Topaz Help
Topaz also has on line help, which includes the Ruby-specific commands that are not covered in the manual:

  topaz 1> help

    TOPAZ - a programmer's interface to the GemStone system

    For an overview of Topaz, see the "Overview" help topic.



  Help is available for:
  HELP       ABORT      BEGIN      BREAK      C          CATEGORY:
  CLASSMETHOD:          COMMIT     CONTINUE   DEFINE     DISPLAY
  DISASSEM   DOIT       DOWN [<anInteger>]    EDIT       ERRORCOUNT
  EXIT [<status>]       EXPECTBUG  EXPECTERROR
  EXPECTVALUE           FILEOUT    FRAME [<anInteger>]   GCITRACE
  HIERARCHY  IFERR      IFERR_LIST IFERR_CLEAR           IFERROR
  INPUT      LEVEL      LIMIT      LIST       LISTW      LOADUA
  LOOKUP     LOGIN      LOGOUT     METHOD:    OBJECT     OBJ1
  OBJ2       Object_Specification_Formats     OMIT       OPAL
  OUTPUT     PAUSEFORDEBUG         PRINTIT    PROTECTMETHODS
  UNPROTECTMETHODS      RELEASEALL            REMARK
  REMOVEALLMETHODS      REMOVEALLCLASSMETHODS RUBYHIERARCHY
  RUBYLIST   RUBYLOOKUP RUBYMETHOD RUBYCLASSMETHOD       RUBYRUN
  RUN        RUNENV     INTERP     INTERPENV  NBRUN      NBSTEP
  NBRESULT   SEND       SENDENV    SET        SHELL      SPAWN
  STACK      STACKWAITFORDEBUG     STK        STATUS     STEP
  TEMPORARY  TIME       TOPAZPAUSEFORDEBUG    TOPAZWAITFORDEBUG

  press RETURN to continue...

==== Summary of Topaz commands

===== Start, Stop, and misc commands
<tt>rake maglev:topaz</tt>::  Invoke topaz
+exit+::  Exit topaz
+help+::  Get help

===== Stack info
+where+::
  List current stack
<tt>where nn</tt>:: Show only +nn+ frames starting at current frame.
<tt>where string</tt>:: Show only frames containing +string+. +string+ cannot start with +, -, a decimal digit, or contain whitespace. Search is case-sensitive. Current frame is set to first frame matched by the search.
<tt>where 'string'</tt>:: Same as above, but <tt>'string'</tt> may contain digits and whitespace.
+frame+::
  Show information about the current frame
+list+::
  List source code for the current frame
+listw+::
  List a window of source code around the current IP location. Useful if
  you have a long method, and just want to concentrate on the current
  location.
+down+:: Move down one stack frame.
+up+::   Move up one stack frame.

==== Example usage of WHERE for debuggging a RubySpec failure
<tt>fr 5</tt>::   See reason for failure where the "pause" for DEBUG_SPEC is
<tt>wh _co</tt>:: Search for _compileFile frames
<tt>l</tt>::      Window listing for first _compileFile frame

===== Break point control
<tt>break method Foo bar @ 2</tt>::
  Break at step point 2 in Foo#bar.

+continue+:: Continue after a break point.

<tt>set class Foo</tt>:: Set the current class to +Foo+
<tt>list step method: bar</tt>::
  List source code with possible break points shown.  Use this to figure
  out which numeric parameter to pass via <tt>@ nn</tt> for the break
  method above.
<tt>list breaks</tt>:: List current break points
<tt>list breaks method: foo</tt>:: List

===== Examining variables at different levels of detail
<tt>display oops</tt>::
  Turn on display of object ids (necessary for examining variables)
<tt>obj1 @ NNN</tt>::
  Inspect the object with id +NNN+, one level deep
<tt>obj2 @ NNN</tt>::
  Inspect the object with id +NNN+, two levels deep
<tt>level N</tt>::
  Set the default display level to +N+.

=== Using <tt>-d</tt> to run MagLev in debug mode

Run maglev with the <tt>-d</tt> option to run in debug mode.  Uncaught
exceptions will land you in the topaz prompt, where you can examine the
stack etc.  Here is a sample file:

    $ cat debug_example.rb
    def raise_exception
      raise "Sample exception"
    end

    def another_method
      raise_exception
    end

    another_method

And now we invoke MagLev with the <tt>-d</tt> option to debug it:

    $ maglev-ruby -d debug_example.rb
     _____________________________________________________________________________
    |                             Configuration Files                             |
    |                                                                             |
    | System File: /Users/pmclain/projects/maglev/git/etc/system.conf             |
    |                                                                             |
    | Executable File: /Users/pmclain/tmp/gem.conf                                |
    | Warning:  File not found (errno=2,ENOENT, The file or directory specified cannot
    | be found)                                                                   |
    |           using defaults.                                                   |
    |_____________________________________________________________________________|
    (vmGc spaceSizes: eden init 2000K max 28128K , survivor init 336K max 4688K,
     vmGc    old max 112496K, code max 30000K, perm max 15000K, pom 10 * 12504K = 125040K,
     vmGc    remSet 2880K, meSpace max 143384K oopMapSize 1048576 )
     _____________________________________________________________________________
    |             GemStone/S64 Object-Oriented Data Management System             |
    |               Copyright (C) GemStone Systems, Inc. 1986-2008.               |
    |                            All rights reserved.                             |
    |     covered by Patent Number 6,567,905 Generational Garbage Collector.      |
    +-----------------------------------------------------------------------------+
    |    PROGRAM: topaz, Linear GemStone Interface (Linked Session)               |
    |    VERSION: 3.0.0, Tue Dec  2 17:07:56 2008 pmclain private build           |
    |      BUILD: 64bit-20633-PRIVATE                                             |
    |  BUILT FOR: Darwin (Mac)                                                    |
    |       MODE: 64 bit                                                          |
    | RUNNING ON: 2-CPU cairo.gemstone.com i386 (Darwin 9.5.0 ) 2400MHz MacBook4,1|
    | 2048MB                                                                      |
    | PROCESS ID: 16567     DATE: 12/04/08 18:01:15 PST                           |
    |   USER IDS: REAL=pmclain (650) EFFECTIVE=pmclain (650)                      |
    |_____________________________________________________________________________|
    [Info]: LNK client/gem GCI levels = 801/801
    -----------------------------------------------------
    GemStone: Error         Nonfatal
    Error, 'Sample exception'
    Error Category: 231169 [GemStone] Number: 2023 Arg Count: 1 Context : 91077889
    Arg 1: [91078913 sz:16 cls: 74753 String] Sample exception
    topaz 1>

We are now at the topaz prompt and can look at the stack with the +where+
command (abbreviated +wh+):

    topaz 1> wh
    ==> 1 Exception >> _pass:with: (envId 0) @8 line 23   [methId 2266369]
    2 Exception >> pass (envId 0) @2 line 14   [methId 4062465]
    3 [] in  RubyFile >> load (envId 0) @4 line 18   [methId 53753089]
    4 Exception >> _executeHandler: (envId 0) @2 line 7   [methId 2186753]
    5 Exception >> _pass:with: (envId 0) @4 line 18   [methId 2266369]
    6 Exception >> pass (envId 0) @2 line 14   [methId 4062465]
    7 [] in  RubyCompiler >> compileFileNamed:do: (envId 0) @4 line 26   [methId 52167937]
    8 Exception >> _executeHandler: (envId 0) @2 line 7   [methId 2186753]
    9 Exception >> signal (envId 0) @1 line 1   [methId 2180865]
    10 Exception >> signal: (envId 0) @3 line 7   [methId 2161921]
    11 Exception class >> signal: (envId 0) @3 line 4   [methId 2045953]
    12 Object >> raise:: (envId 1) @2 line 2   [methId 72786689]
    13 String >> signal (envId 1) @2 line 2   [methId 72575745]
    14 String >> signal: (envId 1) @2 line 1   [methId 72632321]
    15 Object >> raise: (envId 1) @2 line 2   [methId 72742913]
    16 Object >> raise_exception (envId 1) @2 line 2   [methId 91096065]
    17 Object >> another_method (envId 1) @2 line 2   [methId 91097089]
    18 Object >> _compileFile (envId 1) @6 line 9   [methId 91098113]
    19 [] in  RubyCompiler >> compileFileNamed:do: (envId 0) @3 line 10   [methId 52139009]
    20 [] in  RubyCompiler >> loadFileNamed: (envId 0) @2 line 2   [methId 51476481]
    21 [] in  RubyCompiler >> compileFileNamed:do: (envId 0) @3 line 10   [methId 52141569]
    ...
    topaz 1>

To see the location in the ruby source file, we'll look at stack frame 18,
using the +frame+ command (abbreviated +fr+):

    topaz 1> fr 18
    18 Object >> _compileFile (envId 1) @6 line 9   [methId 91098113]
        receiver [91094785 sz:0 cls: 72193 Object] anObject
    topaz 1>

And then +list+ the current frame's source:

    topaz 1> list
       def raise_exception
         raise "Sample exception"
       end

       def another_method
         raise_exception
       end

       another_method
     * ^6                                                                 *******

       # method starts at line 1 of file /Users/pmclain/tmp/debug_example.rb
    topaz 1>

We can move down the stack with the +down+ command:

    topaz 1> down
    17 Object >> another_method (envId 1) @2 line 2   [methId 91097089]
        receiver [91094785 sz:0 cls: 72193 Object] anObject
    topaz 1>

And we can focus in on the current section of the stack frame by using
+where+ with a parameter:

    topaz 1> wh 10
    17 Object >> another_method (envId 1) @2 line 2   [methId 91097089]
    18 Object >> _compileFile (envId 1) @6 line 9   [methId 91098113]
    19 [] in  RubyCompiler >> compileFileNamed:do: (envId 0) @3 line 10   [methId 52139009]
    20 [] in  RubyCompiler >> loadFileNamed: (envId 0) @2 line 2   [methId 51476481]
    21 [] in  RubyCompiler >> compileFileNamed:do: (envId 0) @3 line 10   [methId 52141569]
    22 ExecBlock >> on:do: (envId 0) @2 line 53   [methId 4329729]
    23 [] in  RubyCompiler >> compileFileNamed:do: (envId 0) @6 line 11   [methId 52148225]
    24 ExecBlock >> ensure: (envId 0) @2 line 10   [methId 4310273]
    25 [] in  RubyCompiler >> compileFileNamed:do: (envId 0) @12 line 19   [methId 52168193]
    26 ExecBlock >> on:do: (envId 0) @2 line 53   [methId 4329729]
    topaz 1> list
       def another_method
         raise_exception
     * ^2                                                                 *******

       # method starts at line 5 of file /Users/pmclain/tmp/debug_example.rb
    topaz 1> down
    16 Object >> raise_exception (envId 1) @2 line 2   [methId 91096065]
        receiver [91094785 sz:0 cls: 72193 Object] anObject
    topaz 1> list
       def raise_exception
         raise "Sample exception"
     * ^2                                                                 *******

       # method starts at line 1 of file /Users/pmclain/tmp/debug_example.rb
    topaz 1>

Etc.  Read the Topaz manual for all the details.
==== Pausing with <tt>nil.pause</tt>

If you run in debug mode, you can pause and get the topaz prompt using
<tt>nil.pause</tt> (or <tt>anything_else.pause</tt>) in your ruby code:

    nil.pause if rand(10) == 7 # if you're lucky, pause 10% of the time

Then you can continue with +continue+:

=== Running topaz directly
You can get a topaz prompt via rake:

  $ cd $MAGLEV_HOME
  $ rake maglev:topaz
  (in /Users/pmclain/maglev)
  topaz 1>

Type +exit+ to leave topaz


== Catching exceptions in Topaz

This example demonstrates a couple of things:
1. Invoking MagLev from the topaz prompt
2. Using the new exception hook to catch an exception

=== Run MagLev from the topaz prompt

This scenario shows how to debug a ruby program (Ruby Gems) from the topaz
prompt.

==== Install ruby gems
To get <tt>bin/maglev-gem</tt> installed, do the following:

  $ cd $MAGLEV_HOME/src/external/rubygems-1.3.1
  $ maglev-ruby setup.rb --no-rdoc --no-ri

This installs ruby gems into <tt>$MAGLEV_HOME/lib/...</tt> and puts
<tt>maglev-gem</tt> into <tt>$MAGLEV_HOME/bin</tt>.  Ruby Gems (as of the
time this example was written) installs, but does not yet run.

====  Start topaz:

  $ cd $MAGLEV_HOME
  $ rake maglev:topaz
  (in /Users/pmclain/projects/maglev/git)
  topaz 1>

==== Set debug env in topaz

Before invoking the ruby program, we want to setup some debug help.  Create
<tt>$MAGLEV_HOME/gem.inp</tt> and put the following in it:

  run
  |boring boringExceptions|

    RubyContext load  .

    " ------------------------------------------------------------------
      Set VM debug flags for the run.
      ------------------------------------------------------------------ "

    RubyParseTreeClient logSexp: false .   "Print sexp from parser"
    RubyGlobalScopN traceGlobals: 0 .
    RubyStaticScope traceLocals: 0 .
    RubyFile traceLoad: true .             "Print file names when they load"
    GsNMethod traceIR: 0 .

    " ------------------------------------------------------------------
      Ruby Gems throws a couple of exceptions during normal processing,
      mostly to discover that various libraries do not exist, or to force
      the loading of a library.  The following Smalltalk array holds the
      error messages from these boring exceptionns, so we can filter them
      in the exception handler.
      ------------------------------------------------------------------ "

    boringExceptions := #(
      'no such file to load -- rubygems/defaults'
      'uninitialized constant InstallCommand'
      'no such file to load -- openssl'
      ) .

    " ------------------------------------------------------------------
      This installs an exception handler that will be invoked for every
      exception thrown.  It prints the message from all exceptions, and
      then checks to see if the exception is interesting.  If it is, then
      it pauses the VM and drops down into the topaz prompt.
      ------------------------------------------------------------------ "

    Exception installDebugBlock: [:ex|
      GsFile gciLogServer: '==== "', ex asString, '" (', ex class name, ') ====' .
      boring := boringExceptions anySatisfy: [:x| ex asString includesString: x ] .
      boring ifFalse: [ nil pause ] .
    ] .


    " ------------------------------------------------------------------
      Setup the ARGV array for the script, and then run it.
      ------------------------------------------------------------------ "
    RubyContext default setARGV: #( 'install' 'rake' ) scriptName: 'maglev-gem' .
    RubyContext loadFileNamed: './bin/maglev-gem' .
  %

This Smalltalk code sets up a number of debugging variables, and installs
an exception handling hook that will intercept all exceptions.  It then
invokes <tt>./bin/maglev-gem install rake</tt>, and will break back to the
topaz prompt when it hits an "interesting" exception.

==== Run it

To invoke the script:

  topaz 1> input gem.inp

Topaz will echo the script to output, and then run it.  Since we are
tracing loads, we see output like:

  -- RubyFile>>load  : loading /Users/pmclain/projects/maglev/git/bin/maglev-gem
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/rubygems_version.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/defaults.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/1.8/thread.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/1.8/rbconfig.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/exceptions.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/version.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/requirement.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/dependency.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/gem_path_searcher.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/source_index.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/user_interaction.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/specification.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/platform.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/builder.rb
  ==== "no such file to load -- rubygems/defaults/operating_system" (RubyLoadError) ====
  ==== "no such file to load -- rubygems/defaults/maglev" (RubyLoadError) ====
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/config_file.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/1.8/yaml.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/1.8/rbyaml.rb
  ...

There are also a couple of boring exceptions printed.  After a bit, we get
to the real exception:

  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/1.8/time.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/local_remote_options.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/validator.rb
  -- RubyFile>>load  : loading $MAGLEV_HOME/lib/ruby/site_ruby/1.8/rubygems/version_option.rb
  ==== "Undefined method `do_not_reverse_lookup=' for Socket  " (MessageNotUnderstood) ====
  Execution has been suspended by a "pause" or "halt" message.
  topaz 1>

In this case, the problem is obvious: we haven't implemented
<tt>Socket#do_not_reverse_lookup=</tt>....

=== Using Squeak to Debug

Download and install the GemTools squeak image from the website.
Fire up Squeak, and login to the GemStone VM.
From the GemStone transcript window, issue the following commands:


  RubyDirectory _chdir: (RubyEnv _getenv:'MAGLEV_HOME') .
  RubyContext load: #() .
  RubyContext default runFileNamed: 'my_file.rb' withARGV: #() .

The debugging environment is not quite the same as a standard script (e.g.,
__FILE__ and $0 are not set correctly), but if you don't depend on those,
then this is a possible way to debug/explore your ruby program.

