= Release Notes for the MagLev Alpha
== <tt>$MAGLEV_HOME/lib</tt>
=== iconv:  'Unable to find FFI 'iconv_open' in: ,

On Mac OSX, a require of iconv may result in the following error message:

  ERROR 2023, Error, 'Unable to find FFI 'iconv_open' in: ,

This has been seen on machines with the MacPorts version of libiconv.dylib
installed AND the <tt>DYLD_FALLBACK_LIBRARY_PATH</tt> environment variable
set to load the MacPorts version.  This is because the names of the
routines in the MacPorts version of iconv are different than the names in
the Apple supplied iconv.

Here are the names in the Apple provided iconv:

  $ nm /usr/lib/libiconv.dylib | grep iconv_open
  000150b5 T _iconv_open
  000158cc T _libiconv_open

Here are the names in the MacPorts version:

    $ nm /opt/local/lib/libiconv.dylib | grep iconv_open
    0000000000017f30 T _libiconv_open
    0000000000018a60 T _libiconv_open_into

Solution is to ensure the DYLD_FALLBACK_LIBRARY_PATH environment variable
is not set when running MagLev.

== Persistence support

See the {Persistence API}[link:files/docs/persistence-api.html]

== Special methods
* Underscore + camelCase = GemStone unmodifiable code.  There are several
  methods that begin with an underscore and are camelCase,
  e.g. <tt>_isArray</tt>.  MagLev will not allow you to re-define these
  methods.

* The method names (selectors) <tt>eval</tt>, <tt>class_eval</tt>,
  <tt>module_eval</tt> and <tt>instance_eval</tt> are handled specially in
  maglev.  If you define a method with one of those selectors, then you'll
  get an error when trying to call it.  E.g., given:

    class C
      def eval(an_arg)
        ...
      end
    end

    C.new.eval("puts 10")

  When you run it, you'll get:

    error , too many arguments,
              during foo.rb
    ERROR 2023, Error, 'too many arguments' (ArgumentError)

== MagLev Options

These are the MagLev specific command line options to the maglev-ruby shell
script.

=== <tt>--stone s</tt>

By default, <tt>maglev-ruby</tt> starts a VM that will attempt to connect
to the stone (repository server) named 'maglev'.  The <tt>--stone
astone</tt> option tells the VM to connect to the stone named 'astone'.

New stones can be created and managed via the +Rakefile+ in
<tt>$MAGLEV_HOME</tt>:

  $ rake -T stone
  (in /Users/pmclain/GemStone/checkouts/git)
  rake stone:all[task_name]        # Invoke a task on all MagLev servers
  rake stone:create[server_name]   # Create a new MagLev server and repository
  rake stone:destroy[server_name]  # Destroy an existing MagLev server and repository
  rake stone:list                  # List MagLev servers managed by this Rakefile

=== <tt>-MallIvsDynamic</tt>

This option tells MagLev to make all instance variables dynamic.  Normally,
MagLev optimizes instance variables mentioned during the first opening of a
class by making references to them a simple integer offset from a well
known location in the object structure.  These optimized instance variables
are known as static instance variables.  All other instance variables for
the class, whether mentioned in a subsequent opening of the class, or
dynamically generated, are dynamic instance variables.  MagLev must lookup
references to dynamic instance variables by name, which takes more time
than using a pre-computed index.

If the <tt>-MallIvsDynamic</tt> flag is passed to <tt>maglev-ruby</tt>,
then all instance variables will be dynamic, even those in the first
opening of a class.  This is necessary if code tries to
<tt>remove_instance_variable</tt> on a static instance variable (i.e.,
Rails).

=== <tt>-Mcommit</tt>

This flag is intended as an easy way to commit code (and data) in a ruby
file to the persistent store. The flag does two things (1) wraps the entire
file in a persistent block, and (2) commits upon exiting.

E.g., this command:

  $ maglev-ruby -Mcommit foo.rb

acts like this:

    Maglev.persistent do
      require 'foo.rb'
    end
    Maglev.commit_transaction

=== <tt>-Mpersistent</tt>

Starts the VM in persistent mode (normally it is started in transient
mode).  E.g., this command:

  $ maglev-ruby -Mpersistent foo.rb

acts like this:

    Maglev.persistent do
      require 'foo.rb'
    end

=== <tt>-MtraceGlobals</tt>

This is a debug flag that prints trace information when global variables
are defined or have their values set.

=== <tt>-MtraceLoad</tt>

This is a debug flag that prints trace information as each <tt>.rb</tt>
file is read by MagLev (from either a require or a load).

=== <tt>-MlogSexp</tt>

This is a debug flag that prints s-expressions as they are parsed by the parser.
This can be pretty verbose...

=== <tt>-Mrlwrap</tt>

Runs MagLev with rlwrap.  This provides command line editing support if you
end up in the topaz debugger, or for irb.

== RubyGems

MagLev comes with a copy of RubyGems 1.3.7 pre-installed.  Gems get loaded
into <tt>$MAGLEV_HOME/lib/maglev/gems/1.8/gems</tt>.  Gems that are based
on a C-extension do not install or run with MagLev.

== Kernel
* Note that we don't support instance variables as block arguments,
  <tt>{ |@cc| }</tt> must be coded as <tt>{ | c | @cc = c }</tt>.
* <tt>Kernel#require</tt>: Tilde expansion is done only on <tt>~/...</tt>,
  not on <tt>~user/...</tt>, <tt>$"</tt> is not updated

=== Noise from rlwrap
* In some cases, <tt>rlwrap</tt> (see
  Prerequisites[link:files/docs/prerequisites.html]) will output noise
  while typing at a Topaz prompt (Linux only).

== Unsupported Features
* +ARGF+ is not supported.
* Continuations are not supported.
* Most methods in +ObjectSpace+ are stubs that raise
  +NotImplementedError+.
* <tt>String#unpack</tt> and <tt>Array#pack</tt> do not support pointers ('p' and 'P').
* <tt>Kernel#set_trace_func</tt> is not supported.
