#!/bin/bash
#
# Runs a ruby file using the MagLev VM
COMMAND="`basename $0`"

usage()
{
cat << EOF
Usage: $COMMAND [options] <filename>

    Execute a Ruby file

OPTIONS:
   -d           Set debugging flags
   -G           Use /opt/gemstone instead of MAGLEV_HOME for locks and logs
   -h           Show this message and exit
   --help       Show this message and exit
   -v           Print version number, then turn on verbose mode
   --copyright  Print copyright and exit
   --version    Print version number and exit
EOF
}

# Make sure MAGLEV_HOME is set
if [ -z "${MAGLEV_HOME}" ]; then
    echo "\$MAGLEV_HOME is not set."
    echo "To fix this, set a valid MAGLEV_HOME in your .bashrc"
    exit 1
fi
# Make sure GEMSTONE is set
if [ -z "${GEMSTONE}" ]; then
    export GEMSTONE=$MAGLEV_HOME/gemstone
    # echo "Setting \$GEMSTONE to \$MAGLEV_HOME/gemstone"
fi
# Check for topaz command to validate the $GEMSTONE directory
if [ ! -x $GEMSTONE/bin/topaz ]; then
    echo "$GEMSTONE does not appear to be a valid GemStone product directory"
    echo "To fix this, set a valid GEMSTONE in your .bashrc"
    exit 1
fi

# Environment variable settings
export GEMSTONE_GLOBAL_DIR=$MAGLEV_HOME
export GEMSTONE_SYS_CONF=$MAGLEV_HOME/etc/system.conf

args=""
debug=0
while [[ $# > 0 ]]
do
    case $1 in
        --copyright)
            echo "maglev - Copyright (C) 2008-2009 GemStone Systems, Inc."
            exit
            ;;
        -d)
            debug=1
            ;;
        -e)
            echo "-e not yet implemented"
            exit
            ;;
        -G)
            unset GEMSTONE_GLOBAL_DIR
            ;;
        -h)
            usage
            exit
            ;;
        --help)
            usage
            exit
            ;;
        -I)
            args="$args '$1' '$2'"
            shift
            ;;
        -I*)
            args="$args '$1'"
            ;;
        -v|--verbose)
            grep ^maglev $MAGLEV_HOME/version.txt
            if [ $# -eq 1 ]; then exit; fi
            ;;
        --version)
            grep ^maglev $MAGLEV_HOME/version.txt
            exit
            ;;
        *)
            break
            ;;
    esac
    shift
done

# Make sure we have at least one argument
if [ $# -lt 1 ]; then
    echo "$COMMAND: Error -- requires a filename to run."
    echo
    usage
    exit 1
fi

RUBYSCRIPT=$1
shift
# Make sure the argument is a valid file
if [ ! -e $RUBYSCRIPT ]; then
    echo "$COMMAND: Error -- The file \"$RUBYSCRIPT\" does not exist"
    exit 1
fi

# The rest of the command line gets passed to $RUBYSCRIPT via ARGV.
# wrap each of the remaining command line params in single quotes so that
# we can pass them as a literal array to Smalltalk.
while [[ $# > 0 ]]
do
    args="$args '$1'"
    shift
done

# need to keep topaz's stdin connected to the tty always
#  so stdin is usable from Ruby , so do not redirect topaz stdin
base=`basename $0`
dbscript=`mktemp /tmp/${base}.XXXX` || exit 1
rm -f $dbscript
if [ $debug == 1 ]; then
  cat $MAGLEV_HOME/etc/.topazdebugini > $dbscript
else
  cat $MAGLEV_HOME/etc/.topazini > $dbscript
fi
cat - >> $dbscript <<-EOFA
run
| res ctx |
(ctx := RubyContext) load .
ctx default runFileNamed: '$RUBYSCRIPT' withARGV: #($args) .
GsFile stdout close . "ensure final LF on stdout"
^ res
%
EOFA

# generate a topaz exit command as last line of init file
if [ $debug == 0 ]; then
  cat - >> $dbscript <<-EOFB  
exit
EOFB
else
  cat - >> $dbscript <<-EOFC
exitifnoerror
EOFC
fi

TOPAZ_CMD="$GEMSTONE/bin/topaz -l -q -I $dbscript "

# note that   /usr/bin/which   on Solaris always produces  $?==0 , so be careful
#  about how you test result of which .
#
rlwrapExe=$(which rlwrap 2> /dev/null )
if [ -f "$rlwrapExe" ]; then
  $rlwrapExe $TOPAZ_CMD
  exitStatus=$?
else
  $TOPAZ_CMD
  exitStatus=$?
fi
rm -f $dbscript
exit $exitStatus
