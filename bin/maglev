#!/bin/bash
#
# Runs GemStone scripts that used to be invoked as individual commands

COMMAND="`basename $0`"

usage() {
cat <<ENDHELP
Usage: 
$COMMAND {start|start-debug|start-bench|stop|restart|status|topaz|topaz-debug|
        squeak|force-reload|version|help}

To control the MagLev server:
maglev start          - Start MagLev server processes
maglev start-debug    - Start MagLev server processes with verbose output
maglev start-bench    - Start MagLev server with performance optimizations
maglev start-parser   - Force parser process to start if it's dead
maglev stop           - Stop MagLev server processes
maglev restart        - Restart MagLev server processes
maglev status         - Display MagLev server status
maglev version        - Display MagLev version number
maglev force-reload   - Stop MagLev server, replace with empty repository!!!

To execute other maglev commands:
maglev topaz          - Enter a Topaz shell
maglev topaz-debug    - Enter a Topaz shell useful for debugging 
maglev squeak         - Start optional Squeak development environment
maglev vsd            - Start Visual Statistics Display monitoring tool
maglev help           - Display this text
ENDHELP
}

# Environment variable settings
if [ -z "$MAGLEV_HOME" ]; then
  if [ -x $PWD/gemstone/bin/startstone ]; then
    # echo "using $PWD as MAGLEV_HOME"
    export MAGLEV_HOME=$PWD
  else
    echo "$PWD is not a valid MAGLEV_HOME directory"
    echo "To fix this, set a valid MAGLEV_HOME in your .bashrc"
    exit 1
  fi
fi
#
if [ -z "$PARSETREE_PORT" ]; then
    # echo "using 2001 as PARSETREE_PORT"
    export PARSETREE_PORT=2001
fi
#
export RUBY_VERSION=`ruby -e "puts \"#{RUBY_VERSION}\""`
export GEMSTONE_GLOBAL_DIR=$MAGLEV_HOME
export GEMSTONE_SYS_CONF=$MAGLEV_HOME/etc/system.conf
export GEMSTONE_LOG=$MAGLEV_HOME/log/gs64stone.log
export GEMSTONE=$MAGLEV_HOME/gemstone
TOPAZ_CMD="$GEMSTONE/bin/topaz -q -I $MAGLEV_HOME/etc/.topazini -l "
TOPAZDEBUG_CMD="$GEMSTONE/bin/topaz -I $MAGLEV_HOME/etc/.topazdebugini -l "

# Check options
while getopts 'hv' OPTION
do
    case $OPTION in
        h)
            usage
            exit
            ;;
        v)
            grep ^maglev $MAGLEV_HOME/version.txt
            exit
            ;;
        ?)
            usage
            exit
            ;;
     esac
done
shift $(($OPTIND - 1))

# Commands
startserver() {
  $GEMSTONE/bin/startnetldi -g &>/dev/null
  $GEMSTONE/bin/startstone gs64stone &>/dev/null
  $GEMSTONE/bin/waitstone gs64stone &>/dev/null
  echo "MagLev server gs64stone started"
}

startserver-debug() {
  $GEMSTONE/bin/startnetldi -g
  $GEMSTONE/bin/startstone -z $MAGLEV_HOME/etc/system-debug.conf gs64stone
  $GEMSTONE/bin/waitstone gs64stone
  echo "MagLev server gs64stone started in verbose mode"
}

startserver-bench() {
  $GEMSTONE/bin/startnetldi -g
  $GEMSTONE/bin/startstone -z $MAGLEV_HOME/etc/system-benchmark.conf gs64stone
  $GEMSTONE/bin/waitstone gs64stone
  echo "MagLev server gs64stone started with performance optimizations"
}

loadPrimsIfNeeded() {
  echo "Loading prims if needed -- it may take a few seconds"
  $TOPAZ_CMD << EOF > /dev/null
    run
      RubyContext _saved == nil ifTrue: [
      RubyContext reset; load. ]
%
exit
EOF
  echo "Prims are loaded"
}

startparser() {
  if [ "$RUBY_VERSION" != "1.8.6" ]; then
    echo "### This command only works on Ruby 1.8.6,"
    echo "but your RUBY_VERSION appears to be $RUBY_VERSION"
    echo "You can skip _this_ check by using \"maglev start-debug\","
    echo "but \$MAGLEV_HOME/bin/parsetree_parser.rb may silently fail."
    echo "Use \"maglev status\" to check that the parser is running."
    exit 1
  fi
  if [ -z "`lsof -Fp -w -iTCP:${PARSETREE_PORT}`" ]; then
    nohup ruby $MAGLEV_HOME/bin/parsetree_parser.rb \
      >$MAGLEV_HOME/log/parsetree.log 2>/dev/null &
    PARSER_PID="$!"
    echo "MagLev Parse Server process $PARSER_PID started on port $PARSETREE_PORT"
  else
    echo "MagLev Parse Server process already running on port $PARSETREE_PORT"
  fi
}

forceparser() {
    echo "FORCEPARSER: PATH: $PATH"
    nohup ruby $MAGLEV_HOME/bin/parsetree_parser.rb \
      >$MAGLEV_HOME/log/parsetree.log 2>$MAGLEV_HOME/log/parsetree.err &
    PARSER_PID="$!"
    echo "MagLev Parse Server process $PARSER_PID started on port $PARSETREE_PORT"
    echo "Check \$MAGLEV_HOME/log/parsetree.err if the parser isn't working"
}

startparser-debug() {
    echo "STARTPARSER-DEBUG: PATH: $PATH"
  if [ -z "`lsof -Fp -w -iTCP:${PARSETREE_PORT}`" ]; then
    nohup ruby $MAGLEV_HOME/bin/parsetree_parser.rb \
      >$MAGLEV_HOME/log/parsetree.log 2>$MAGLEV_HOME/log/parsetree.err &
    PARSER_PID="$!"
    echo "MagLev Parse Server process $PARSER_PID started on port $PARSETREE_PORT in verbose mode"
    echo "Parser logfiles are \$MAGLEV_HOME/log/parsetree.*"
  else
    echo "MagLev Parse Server process already running on port $PARSETREE_PORT"
  fi
}

stopserver() {
  $GEMSTONE/bin/stopstone gs64stone DataCurator swordfish -i
  $GEMSTONE/bin/stopnetldi
}

stopparser() {
  if [ ! -z "`lsof -Fp -w -iTCP:${PARSETREE_PORT}`" ]; then
    kill -9 `lsof -Fp -w -iTCP:${PARSETREE_PORT} | cut -c2-`
  fi
}

status() {
  echo "MAGLEV_HOME = $MAGLEV_HOME"
  $GEMSTONE/bin/gslist -clv
  if [ ! -z "`lsof -Fp -w -iTCP:${PARSETREE_PORT}`" ]; then
    echo "MagLev Parse Server port = $PARSETREE_PORT"
    lsof -P -w -iTCP:${PARSETREE_PORT}
    # if you don't have permission to run lsof, use the following instead
    # netstat -an | grep "[:.]$PARSETREE_PORT " | grep "LISTEN"
  else
    echo "MagLev Parse Server is not running on port $PARSETREE_PORT"
  fi
}

version() {
  grep ^maglev $MAGLEV_HOME/version.txt
}

topaz() {
  if [ -z "`which rlwrap > /dev/null 2>&1`" ]; then
    $TOPAZ_CMD $@
  else
    rlwrap $TOPAZ_CMD $@
  fi
}

topaz-debug() {
  if [ -z "`which rlwrap > /dev/null 2>&1`" ]; then
    $TOPAZDEBUG_CMD $@
  else
    rlwrap $TOPAZDEBUG_CMD $@
  fi
}

initialize() {
  # grab a virgin repository if no repository exists
  if [ ! -e $MAGLEV_HOME/data/extent0.ruby.dbf ]; then
    cp -p $GEMSTONE/bin/extent0.ruby.dbf $MAGLEV_HOME/data/
    chmod 660 $MAGLEV_HOME/data/extent0.ruby.dbf
  fi
}

destroy() {
  rm -rf $MAGLEV_HOME/data/*dbf $MAGLEV_HOME/log/* $MAGLEV_HOME/locks/*
}

squeak() {
  # If you use Squeak for development and debugging
  if [ -e /Applications/GemTools-3.0.app ]; then
      open /Applications/GemTools-3.0.app
  else
      echo "The GemTools application used by the 'squeak' command was not found on your system"
      echo "To fix this, correct the 'squeak' command in the maglev script"
  fi
}

startvsd() {
  export PATH=$GEMSTONE/bin:$PATH
  $GEMSTONE/bin/vsd &
}

mri() {
  export DYLD_LIBRARY_PATH=$GEMSTONE/lib32
  irb -I $MAGLEV_HOME/gci -rgci
}

gemx() {
  # If you use Squeak for development and debugging
  if [ -e /Applications/GemX.app ]; then
      open /Applications/GemX.app
  else
      echo "The application used by the 'gemx' command was not found on your system"
      echo "To fix this, correct the 'gemx' command in the maglev script"
  fi
}


# See what we were asked to do
case "$1" in
  start)
        initialize
        startparser
        startserver
	loadPrimsIfNeeded
        ;;
  start-parser)
        initialize
        forceparser
        ;;
  start-debug)
        initialize
        startparser-debug
        startserver-debug
	loadPrimsIfNeeded
        ;;
  start-bench)
        initialize
        startparser
        startserver-bench
	loadPrimsIfNeeded
        ;;
  stop)
        stopserver
        stopparser
        ;;
  restart)
        stopserver
        stopparser
        startparser
        startserver
	loadPrimsIfNeeded
        ;;
  status)
        status
        ;;
  version)
        version
        ;;
  topaz)
        shift
        # pass params so we can execute 'maglev topaz -T200000'
        topaz $@
        ;;
  topaz-debug)
        shift
        # pass params so we can execute 'maglev topaz -T200000'
        topaz-debug $@
        ;;
  squeak)
        squeak
        ;;
  vsd)
        startvsd
        ;;
  mri)
        mri
        ;;
  gemx)
        gemx
        ;;
  force-reload)
        stopserver
        stopparser
	destroy
	initialize
        ;;
  help)
        usage
        ;;
  *)
        echo "Usage: $COMMAND {start|start-debug|start-bench|stop|restart|status|topaz|topaz-debug|"
        echo "               squeak|force-reload|version|help}"
        exit 1
        ;;
esac
