#!/bin/bash
#
# Runs GemStone scripts that used to be invoked as individual commands

COMMAND="`basename $0`"

usage() {
cat <<ENDHELP
Usage: 
$COMMAND {start|start-debug|start-bench|stop|restart|status|topaz|topaz-debug|
        squeak|force-reload|version|help}

To control the MagLev server:
maglev start          - Start MagLev server processes
maglev start-debug    - Start MagLev server processes with verbose output
maglev start-bench    - Start MagLev server with performance optimizations
maglev stop           - Stop MagLev server processes
maglev restart        - Restart MagLev server processes
maglev status         - Display MagLev server status
maglev version        - Display MagLev version number
maglev force-reload   - Stop MagLev server, replace with empty repository!!!
maglev start-parser   - Start ParseTree based parser (deprecated)
maglev stop-parser    - Stop ParseTree based parser (deprecated)

To execute other maglev commands:
maglev topaz          - Enter a Topaz shell
maglev topaz-debug    - Enter a Topaz shell useful for debugging 
maglev squeak         - Start optional Squeak development environment
maglev vsd            - Start Visual Statistics Display monitoring tool
maglev help           - Display this text
ENDHELP
}

# Detect operating system
OS=`uname -s`
[ $OS = "Darwin" ] && OS="MacOSX"
[ $OS = "SunOS" ] && [ "`uname -m`" = "i86pc" ] && OS="Solaris-x86"

# Environment variable settings
if [ -z "$MAGLEV_HOME" ]; then
  if [ -x $PWD/gemstone/bin/startstone ]; then
    # echo "using $PWD as MAGLEV_HOME"
    export MAGLEV_HOME=$PWD
  else
    echo "$COMMAND: [Error] $PWD is not a valid MAGLEV_HOME directory"
    echo "To fix this, set a valid MAGLEV_HOME in your .bashrc"
    exit 1
  fi
fi
# Set environment variables unless they already exist
[ -z "$PARSETREE_PORT" ] && export PARSETREE_PORT=2001
[ -z "$STONENAME" ] && STONENAME=maglev
[ -z "$GEMSTONE_SYS_CONF" ] && export GEMSTONE_SYS_CONF=$MAGLEV_HOME/etc/system.conf
[ -z "$GEMSTONE_DATADIR" ] && export GEMSTONE_DATADIR=$MAGLEV_HOME/data/$STONENAME
[ -z "$GEMSTONE_LOGDIR" ] && export GEMSTONE_LOGDIR=$MAGLEV_HOME/log/$STONENAME
[ -z "$GEMSTONE_BACKUPDIR" ] && export GEMSTONE_BACKUPDIR=$MAGLEV_HOME/log/backups
[ -z "$GEMSTONE_LOG" ] && export GEMSTONE_LOG=$GEMSTONE_LOGDIR/$STONENAME.log
[ -z "$GEMSTONE" ] && export GEMSTONE=$MAGLEV_HOME/gemstone
[ -z "$GEMSTONE_GLOBAL_DIR" ] && export GEMSTONE_GLOBAL_DIR=$MAGLEV_HOME
# Only use $MAGLEV_HOME/etc/.topazini if normal .topazini doesn't exist
if [[ -e .topazini || -e $HOME/.topazini ]]; then
  TOPAZ_CMD="$GEMSTONE/bin/topaz -q "
  TOPAZDEBUG_CMD="$GEMSTONE/bin/topaz "
else
  TOPAZ_CMD="$GEMSTONE/bin/topaz -q -I $MAGLEV_HOME/etc/.topazini -l "
  TOPAZDEBUG_CMD="$GEMSTONE/bin/topaz -I $MAGLEV_HOME/etc/.topazini -l "
fi

# Check options
while getopts 'hv' OPTION
do
    case $OPTION in
        h)
            usage
            exit
            ;;
        v)
            echo "`grep ^maglev $MAGLEV_HOME/version.txt | cut -f1 -d[`[`uname -sm`]"
            exit
            ;;
        ?)
            usage
            exit
            ;;
     esac
done
shift $(($OPTIND - 1))

# Commands
startserver() {
  $GEMSTONE/bin/startnetldi -g -a $USER | grep Info].*server
  $GEMSTONE/bin/startstone $STONENAME | grep Info]:.*[\\\'\\\"]$STONENAME
  $GEMSTONE/bin/waitstone $STONENAME &>/dev/null
  # echo "MagLev server \"$STONENAME\" started"
}

startserver-debug() {
  $GEMSTONE/bin/startnetldi -g -a $USER
  $GEMSTONE/bin/startstone -z $MAGLEV_HOME/etc/system-debug.conf $STONENAME
  $GEMSTONE/bin/waitstone $STONENAME
  # echo "MagLev server \"$STONENAME\" started in verbose mode"
}

startserver-bench() {
  $GEMSTONE/bin/startnetldi -g -a $USER | grep Info].*server
  $GEMSTONE/bin/startstone -z $MAGLEV_HOME/etc/system-benchmark.conf $STONENAME | grep Info]:.*[\\\'\\\"]$STONENAME
  $GEMSTONE/bin/waitstone $STONENAME &>/dev/null
  # echo "MagLev server \"$STONENAME\" started with performance optimizations"
}

rubyversioncheck() {
# Pick up environment variable if needed for ruby 186 patchlevel 287
if [ -z "$RUBY186P287" ]; then
    # echo "using '`which ruby`' as ruby 186 patchlevel 287"
    export RUBY186P287=ruby
fi
# Check for Ruby 1.8.6 patchlevel 287
if [ `$RUBY186P287 --version | grep -c 'ruby 1\.8\.6'` -ne 1 ] || \
   [ `$RUBY186P287 --version | grep -c 'patchlevel 287'` -ne 1 ]; then
   cat << EOF
#######################  WARNING  ###############################
# The MagLev parser requires MRI ruby 1.8.6 patchlevel 287.
# Your MRI ruby version appears to be:
#    `$RUBY186P287 --version`
#
# To fix this upgrade your default ruby to 1.8.6 patchlevel 287
# or set the environment variable RUBY186P287 to point to a 
# ruby 1.8.6 patchlevel 287 executable.
# 
# You can skip _this_ check by using "maglev start-debug",
# but \$MAGLEV_HOME/bin/parsetree_parser.rb may silently fail.
# 
# Use "maglev status" to check that the parser is running.
#################################################################
EOF
   exit 1
fi
# We found Ruby 1.8.6 patchlevel 287
# Now check for ParseTree version 3.0.3
$RUBY186P287 $MAGLEV_HOME/bin/parsetree_verscheck.rb > /dev/null
if [ $? -ne 0 ];then
   cat << EOF
#######################  WARNING  ###############################
# The MagLev parser requires ParseTree 3.0.3
#
# To fix this install the ParseTree 3.0.3 gem into:
#     $RUBY186P287
# 
# You can skip _this_ check by using "maglev start-debug",
# but \$MAGLEV_HOME/bin/parsetree_parser.rb may silently fail.
# 
# Use "maglev status" to check that the parser is running.
#################################################################
EOF
   exit 1

fi
}

ensurePrimsLoaded() {
  $TOPAZ_CMD << EOF > /dev/null
    set gemstone $STONENAME
    login
    obj RubyPrimsLoaded
    quit
EOF
  if [ $? -ne 0 ] ; then
    # Have to have old parser to load prims
    rubyversioncheck
    startparser
    echo "Loading kernel. It may take a few seconds..."
    $TOPAZ_CMD << EOF > /dev/null
      set gemstone $STONENAME
      input $GEMSTONE/upgrade/ruby/allprims.topaz
EOF
  fi
}

startparser() {
  if [ -z "`lsof -Fp -w -iTCP:${PARSETREE_PORT}`" ]; then
    nohup $RUBY186P287 $MAGLEV_HOME/bin/parsetree_parser.rb \
      >$MAGLEV_HOME/log/parsetree.log 2>/dev/null &
    PARSER_PID="$!"
    echo "MagLev Parse Server process $PARSER_PID started on port $PARSETREE_PORT"
  else
    echo "MagLev Parse Server process already running on port $PARSETREE_PORT"
  fi
}

forceparser() {
    echo "FORCEPARSER: PATH: $PATH"
    nohup $RUBY186P287 $MAGLEV_HOME/bin/parsetree_parser.rb \
      >$MAGLEV_HOME/log/parsetree.log 2>$MAGLEV_HOME/log/parsetree.err &
    PARSER_PID="$!"
    echo "MagLev Parse Server process $PARSER_PID started on port $PARSETREE_PORT"
    echo "Check \$MAGLEV_HOME/log/parsetree.err if the parser isn't working"
}

startparser-debug() {
    echo "STARTPARSER-DEBUG: PATH: $PATH"
  if [ -z "`lsof -Fp -w -iTCP:${PARSETREE_PORT}`" ]; then
    nohup $RUBY186P287 $MAGLEV_HOME/bin/parsetree_parser.rb \
      >$MAGLEV_HOME/log/parsetree.log 2>$MAGLEV_HOME/log/parsetree.err &
    PARSER_PID="$!"
    echo "MagLev Parse Server process $PARSER_PID started on port $PARSETREE_PORT in verbose mode"
    echo "Parser logfiles are \$MAGLEV_HOME/log/parsetree.*"
  else
    echo "MagLev Parse Server process already running on port $PARSETREE_PORT"
  fi
}
 
stopserver() {
  $GEMSTONE/bin/stopstone $STONENAME DataCurator swordfish -i 1>/dev/null
  $GEMSTONE/bin/stopnetldi | grep Info].*[Ss]erver
}

stopparser() {
  if [ ! -z "`lsof -Fp -w -iTCP:${PARSETREE_PORT}`" ]; then
    kill -9 `lsof -Fp -w -iTCP:${PARSETREE_PORT} | cut -c2-`
  fi
}

status() {
  echo "MAGLEV_HOME = $MAGLEV_HOME"
  $GEMSTONE/bin/gslist -clv
  if (( MagRpDEBUG_level < 0 )) ; then
    if [ ! -z "`lsof -Fp -w -iTCP:${PARSETREE_PORT}`" ]; then
      echo "MagLev Parse Server port = $PARSETREE_PORT"
      lsof -P -w -iTCP:${PARSETREE_PORT}
      # if you don't have permission to run lsof, use the following instead
      # netstat -an | grep "[:.]$PARSETREE_PORT " | grep "LISTEN"
    else
      echo "MagLev Parse Server is not running on port $PARSETREE_PORT"
    fi
  fi
}

version() {
  echo "`grep ^maglev $MAGLEV_HOME/version.txt | cut -f1 -d[`[`uname -sm`]"
}

topaz() {
  if [ -z "`which rlwrap > /dev/null 2>&1`" ]; then
    $TOPAZ_CMD $@
  else
    rlwrap $TOPAZ_CMD $@
  fi
}

topaz-debug() {
  if [ -z "`which rlwrap > /dev/null 2>&1`" ]; then
    $TOPAZDEBUG_CMD $@
  else
    rlwrap $TOPAZDEBUG_CMD $@
  fi
}

initialize() {
  # create GEMSTONE_LOGDIR if it doesn't exist
  if [ ! -d $GEMSTONE_LOGDIR ]; then
    mkdir -p $GEMSTONE_LOGDIR
    chmod 750 $GEMSTONE_LOGDIR
  fi
  # create GEMSTONE_DATADIR if it doesn't exist
  if [ ! -d $GEMSTONE_DATADIR ]; then
    mkdir -p $GEMSTONE_DATADIR/extent
    mkdir -p $GEMSTONE_DATADIR/tranlog
    chmod 750 $GEMSTONE_DATADIR $GEMSTONE_DATADIR/extent $GEMSTONE_DATADIR/tranlog
  fi
  # grab a virgin repository if no repository exists
  if [ ! -e $GEMSTONE_DATADIR/extent0.ruby.dbf ]; then
    cp -p $GEMSTONE/bin/extent0.ruby.dbf $GEMSTONE_DATADIR/extent/
    chmod 660 $GEMSTONE_DATADIR/extent/extent0.ruby.dbf
  fi
}

destroy() {
  rm -f $MAGLEV_HOME/data/$STONENAME/extent/*.dbf
  rm -f $MAGLEV_HOME/data/$STONENAME/tranlog/*.dbf
  rm -f $MAGLEV_HOME/log/$STONENAME/*
  # The locks should go away by themselves
  # rm -f $MAGLEV_HOME/locks/$STONENAME..lck $MAGLEV_HOME/locks/$STONENAME\@*
}

squeak() {
  # If you use Squeak for development and debugging
  case "$OS" in
      MacOSX)
      if [ -e /Applications/GemTools-MagLev.app ]; then
          open /Applications/GemTools-MagLev.app
      else
          echo "[Error] Cannot open /Applications/GemTools-MagLev.app"
          echo "as that file does not exist. To fix this, download and unzip"
          echo "http://seaside.gemstone.com/squeak/GemTools-MagLev.zip"
          echo "then move GemTools-MagLev.app to /Applications"
          exit 1
      fi
      ;;
      Linux)
      if [ -e $MAGLEV_HOME/../GemTools-MagLev.app/GemTools.sh ]; then
          bash "$MAGLEV_HOME/../GemTools-MagLev.app/GemTools.sh"
      else
          echo "[Error] Cannot open \$MAGLEV_HOME/../GemTools-MagLev.app/GemTools.sh"
          echo "as that file does not exist. To fix this, download and unzip"
          echo "http://seaside.gemstone.com/squeak/GemTools-MagLev.zip"
          echo "then move GemTools-MagLev.app to \$MAGLEV_HOME/../"
          exit 1
      fi
      ;;
      *)
      echo "[Error] "maglev squeak" only works on a Linux or Mac OS X"
      echo "The result from \"uname -sm\" is \"`uname -sm`\""
      exit 1
      ;;
  esac
}

startvsd() {
  export PATH=$GEMSTONE/bin:$PATH
  $GEMSTONE/bin/vsd &
}

mri() {
  export DYLD_LIBRARY_PATH=$GEMSTONE/lib32
  irb -I $MAGLEV_HOME/gci -rgci
}

# See what we were asked to do
case "$1" in
  start)
        initialize
	if (( MagRpDEBUG_level < 0 )) ; then
          rubyversioncheck
          startparser
	fi
        startserver
	ensurePrimsLoaded
        ;;
  start-parser)
        rubyversioncheck
        startparser
        ;;
  stop-parser)
        stopparser
        ;;
  start-debug)
        initialize
	if (( MagRpDEBUG_level < 0 )) ; then
          # Leave a loophole about checking for ruby 186 patchlevel 287
          # rubyversioncheck
          startparser-debug
	fi
        startserver-debug
	ensurePrimsLoaded
        ;;
  start-bench)
        initialize
	if (( MagRpDEBUG_level < 0 )) ; then
          rubyversioncheck
          startparser
	fi
        startserver-bench
	ensurePrimsLoaded
        ;;
  stop)
        stopserver
        stopparser
        ;;
  restart)
        stopserver
        stopparser
	if (( MagRpDEBUG_level < 0 )) ; then
          rubyversioncheck
          startparser
	fi
        startserver
	ensurePrimsLoaded
        ;;
  status)
        status
        ;;
  version)
        version
        ;;
  topaz)
        shift
        # pass params so we can execute 'maglev topaz -T200000'
        topaz $@
        ;;
  topaz-debug)
        shift
        # pass params so we can execute 'maglev topaz -T200000'
        topaz-debug $@
        ;;
  squeak)
        squeak
        ;;
  vsd)
        startvsd
        ;;
  mri)
        mri
        ;;
  force-reload)
        stopserver
        stopparser
	destroy
	initialize
        ;;
  help)
        usage
        ;;
  *)
        echo "Usage: $COMMAND {start|start-debug|start-bench|stop|restart|status|topaz|topaz-debug|"
        echo "               squeak|force-reload|version|help}"
        exit 1
        ;;
esac
