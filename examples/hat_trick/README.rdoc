= The Hat Trick

This directory holds a recreation of the "Hat Trick" performed by Avi Bryant
at RailsConf 2008, which you can see at http://vimeo.com/1147409  Avi's
demo was over a year ago, and things have moved on since then.  If you want
to recreate his interactive demo, read the "Hat Trick in IRB" section
below.

== Running the Hat Trick from files

First, run this to create a new hat.

  $ maglev-ruby create_hat.rb

Next, run these in any order as many times as you wish.

  $ maglev-ruby add_rabbit_to_hat.rb
  $ maglev-ruby show_hat_contents.rb

To empty the hat and start over, run

  $ maglev-ruby create_hat.rb

== Running the Hat Trick from IRB

To recreate Avi's demo:

=== 1: Start the Magician, Show Empty Hat

In shell 1 (the magician's shell), start IRB:

  $ cd $MAGLEV_HOME/examples/hat_trick
  $ maglev-irb

Now we persistently load the Hat and Rabbit classes, and commit that code
to the repository.

    irb(main):001:0> load 'create_hat.rb'
    Created empty hat at Maglev::PERSISTENT_ROOT[:hat]:    #<Hat:0x8f18b901 @contents=[]>
    => true

We can take a quick peek at the hat, and see that it is empty:

    irb(main):002:0> Maglev::PERSISTENT_ROOT[:hat].contents
    => []

=== 2: Start the Assistant, Secretly put Rabbit in Hat

In shell 2 (the magician's assistent), start IRB:

  $ cd $MAGLEV_HOME/examples/hat_trick
  $ maglev-irb

At this point, assuming IRB was started *after* the magician committed the
Hat and Rabbit code, then the assistant should be able to see an empty hat
as well:

  irb(main):001:0> Maglev::PERSISTENT_ROOT[:hat].contents
  => []

Now, the assistant can put a Rabbit into the hat, and commit the change to
the repository:

  irb(main):002:0> Maglev::PERSISTENT_ROOT[:hat].put(Rabbit.new)
  => nil
  irb(main):003:0> Maglev.commit_transaction

=== 3: Magician Pulls Rabbit out of Hat

In shell 1, the Magician can now pull a rabbit out of the hat:

  irb(main):003:0> Maglev.abort_transaction
  => Maglev::System
  irb(main):004:0> Maglev::PERSISTENT_ROOT[:hat].contents
  => [
   () ()
  ( '.' )
  (")_(")
  ]

The magician does <tt>Maglev.abort_transaction</tt> to refresh his VM's
view of the repository (i.e., he wants to see the rabbit).  One of the ACID
properties (isolation), ensures that the state of a VM is isolated from
changes to the repository from other VMs (e.g., the assistant's VM adding a
rabbit).  The abort transaction freshens the view, and the magician can
pull the rabbit out of the hat.

In Avi's demo, he was using a pseudo version of IRB, which did an
<tt>abort_transaction</tt> before each prompt, so it looked a bit more
magical in the video...

== Things to notice

Each time you invoke maglev-ruby, you are starting a fresh VM, but it can
see the persistent effects from previous runs of other VMs.  One VM creates
an empty hat.  Then another VM adds a rabbit to the hat.  And finally,
another VM shows the contents of the results from the first two VMs.

If you notice, the object_id for the hat is the same throughout the demo
(until you create a new hat).  That is because one instance of a hat is
created and saved in the repository, and all VMs will see it.

  $ maglev-ruby create_hat.rb
  Created empty hat at Maglev::PERSISTENT_ROOT[:hat]:    #<Hat:0x12d13101 @contents=[]>

  $ maglev-ruby show_hat_contents.rb
  The hat contains 0 rabbits
  #<Hat:0x12d13101 @contents=[]>

  $ maglev-ruby add_rabbit_to_hat.rb

  $ maglev-ruby show_hat_contents.rb
  The hat contains 1 rabbits
  #<Hat:0x12d13101 @contents=[
   () ()
  ( '.' )
  (")_(")
  ]>

  $ maglev-ruby add_rabbit_to_hat.rb
  $ maglev-ruby add_rabbit_to_hat.rb
  $ maglev-ruby show_hat_contents.rb
  The hat contains 3 rabbits
  #<Hat:0x12d13101 @contents=[
   () ()
  ( '.' )
  (")_(")
  ,
   () ()
  ( '.' )
  (")_(")
  ,
   () ()
  ( '.' )
  (")_(")
  ]>
