= Notes on MagLev and Rails 3

The files in this directory allow you to run the default Rails app on
MagLev.  Currently, MagLev is able to serve static and (simple) dynamic
pages using a patched version of Rails 3.0.x.  The <tt>Rakefile</tt>
provides tasks to setup your MagLev environment with the correct gems,
including the (patched) Rails Gems.

== Quick Start

1. Make sure the MagLev repository is running:
     $ cd $MAGLEV_HOME
     $ rake maglev:start      # or: $MAGLEV_HOME/bin/maglev start

2. Install Rails, patch it and install other gems and set ENVIRONMENT:
     $ cd $MAGLEV_HOME/examples/rails
     $ rake init

3. Setup the Database.  MagLev currently supports MySQL 5, so:
   A. Ensure mysql is running

   B. Ensure <tt>myapp/config/database.yml</tt> is configured for your
      system (user, password, socket, etc.).  Rails 3 now defaults to the
      <tt>mysql2</tt> driver for MySQL.  MagLev only supports the older
      +mysql+ driver, so make sure <tt>database.yml</tt> and +Gemfile+
      specify +mysql+ and not <tt>mysql2</tt> for new projects.

   C. Create the db and run migrations
       $ cd $MAGLEV_HOME/examples/rails/myapp
       $ $MAGLEV_HOME/bin/rake db:create
       $ $MAGLEV_HOME/bin/rake db:migrate

4. Run the app:
     $ cd $MAGLEV_HOME/examples/rails/myapp
     $ $MAGLEV_HOME/bin/rails server
   Then hit http://localhost:3000/

== Rails on MagLev: Status

There is still a lot of work before Rails on MagLev is fully cooked.  You
should expect some spurious error messages and errors (especially in
logging) that do not affect page loading.  We fully expect there to be
other bugs as pages get more complex and as you add more gems and use other
features.

There are a few error messages that get printed, but you can safely ignore
them:
* <tt>error , near line 6, onig_new() status -121, invalid POSIX bracket
  type of (eval),</tt>, this is just rack-mount testing if Regexp supports
  certain character classes.  MagLev has an extra print of the error
  message that we'll suppress in a future release.
* <tt>binding for eval does not include CopyingBlockArgs yet</tt>
  MagLev does not yet support copying block args to a binding yet.  So far,
  these seem to be harmless.

=== Slow start up

There are a couple of pauses when starting rails and when loading the first
page.  The first pause is loading and compiling all the rails code:

  $ $MAGLEV_HOME/bin/rails server
  <long pause>
  [2010-06-24 12:54:37] INFO  WEBrick 1.3.1
  [2010-06-24 12:54:37] INFO  ruby 1.8.7 (2010-02-26) [x86_64-darwin]
  [2010-06-24 12:54:37] INFO  WEBrick::HTTPServer#start: pid=45167 port=3000

The second and third pauses occur when you hit the first static and first
dynamic page.  All of these pauses are due to MagLev parsing and compiling
Ruby code (we're working on a faster parser...).  Subsequent dynamic page
loads should be much quicker, as MagLev only has to compile the code once.
If you are running in development mode, you'll see a couple of files get
reloaded for every page, but that should disappear if you run in production
mode.

If you are interested in seeing the progress of file loads, use the
<tt>-MtraceLoad</tt> flag to <tt>maglev-ruby</tt> (you can set it on the
command line, or add it to the <tt>MAGLEV_OPTS</tt> environment variable).

== Changes to +myapp+

There are a few edits that need to be done to the standard Rails standard
app in order for it to run under MagLev.  Step 2 in the next section lists
the steps we took to create the +myapp+ directory, and are the steps you'll
need to take when modifying your own app to work with MagLev.

== Progress towards full Rails Lifecycle

The following steps are loosely based on the {Rails Blog
Tutorial}[http://guides.rails.info/getting_started.html]. We are using
these steps to drive forward on getting Rails working. Assuming you've
patched ActiveSupport as described below, and you apply the patch to the
generated app (as described in step 2), then everything up through step 9
should just work:

1. Install rails: <tt>maglev-gem install rails --pre</tt>
2. Create new rails app: <tt>$MAGLEV_HOME/bin/rails new blog</tt>
3. Run +bundle+: <tt>$MAGLEV_HOME/bin/bundle install</tt>
4. Create the database: <tt>$MAGLEV_HOME/bin/rake db:create</tt>
5. Start server: <tt>$MAGLEV_HOME/bin/rails server</tt>
6. Load a static page: http://localhost:3000/
7. Load a dynamic page: http://localhost:3000/rails/info/properties
8. Generate new controller: <tt>$MAGLEV_HOME/bin/rails generate controller
   home index</tt>
9. Running migrations: <tt>$MAGLEV_HOME/bin/rake db:migrate</tt>
10. Running the rails console: <tt>$MAGLEV_HOME/bin/rails console</tt>
    (untested)
11. Run application unit tests (untested)

Once the basic life-cycle works, we plan on getting the Rails Specs to
pass.

Detailed explanations of each step follow.

=== 1. Install rails

Rails installs from gems or bundler, but needs a couple of patches.
You can install and patch rails using the provided rake task:
  $ cd $MAGLEV_HOME/examples/rails
  $ rake init

Or, you can use Bundler to install them yourself.

1. Rake and Bundler are now pre-installed in MagLev, so you do not need to
   install the gems.

2. Use Bundler, and <tt>myapp/Gemfile.lock</tt>, to install the gems:
     $ cd $MAGLEV_HOME/examples/rails/myapp
     $ $MAGLEV_HOME/bin/bundle install
     Fetching source index for http://rubygems.org/
     Using rake (0.8.7)
     Installing abstract (1.0.0)
     Installing activesupport (3.0.0)
     Installing builder (2.1.2)
     Installing i18n (0.4.1)
     Installing activemodel (3.0.0)
     Installing erubis (2.6.6)
     Installing rack (1.2.1)
     Installing rack-mount (0.6.13)
     Installing rack-test (0.5.4)
     Installing tzinfo (0.3.23)
     Installing actionpack (3.0.0)
     Installing mime-types (1.16)
     Installing polyglot (0.3.1)
     Installing treetop (1.4.8)
     Installing mail (2.2.5)
     Installing actionmailer (3.0.0)
     Installing arel (1.0.1)
     Installing activerecord (3.0.0)
     Installing activeresource (3.0.0)
     Using bundler (1.0.0)
     Installing thor (0.14.0)
     Installing railties (3.0.0)
     Installing rails (3.0.0)
     Installing ruby-mysql (2.9.3)
     Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.

3. Patch activesupport:
     $ cd $MAGLEV_HOME/examples/rails
     $ rake patch:activesupport

=== 2. Create new rails app

1. Generate the application:
     $ $MAGLEV_HOME/bin/rails new myapp --database=mysql

2. Edit <tt>myapp/Gemfile</tt> to use <tt>ruby-mysql</tt> gem.  Change
     gem 'mysql2'
   to
     gem 'ruby-mysql', :require => 'mysql'

3. Edit <tt>myapp/config/database.yml</tt>
   A. Change <tt>mysql2</tt> to +mysql+.
   B. You may also need to add the +socket+ option to talk to your
      server, it it isn't listening on <tt>/tmp/mysql.sock</tt>, e.g.:
        socket: /opt/local/var/run/mysql5/mysqld.sock
   C. Change the +username+, +password+ and +database+ for your
      installation.

4. Edit <tt>myapp/config/boot.rb</tt> to work around {Trac
   757}[https://magtrac.gemstone.com/ticket/757]. See the track report for
   details on the workaround.
     $ cp $MAGLEV_HOME/examples/rails/patches/app_config_boot_Trac757.rb myapp/config/boot.rb

=== 3. Run +bundle+

Run:
  $ cd myapp
  $ $MAGLEV_HOME/bin/bundle install

=== 4. Create the database

Run:
  $ $MAGLEV_HOME/bin/rake db:create

You should now see your application databases defined in MySQL.

=== 5. Start server

You can start the server in a couple of ways.  The normal way to start a
rails server is:

  $ cd myapp
  $ $MAGLEV_HOME/bin/rails server

An alternate method is:

  $ cd myapp
  $ maglev-ruby script/rails server

=== 6. Load a static page

Static pages in the app load fine under MagLev: http://localhost:3000/

=== 7. Load a dynamic page

Simple dynamic pages work fine under MagLev: http://localhost:3000/rails/info/properties

=== 8. Generate new controllers and scaffolding

Run:
  $ $MAGLEV_HOME/bin/rails generate controller home index
and generate the expected files.

If you remove <tt>public/index.html</tt> and add <tt>root :to =>
"home#index"</tt> into <tt>config/routes.rb</tt>, you should be able to hit
http://localhost:3000/ and see <tt>home#index</tt>

You can also create scaffolding:
  $ $MAGLEV_HOME/bin/rails generate scaffold Post name:string title:string content:text

=== 9. Running a migrations

Assuming you've generated the scaffolding in the previous step, you can do:
  $ $MAGLEV_HOME/bin/rake db:migrate
which seems to work.

You should now be able to start the server and hit
http://localhost:3000/posts and start managing your blog.

=== 10. Running the rails console: untested

Running <tt>$MAGLEV_HOME/bin/rails console</tt> is untested.

=== 11. Running the tests: untested

Running the application's unit tests has not yet been tested.

== Patch Details

The following patches are applied:
1. Patch changes the manner in which all subclasses are found.  MagLev
   does not support <tt>ObjectSpace#each_object</tt> (since objects may be
   persisted, there can be hundres of millions of them...).  This patch allows
   finding all subclasses currently loaded in a VM.  The ActiveSupport file
   already has patches for Rubinius and JRuby.  We expect to submit this patch
   to Rails.
2. There is a patch to workaround https://magtrac.gemstone.com/ticket/757.

