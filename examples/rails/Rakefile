task :default => :app

PATCH_DIR = File.join(File.dirname(__FILE__), "patches")

desc "Do one-time install of gems and patch rails gems"
task :init => [:'gem:gems', :'gem:rails', :'patch:activesupport']

desc "Run myapp, with maglev."
task :app do
  cd('myapp') do
    # MagLev needs the -MallIvsDynamic flag to run Rails.
    # Setting the MAGLEV_OPTS environment variable ensures the option
    # is passed from the rails script onto maglev-ruby.
    ENV['MAGLEV_OPTS'] = "-MallIvsDynamic"
    sh "#{ENV['MAGLEV_HOME']}/bin/rails server"
  end
end

# The tasks in this namespace manage the Rails 3 Beta 4 gems, and the other
# gems needed to run rails.  They only manage gems for MagLev installed in
# $MAGLEV_HOME.  The tasks in this namespace need only be run once.

namespace :gem do
  desc "Ensure the required non-Rails gems are installed into MagLev."
  task :gems do
    gems = "rack tzinfo i18n rack-mount erubis mail ruby-mysql"
    sh %{ maglev-gem install --no-ri --no-rdoc #{gems} }
  end

  desc "Install rails 3.0.0 gems into MagLev (will need patches)"
  task :rails do
    sh %{ maglev-gem install rails --version 3.0.0 --no-ri --no-rdoc }
  end
end

namespace :patch do
  desc "patch appname/config/boot.rb for trac757"
  task :app, :appname do |t,args|
    app = args[:appname]
    raise "Can't find application: #{app.inspect}" if app.nil? || ! File.exist?(app)
    patch = File.join(PATCH_DIR, "app_config_boot_Trac757.rb")
    cp patch, File.join(app, "config", "boot.rb")
  end

  desc "Patch ActiveSupport 3.0.0 gem."
  task :activesupport do
    patch_info = {
      "activesupport-3.0.0" => ['activesupport_class_patch.diff',
                                'activesupport_time_zone_patch.diff']
    }
    apply_patches(patch_info)
  end
end

# Apply several patches to a versioned gem
# the patch_info is a hash: { 'activesupport-3.0.0.beta4' => ['patch1.diff', 'patch2.diff'],
#                             ...}
def apply_patches(patch_info)
  patch_info.each do |gem_version, patches|
    patch_dir = "#{ENV['MAGLEV_HOME']}/lib/maglev/gems/1.8/gems/#{gem_version}"
    if File.directory? patch_dir
      puts "Patching #{patch_dir}"
      patches.each do |patch|
        apply_patch(patch_dir, patch)
      end
    else
      puts "Skipping #{patch_dir} (does not exist)"
    end
  end
end

# Apply one patch
def apply_patch(patch_dir, patch_file)
  if File.directory? patch_dir
    puts "Applying patch #{patch_file} in #{patch_dir}"
    cd(patch_dir) do
      patch_path = File.join(PATCH_DIR, patch_file)
      sh %{ patch -p2 < #{patch_path} }
    end
  end
end
