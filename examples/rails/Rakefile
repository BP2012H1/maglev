task :default => :app

PATCH_DIR = File.join(File.dirname(__FILE__), "patches")
MAGLEV_HOME = ENV['MAGLEV_HOME']

namespace :patch do
  desc "Patch ActiveSupport 3.0.0 gem."
  task :activesupport do
    patch_info = {
      "activesupport-3.0.0" => ['activesupport_class_patch.diff',
                                'activesupport_time_zone_patch.diff',
                                'activesupport_descendents_tracker_patch.diff'],
      "activesupport-3.0.3" => ['activesupport_class_patch.diff',
                                'activesupport_time_zone_patch.diff',
                                'activesupport_descendents_tracker_patch.diff'],
      "activesupport-3.0.4" => ['activesupport_class_patch.diff',
                                'activesupport_time_zone_patch.diff',
                                'activesupport_descendents_tracker_patch.diff'],
      "activesupport-3.1.0" => ['activesupport_time_patch-3.1.diff'],
      "activesupport-3.1.1" => ['activesupport_time_patch-3.1.diff']      
    }
    apply_patches(patch_info)
  end
end

# Apply several patches to a versioned gem
# the patch_info is a hash: { 'activesupport-3.0.0.beta4' => ['patch1.diff', 'patch2.diff'],
#                             ...}
def apply_patches(patch_info)
  patch_info.each do |gem_version, patches|
    patch_dir = "#{MAGLEV_HOME}/lib/maglev/gems/1.8/gems/#{gem_version}"
    if File.directory? patch_dir
      puts "Patching #{patch_dir}"
      patches.each do |patch|
        apply_patch(patch_dir, patch)
      end
    else
      puts "Skipping #{patch_dir} (does not exist)"
    end
  end
end

# Apply one patch
def apply_patch(patch_dir, patch_file)
  if File.directory? patch_dir
    puts "Applying patch #{patch_file} in #{patch_dir}"
    cd(patch_dir) do
      patch_path = File.join(PATCH_DIR, patch_file)
      sh %{ patch -p1 < #{patch_path} }
    end
  end
end
