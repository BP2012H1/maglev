= Simple Sinatra Blog App for MagLev

This directory contains a simple blog app for Sinatra.  The blog uses
MagLev for persistence.  It also integrates with the
<tt>../object_inspector</tt> app to show some debug capabilities.

=== Prerequisites

In order to run the applications in this directory, you need to install
rubygem versions of rack and sinatra (see ../README.rdoc).

=== To Run the combined apps:

    $ rake blog

Then hit http://localhost:4444/

=== Details

The app is split into a persistent part, <tt>blog.rb</tt>, and the sinatra
driver app, <tt>blog_app.rb</tt>.  The blog code, <tt>blog.rb</tt>, needs
to be persistently loaded once.  This is handled by rake and the
<tt>commit_code.rb</tt> file:

  $ rake commit

To run the Sinatra app,

  $ rake blog

=== Files

* README.rdoc This file
* Rakefile    The Rakefile
* blog.rb     The persistent, business classes for the app.  This code is run once only.
* blog_app.rb The Sinatra app
* commit_code.rb  Code to commit the business logic code to the MagLev repository
* config.ru   Rackup file to run both the blog and objectlog apps.
* dumpdb.rb   Script that prints the contents of the db to stdout (debugging)
* objectlog.ru  Rackup file to run just the objectlog
* objectlog_app.rb  The object log app
* public            Web root for the running apps
* test        Some MiniTest tests for the business logic
* txn_wrapper.rb Rack middleware used by <tt>blog_app.rb</tt> to wrap a
  transaction around each HTTP request.
* views       Sinatra view directory

=== Issues

* Need better separation of model helpers and business objects.  Some of
  the lightweight Ruby ORM solutions (DataMapper, Sequel) provide nice
  features needed by any app.  We need some help here.

=== TODO

TODO for the sinatra app

* Get persistence of sinatra and rack working (autoload persistence)
* Try using shotgun for dev time file reloading (or Rack::Reloader)
* Separate the MaglevModel and work on it
* Get a migration for seeding basic data working
* Get partials implmented (rendering urls for tags and posts)
* Add an "about" page that explains the app etc.

=== Discussion

In the first iteration of the blog app, Posts had an id field.  This is
legacy thinking from SQL...the reason blog posts have an id attribute is to
facilitate finding them in the DB.  But objects are already unique and have
a system managed __id__.  But there is a deeper problem with managing an id
field: How do you coordinate the id across multiple threads/VMs?  The
original code looked like:

    class Post
      def self.new(params)
        p = allocate
        p.initialize(new_id, params)
        add(p)
        p
      end

      def self.new_id
        # This is a concurrency conflict waiting to happen....
        Maglev.persistent { @id += 1 }
      end

      ...

    end

Since there is only one instance of the Post class in the repository, if
two VMs try to update the class instance variable <tt>@id</tt>, one will
commit first, and the other will have to deal with a failed commit.  But
each VM has unique  post objects with different <tt>__id__</tt>'s (because
the VM does do the hard work of ensuring globally unique ids for objects.

=== Credits

The layout is http://css4free.com/wp-content/uploads/templates/zineprint/
