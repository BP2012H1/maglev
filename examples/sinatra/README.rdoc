= MagLev Sinatra Examples

The files in this directory are some examples of using Sinatra with MagLev.
You must first install the Sinatra and Rack gems:

  $ maglev-gem install sinatra rack

If you want to run the tests, you'll also need RackTest:

  $ maglev-gem install rack-test

== Simple Examples

=== Hello

<tt>sinatra_hello.rb</tt> is a Sinatra app that runs several of the example
features from the {Sinatra Book}[http://www.sinatrarb.com/book.html].  To run
it:

  $ rake hello

Then hit http://localhost:4567/

=== Sinatra App and Test

<tt>sinatra_app.rb</tt> and <tt>sinatra_app_test.rb</tt> are simple hello
world app and an associated MiniTest for it that shows how
<tt>rack/test</tt> works with MagLev.  To Run the test case, you'll need
the <tt>sinatra</tt>, <tt>rack</tt>, <tt>rack-test</tt> and
<tt>minitest</tt> gems installed into MagLev.

To run the tests:

  $ rake test

To run the app:

  $ rake app
  
== Other Examples

The sub-directories contain more involved sample applications:

- <tt>maglev_sessions</tt> contains an example of using MagLev to store
  HTTP session data. 
- <tt>simple_blog</tt> contains a simple blog using MagLev persistence for
  the posts. 
- <tt>object_inspector</tt> implements a web front end to the MagLev
  ObjectLog (used for debugging, and by the simple blog app).

== Issues with Sinatra under MagLev

=== How it is supposed to work

One of the standard ways to run a Sinatra app is to write it in one file:

  # my_sinatra_app.rb

  require 'rubygems'
  require 'sinatra'

  get '/' do
    "Sinatra #{Sinatra::VERSION} says Hello"
  end

and then run it:

  $ maglev-ruby my_sinatra_app.rb

The <tt>require 'sinatra'</tt> reads the Sinatra code, which has the side
effect of setting up an <tt>at_exit</tt> handler that will invoke your
application.  Ruby then continues to read the file, and finally falls off
the bottom.  At that point, the previously installed <tt>at_exit</tt>
handler is invoked, which starts the application running.

=== Issue 1: Sinatra can't figure out the right file

Sinatra examines the calling stack to try and figure out the name of the
file that was invoked (from the <tt>at_exit</tt> handler, so
<tt>\_\_FILE\_\_</tt> is not available).  Currently, the MagLev format from
<tt>Kernel#caller</tt> confuses Sinatra and it can't figure out which file
is the main file, and so the app does not start.

There are two workarounds for this.  The first is to put <tt>set :run,
true</tt> in your app (see <tt>sinatra_app.rb</tt> for an example).  The
second method, is to use +rackup+, or some other means to start the
application.  The Sinatra application in <tt>simple_blog</tt> is an example
of this approach.

=== Issue 2: Persisted version of Sinatra

If you choose to persist the Sinatra code into MagLev, e.g., by running the
following:

  $ rake xperimental:commit

and then try to invoke your app via the <tt>at_exit</tt> handler, it won't
work, even if you've done <tt>set :run, true</tt>.  This is because the
exit handler was setup in the VM that persistently read the Sinatra code,
and was executed, to no effect, in that VM when it exited.  When you invoke
<tt>maglev-ruby my_sinatra_app.rb</tt>, the new VM will evaluate
<tt>require 'sinatra'</tt>, but since it has already been persistently read
(<tt>$LOADED_FEATURES</tt> is persistently updated as well), the Sinatra
files are no longer read, and the exit handler is not setup in the current
VM.  You'll have to use one of the other options to run MagLev (see
<tt>simple_blog</tt> for an example using <tt>rackup</tt>).
