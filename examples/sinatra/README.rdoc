== MagLev Sinatra Examples

The files in this directory are some examples of using Sinatra with MagLev.
You must first install the sinatra gem:

  $ maglev-gem install sinatra

=== Issues with Sinatra under MagLev

==== How it is supposed to work

One of the standard ways to run a sinatra app is to write it in one file:

    # my_sinatra_app.rb

    require 'rubygems'
    require 'sinatra'

    get '/' do
      "Sinatra #{Sinatra::VERSION} says Hello"
    end

and then invoke it like:

    $ maglev-ruby my_sinatra_app.rb

The <tt>require 'sinatra'</tt> reads the Sinatra code, which has the side
effect of setting up an <tt>at_exit</tt> handler that will invoke your
application.  Ruby then continues to read the file, and finally falls off
the bottom.  At that point, the previously installed <tt>at_exit</tt>
handler is invoked, which starts the application running.

==== Issue 1: Sinatra can't figure out the right file

Sinatra examines the calling stack to try and figure out the name of the
file that was invoked (from the <tt>at_exit</tt> handler, so
<tt>\_\_FILE\_\_</tt> is not available).  Currently, the MagLev format from
<tt>Kernel#caller</tt> confuses Sinatra and it can't figure out which file
is the main file, and so the app does not start.

There are two workarounds for this.  The first is to put <tt>set :run,
true</tt> in your app (see <tt>sinatra_app.rb</tt> for an example).  The
second method, is to use +rackup+, or some other means to start the
application.  The Sinatra application in <tt>simple_blog</tt> is an example
of this approach.

==== Issue 2: Persisted version of Sinatra

If you choose to persist the Sinatra code into MagLev, e.g., by running the
following:

    Maglev.persistent do
      require 'rubygems'
      require 'sinatra'
    end
    Maglev.commit_transaction

and then try to invoke your app via the <tt>at_exit</tt> handler, it won't
work, even if you've done <tt>set :run, true</tt>.  This is because the
exit handler was setup in the VM that persistently read the sinatra code,
and was executed (to no effect) in that VM when it exited.  When you invoke
<tt>maglev-ruby my_sinatra_app.rb</tt>, the new VM will evaluate
<tt>require 'sinatra'</tt>, but since it has already been persistently read
(<tt>$LOADED_FEATURES</tt> is persistently updated as well), the sinatra
files are no longer read, and the exit handler is not setup in the current
VM.  You'll have to use one of the other options to run MagLev (see
<tt>simple_blog</tt> for an example using <tt>rackup</tt>).

=== <tt>sinatratest.rb</tt>: App to test basic Sinatra Features

This app has several links that test various features of Sinatra.  To run:

    $ cd $MAGLEV_HOME/examples/sinatra
    $ maglev-ruby sinatratest.rb

Then hit http://localhost:4567/

=== <tt>sinatra_app.rb</tt>: Run Sinatra from RubyGems

Another simple app.  This one also has a test case using MiniTest and
<tt>Rack::Test</tt> (based on http://www.sinatrarb.com/testing.html).


To Run the test case, you'll need the sinatra, rack and minitest gems
installed into MagLev, then:

    $ maglev-ruby sinatra_app_test.rb
    Loaded suite sinatra_app_test
    Started
    .
    Finished in 0.122495 seconds.

    1 tests, 2 assertions, 0 failures, 0 errors, 0 skips

=== <tt>msessions.rb</tt>: App with MagLev persistence for sessions

This app uses rack Middleware to install a MagLev <tt>Rack::Session</tt>
backing store for MagLev.  When run, the session data is persisted to
MagLev (rather than memcached etc.).

