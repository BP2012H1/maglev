= WebTools

This demo runs a very simple web application that allows you to browse the
Ruby and Smalltalk code in the VM, and to examine statistics of various
processes connected to a repository.


To run:

1. Install necessary gems:

     $ bundle install

2. Run:

     $ rake

== Metaprogramming Variation

If you'd like to examine code generated by Meta-programming, then commit
the code:

  $ rake meta

And re-run the demo:

  $ rake

Look at the class AValidPerson and compare it with the source
(lib/webtools/meta_demo.rb).  Some things to note:

1. You get to see all of the methods written by metaprogramming.
2. You can see the file and line number of the code that generated each
   method (makes it nice to track down which part of ActiveWhatever is
   messing with your code).


= The Smalltalk Version of this Demo

The code for this example was inspired by the Smalltalk example found in
$MAGLEV_HOME/gemstone/examples/www.  The smalltalk example code can be
invoked from ruby (a demonstration of how to invoke Smalltalk from Ruby),
via:

  $ rake smalltalk:run

Then browse to http://localhost:8080/

Hit Ctl-C in the terminal window to stop.

== Things that make life difficult

MagLev and GemStone/S have a couple of incompatibilities. Since this demo depends on both,
you may need some extra preparation before running it.

=== Location of the locks directory

GemStone expects locks to be in /opt/gemstone/locks. You will need sudo privilege to create
this directory. There is a script that will do this for you. You need to run it every time
$MAGLEV_HOME is changed.

   $ maglev stop    # if maglev is currently running
   $ $MAGLEV_HOME/setupLocks.sh
   $ maglev start   # before running the demo

=== Can't modify $GEMSTONE environment variable while MagLev is running

Some Rake scripts may modify the $GEMSTONE environment variable. You
can't do this if you are running $MAGLEV_HOME/bin/rake. You can try running
/usr/bin/rake instead, or

  mv $MAGLEV_HOME/bin/rake $MAGLEV_HOME/bin/maglev-rake


