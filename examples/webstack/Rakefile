require 'rake/testtask'
require 'rake/clean'
require 'rakelib/utils'

CLEAN.include('log/scgi-*.out', 'log/rack-*.pid')
CLOBBER.include('log', 'scgi_temp')

task :default => :'maglev:magtag'

MAGLEV_HOME = ENV['MAGLEV_HOME']
MBIN        = MAGLEV_HOME + '/bin'
RACKUP_OPTS = "-Ilib --env production"

Rake::TestTask.new do |t|
  t.libs << "lib"
  t.libs << "test"
  t.test_files = FileList['test/magtag/test_user.rb',
                          'test/magtag/test_tweet.rb',
                          'test/test_magtag_app.rb',]
  #  t.test_files = FileList['test/test_user.rb']
  t.ruby_opts << '-rubygems'
  # t.verbose = true
end

directory 'log'

namespace :maglev do
  desc "Run the MagTag Web App"
  task :magtag do
    bail_if_rvm_hosing_environment
    sh "#{MBIN}/rackup #{RACKUP_OPTS} --port 3333 config/no_txn_wrapper.ru"
  end


  desc "Commit the code for the models to MagLev"
  task :commit do
    bail_if_rvm_hosing_environment
    sh "maglev-ruby -Mcommit lib/magtag/user.rb "
    sh "maglev-ruby -Mcommit lib/magtag/tweet.rb"
  end

end

namespace :mri do
  desc "Run the MagTag Web App"
  task :magtag do
    sh "rackup #{RACKUP_OPTS} --port 3333 config/no_txn_wrapper.ru"
  end
end

namespace :kill do
  desc "kill:vms and kill:httpd"
  task :all => ['kill:vms', 'kill:httpd']

  desc "kill Ruby VMs listening on ports 3000-3003"
  task :vms, :signal do |t, args|
    args.with_defaults :signal => 'TERM'
    kill_ports 3000, 4, args[:signal]
  end

  desc "kill httpd on port 3333"
  task :httpd, :signal do |t, args|
    args.with_defaults :signal => 'TERM'
    kill_ports 3333, 1, args[:signal]
  end

  def kill_ports(start=3000, count=4, signal='TERM')
    pids = pids_on_ports(start, count).join(' ')
    if pids.empty?
      puts "No pids found on ports #{start} - #{start + count - 1}"
    else
      sh "kill -s #{signal} #{pids}"
      sh "kill -s CONT #{pids}"
    end
  end
end

# Tasks to manage the MagLev/MRI web-app VMs forked by fcgi, scgi, etc.
desc "List pids of Ruby server VMs connected on sockets 3000-3003"
task :pids do
  sh "lsof -P -i tcp:3000-3004" do |ok, res|
    unless res.exitstatus == 1  # 1 means no pids found, i.e., OK!
      puts "Error: ok #{ok}  res #{res}  res.exitstatus #{res.exitstatus}"
    end
  end
end


