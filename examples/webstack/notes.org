* Notes
  GitHub on Unicorn:  https://github.com/blog/517-unicorn
** Features to implement
   + Should we add an ontology?  Give meaning to the tags (rdf)?
   + Update model to use ActiveModel validation checks
     (validate_presence_of :password, :username) etc.
   + Add
*** TODO Threading architecture for MagLev
    + Given we only want one txn going at a time, we need to grab a lock
      (in txn wrapper?).  But, we can allow many readers?

*** TODO Allow anyone to look at a user's tweets (user's home)
*** TODO Implement mentions queue for each user
*** TODO Add tagging features
*** TODO Create MRI/ORM version
*** TODO Add handling of '/'
*** Transaction Model

    Should we try running the vm in manual transaction mode, and then begin
    have the txn wrapper do:

      def call(env)
        Maglev.begin_transaction
        r = @app.call(env)
      ensure
        if committable?(r[0])
          Maglev.commit_transaction
        else
          Maglev.abort_transaction
        end
      end

    That way, we are not in a transaction unless we are handling an HTTP
    request.

    We would need to:
    + Expose System>>transactionMode:, System>>transactionMode and add a
      few constants.
    + Write wrapper methods in maglev module
    + Add the new manual_txn_wrapper class in site_ruby
    + Add a command line parameter to control initial txn mode.
** Order of Investigation

   The plan is to first investigate, debug and document how to run MagLev
   in a variety of Web-Stacks.  Then do a MagLev-MagLev performance
   comparison of the various options.  We will re-visit this section after
   C-Extensions are implemented, and augment with some of the C-extension
   based web stacks.

   The next level of comparison is to compare MagLev against MRI/YARV and
   see how the various implementations compare.  This will be with a
   "neutral" web application (one that doesn't play to either MagLev or
   MRI's strengths/weaknesses).

   Finally, we'd like to look at some web applications (e.g., social
   graphs) that we expect do play to MagLev's strengths.

** ActiveRecord

   Many of the efficiencies that the MySQL paper lists, won't be available
   for ActiveRecord, since ActiveRecord uses surrogate keys (id column)
   rather than, e.g.,:

      CREATE TABLE Tag2Post (
        tag_id ...
        post_id ...
        , PRIMARY KEY pk_Tag2Post (tag_id, post_id)
        , INDEX (post_id)
      ) ENGINE=InnoDB;
** Typical Ruby Web App Demands/Performance

   In the unsubstantiated rumors department:

   >  An example taken from a common action on one of my production apps:
   >
   >  View 11.4ms
   >  Controller 5.7ms
   >  ActiveRecord 25.9ms
   >
   >  That 25.9 ms could definitely be better spent serving other
   >  requests...

   And

   > The other thing to keep in mind is that at least 90 to 95% of the
   > Rails apps out there donâ€™t get more than a dozen requests/second (a
   > million requests/day). You can scale that kind of load pretty easily
   > using simple approaches

** Tests and results
*** Test Plan
    1. Get lighttpd/scgi working and take establish baselines
       + WEBrick baseline
       + lighttpd/scgi baseline
    2. Get nginx/http working and take baselines
       + nginx/htttp/webrick base line
    3. Get lighttpd/http working
       + lighttpd/http baseline
    4. Try fcgi and either nginx
       + nginx/fcgi baseline
    5. Wait for C-extensions then get thin working
    6. Try to figure out time for transactions, etc.
*** Results
    + Tests are run in production mode.  To do this
      1. pass "--env production" to rackup (prevents rack from adding
         extraneous middleware, like lint etc.)
      2. "set :environment, :production" in config.ru tells sinatra to only
         install necessary middleware.
      In general, we'll be running with: content_length and cookie
      middleware.
    + No debug output to tty
    + All test runs start off with a "GET /info" so we can document the ruby
      environment, date and the installed middleware.  Then we run the
      test.
    + TODO: Can we show the sinatra options?
    + TODO: Can we rely on front-end httpd logging instead of common logger?
    + TODO: Make sure all debug etc. are off for running the performance
      tests.

    It might be nice to see how much caching can reduce load on server
    (e.g., rails caching, Rack-cache, varnish etc.).

    Nice to compare performance of MRI + EventMachine vs MagLev +
    GreenThreads to see what the difference is.  The hypothesis is that the
    GemStone/S Green Thread is very much like EventMachine reactor. (but we
    still have the transaction limitation...).

**** TIME_WAIT problem
***** Description
      It became quickly apparent that I was running into a TIME_WAIT
      problem.  I'd get to around 8,000 requests, and then pause for about
      ten seconds (both mri and maglev).  Looking at netstat showed:

        $ netstat -finet -n | grep TIME_WAIT | wc
        16346   98076 1258642

      So, 16k sockets waiting, and system waiting before it passes out
      another socket...

      For every connection from +ab+, there are two sockets

      |---+----------+----------+----------+----------|
      | # | Client   | Protocol | Socket   | Server   |
      |---+----------+----------+----------+----------|
      | 1 | ab       | HTTP     | TCP:3333 | lighttpd |
      | 2 | lighttpd | SCGI     | TCP:3000 | Ruby     |
      |---+----------+----------+----------+----------|

***** Solutions?

      1: Use one socket? In the SCGI protocol, the server indicates the end
         of a response by closing the connection, so, there is not much hope
         of keeping one connection per SCGI server...
      2: Use Unix domain sockets (if on same machine)?  Can we configure
         lighttpd and SCGI module?

      3: Play with SO_LINGER ?

      Could go to FCGI, since it allows multiple requests per socket as an
      option.

**** Test 5: nginx reverse proxy to MagLev + WEBrick

     This test tries to see what overhead reverse proxying via nginx + HTTP
     adds.  This is preliminary, in that we expect the C-Extension
     implementation will allow us to use a faster HTTP processor in the
     MagLev instance.  This really only shows the overhead of having
     another nginx in the mix.

     Test was to get the maglev.css file from the MagLev instance (not
     staticly served from nginx).  I compared with ab going through nginx,
     and then going directly to the backend MagLev instance.

       $ ab -n 5000 -c 10 http://127.0.0.1:3333/app/magtag.css
       $ ab -n 5000 -c 10 http://127.0.0.1:3000/app/magtag.css

     I then configured four back-end MagLev instances and ran with one
     nginx fronting them.

     | Configuration                  | Req/sec | Time/req (ms) |
     |--------------------------------+---------+---------------|
     | MagLev + WEBrick               |     440 |          22.7 |
     | nginx + MagLev + WEBrick       |     390 |          25.6 |
     | nginx + 4 x (MagLev + WEBrick) |         |               |

**** Test 4: Locking vs Non-Locking transaction wrapper (no contention)
     This test attempts to characterize how much overhead is there in
     wrapping each HTTP request in a transaction AND grabbing a VM lock.
     The idea is that we want to ensure there is only one thread potentially
     modifying persistent data at a time.  This particular run shows only
     the overhead of getting the lock and releasing it, as it is a
     read-only, static file request.

     | Wrapper                 | Req/sec | Time/req (ms) |
     |-------------------------+---------+---------------|
     | Non-Locking txn wrapper |     848 |          11.8 |
     | Locking txn wrapper     |     803 |          12.4 |
     |-------------------------+---------+---------------|
     | Diff                    |      45 |          -0.6 |
     | %                       |      5% |            5% |

     There is a 5% overhead for grabbing and releasing a lock.

     Test run with lighttpd and SCGI

**** Test 3: Load static file with lighttpd + scgi + 1 maglev VM
     In this configuration, lighttpd is passing all requests (even for
     static files) to MagLev via SCGI.  There is one maglev VM running

     There is a problem at slightly over 8k requests (8192?) with both
     MagLev and MRI 1.8.7.  I sometimes get a long (~11 sec) delay and then
     it starts going again, or I get:

       $ ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
       This is ApacheBench, Version 2.3 <$Revision: 655654 $>
       Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
       Licensed to The Apache Software Foundation, http://www.apache.org/

       Benchmarking 127.0.0.1 (be patient)
       Completed 1000 requests
       Completed 2000 requests
       Completed 3000 requests
       Completed 4000 requests
       Completed 5000 requests
       Completed 6000 requests
       Completed 7000 requests
       Completed 8000 requests
       apr_poll: The timeout specified has expired (70007)
       Total of 8183 requests completed
       [@cairo webstack (webstack)]$

     With MRI 1.8.7, I can't run ab at concurrency level 10, but 4 seems to
     work, and I also see the ~8k slow down for about 11 seconds.

     With MRI 1.9.2, I see the 11 second pause and I got the error:
       ...
       Completed 7000 requests
       Completed 8000 requests
       apr_poll: The timeout specified has expired (70007)
       Total of 8175 requests completed

***** TODO Update to latest lighttpd and see if problem remains
***** TODO See if problem is on linux, or only OSX
***** TODO look at networking stats while doing run and see if anything amiss

***** Results
      | Ruby             | Req/Sec (mean) | Time/Req (ms) |
      | Maglev  (no txn) |        1024.07 |         9.765 |
      | MRI 1.8.7        |                |               |

****** Maglev
$ curl http://localhost:3333/info ; ab -n 5000 -c 10 http://127.0.0.1:3333/magtag.css
===== get /info ======================
RUBY_ENGINE  maglev
Ruby         1.8.7
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         Wed Oct 06 11:00:11 -0700 2010

========== Middleware ================
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:863:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/chunked.rb:15:in `call'
======================================
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 500 requests
Completed 1000 requests
Completed 1500 requests
Completed 2000 requests
Completed 2500 requests
Completed 3000 requests
Completed 3500 requests
Completed 4000 requests
Completed 4500 requests
Completed 5000 requests
Finished 5000 requests


Server Software:        lighttpd/1.4.26
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   4.882 seconds
Complete requests:      5000
Failed requests:        0
Write errors:           0
Total transferred:      1375000 bytes
HTML transferred:       110000 bytes
Requests per second:    1024.07 [#/sec] (mean)
Time per request:       9.765 [ms] (mean)
Time per request:       0.976 [ms] (mean, across all concurrent requests)
Transfer rate:          275.02 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       2
Processing:     3   10   6.5      9     146
Waiting:        3   10   6.5      9     146
Total:          3   10   6.5      9     146

Percentage of the requests served within a certain time (ms)
  50%      9
  66%     10
  75%     10
  80%     10
  90%     11
  95%     12
  98%     14
  99%     16
 100%    146 (longest request)

**** Test 2: Measure the overhead of a transaction per request
     This test was only done on Maglev, as it is the only one with built-in
     transactions.  The setup is similar to Test 1, but we are comparing no
     middleware to one that does a <tt>Maglev.abort_transaction</tt> at the
     beginning of each HTTP request, and does a
     <tt>Maglev.commit_transaction</tt> at the end of each successful HTTP
     request.  This is done via rack middleware:

       class TransactionWrapper
         def initialize(app)
           @app = app
         end

         def call(env)
           begin
             Maglev.abort_transaction
             r = @app.call env
           ensure
             Maglev.commit_transaction if committable? r[0]
           end
         end

         def committable?(status)
           ! status.nil? &&  (200..399).include?(status)
         end
       end

       | Without transactions | 547.64 | 18.260 |
       | With transactions    | 494.56 | 20.220 |
       | Difference           |  53.08 |  -1.96 |

       Looks like transaction overhead (with no data to commit!) take about
       2ms, or about 11% penalty over no transactions.

***** Results w/o transaction wrapper
curl http://localhost:3333/info
===== get /info ======================
RUBY_ENGINE  maglev
Ruby         1.8.7
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         Tue Oct 05 16:15:36 -0700 2010

========== Middleware ================
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:863:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
======================================
ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        WEBrick/1.3.1
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   18.260 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      2850000 bytes
HTML transferred:       220000 bytes
Requests per second:    547.64 [#/sec] (mean)
Time per request:       18.260 [ms] (mean)
Time per request:       1.826 [ms] (mean, across all concurrent requests)
Transfer rate:          152.42 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.1      0       5
Processing:     7   18   4.2     18     141
Waiting:        6   18   4.2     17     141
Total:          7   18   4.2     18     141

Percentage of the requests served within a certain time (ms)
  50%     18
  66%     18
  75%     19
  80%     19
  90%     20
  95%     21
  98%     23
  99%     24
 100%    141 (longest request)

***** Results with transaction wrapper
curl http://localhost:3333/info
===== get /info ======================
RUBY_ENGINE  maglev
Ruby         1.8.7
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         Tue Oct 05 16:12:40 -0700 2010

========== Middleware ================
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:863:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/ruby/site_ruby/1.8/maglev/rack_txn_wrapper.rb:34:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/ruby/site_ruby/1.8/maglev/rack_txn_wrapper.rb:35:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
======================================
ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        WEBrick/1.3.1
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   20.220 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      2850000 bytes
HTML transferred:       220000 bytes
Requests per second:    494.56 [#/sec] (mean)
Time per request:       20.220 [ms] (mean)
Time per request:       2.022 [ms] (mean, across all concurrent requests)
Transfer rate:          137.65 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.3      0      11
Processing:     5   20   4.6     19     143
Waiting:        5   20   4.6     19     142
Total:          6   20   4.7     19     143

Percentage of the requests served within a certain time (ms)
  50%     19
  66%     20
  75%     21
  80%     21
  90%     22
  95%     23
  98%     26
  99%     30
 100%    143 (longest request)

**** Test 1: Measure overhead of a rack middleware
     Install an empty Rack middleware app that does nothing.  The intent is
     to distinguish the overhead of the transaction processing vs the rack
     overhead when using the transaction wrapper middleware.

     + The file we loaded was the following 22 characters: /* Empty MagTag.css */

***** Results

      Basically, the overhead of the following rack app is "negligible"
      (less than a quarter of a millisecond, or around 0.5% of an average
      request).

        class EmptyMiddleware
          def initialize(app)
            @app = app
          end

          def call(env)
            @app.call env
          end
        end

      |-------------+-----------+---------+---------+-----------|
      | Middleware  | Ruby      | HTTPd   | req/sec |  mean req |
      |             |           |         |  (mean) | time (ms) |
      |-------------+-----------+---------+---------+-----------|
      | No mid-ware | Maglev    | WEBrick |  543.91 |    18.385 |
      | Empty       | Maglev    | WEBrick |  547.06 |    18.280 |
      |-------------+-----------+---------+---------+-----------|
      | Diff        |           |         |         |           |
      |-------------+-----------+---------+---------+-----------|
      |-------------+-----------+---------+---------+-----------|
      | No mid-ware | MRI 1.8.7 | WEBrick |  399.99 |    25.001 |
      | Empty       | MRI 1.8.7 | WEBrick |  396.57 |    25.216 |
      |-------------+-----------+---------+---------+-----------|
      | Diff        |           |         |         |           |
      |-------------+-----------+---------+---------+-----------|
      |-------------+-----------+---------+---------+-----------|
      | No mid-ware | MRI 1.9.2 | WEBrick |  388.17 |    25.762 |
      | Empty       | MRI 1.9.2 | WEBrick |  389.38 |    25.682 |
      |-------------+-----------+---------+---------+-----------|
      | Diff        |           |         |         |           |

      The MagLev run with the middleware was actually faster than without
      the middleware (by about 2.5%, or so).  Let's assume that is in the
      noise.  It is .8ms faster with the middleware

      1.9.2 is slower!!?? than 1.8.7 ?

***** Maglev Results
****** No middleware

curl http://localhost:3333/info
===== get /info ======================
RUBY_ENGINE  maglev
Ruby         1.8.7
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         Tue Oct 05 15:52:57 -0700 2010

========== Middleware ================
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:863:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
======================================
ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        WEBrick/1.3.1
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   18.385 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      2850000 bytes
HTML transferred:       220000 bytes
Requests per second:    543.91 [#/sec] (mean)
Time per request:       18.385 [ms] (mean)
Time per request:       1.839 [ms] (mean, across all concurrent requests)
Transfer rate:          151.38 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.3      0      22
Processing:     6   18   4.6     18     142
Waiting:        6   18   4.6     17     142
Total:          9   18   4.6     18     142

Percentage of the requests served within a certain time (ms)
  50%     18
  66%     18
  75%     19
  80%     19
  90%     20
  95%     21
  98%     23
  99%     27
 100%    142 (longest request)

****** Empty middleware:

curl http://localhost:3333/info
===== get /info ======================
RUBY_ENGINE  maglev
Ruby         1.8.7
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         Tue Oct 05 15:50:51 -0700 2010

========== Middleware ================
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:863:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
/Users/pmclain/GemStone/checkouts/git/examples/webstack/lib/empty_middleware.rb:9:in `call'
/Users/pmclain/GemStone/snapshots/current/lib/maglev/gems/1.8/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
======================================
ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        WEBrick/1.3.1
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   18.280 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      2850000 bytes
HTML transferred:       220000 bytes
Requests per second:    547.06 [#/sec] (mean)
Time per request:       18.280 [ms] (mean)
Time per request:       1.828 [ms] (mean, across all concurrent requests)
Transfer rate:          152.26 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.2      0       8
Processing:     4   18   4.6     17     141
Waiting:        4   18   4.6     17     141
Total:          4   18   4.6     18     141

Percentage of the requests served within a certain time (ms)
  50%     18
  66%     18
  75%     19
  80%     19
  90%     20
  95%     21
  98%     23
  99%     26
 100%    141 (longest request)

***** MRI 1.8.7 Results
****** No middleware

curl http://localhost:3333/info
===== get /info ======================
RUBY_ENGINE  MRI
Ruby         1.8.7
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         Tue Oct 05 15:40:41 -0700 2010

========== Middleware ================
/Users/pmclain/.rvm/gems/ruby-1.8.7-p302/gems/sinatra-1.0/lib/sinatra/base.rb:863:in `call'
/Users/pmclain/.rvm/gems/ruby-1.8.7-p302/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/.rvm/gems/ruby-1.8.7-p302/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
/Users/pmclain/.rvm/gems/ruby-1.8.7-p302/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
======================================
ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        WEBrick/1.3.1
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   25.001 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      2850000 bytes
HTML transferred:       220000 bytes
Requests per second:    399.99 [#/sec] (mean)
Time per request:       25.001 [ms] (mean)
Time per request:       2.500 [ms] (mean, across all concurrent requests)
Transfer rate:          111.32 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    1  35.1      0     998
Processing:     8   24  10.8     20      62
Waiting:        7   22  10.4     19      62
Total:          8   25  36.6     21    1018

Percentage of the requests served within a certain time (ms)
  50%     21
  66%     21
  75%     22
  80%     22
  90%     50
  95%     53
  98%     55
  99%     56
 100%   1018 (longest request)
****** Empty middleware:
=============================================================

curl http://localhost:3333/info
===== get /info ======================
RUBY_ENGINE  MRI
Ruby         1.8.7
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         Tue Oct 05 15:23:03 -0700 2010

========== Middleware ================
/Users/pmclain/.rvm/gems/ruby-1.8.7-p302/gems/sinatra-1.0/lib/sinatra/base.rb:863:in `call'
/Users/pmclain/.rvm/gems/ruby-1.8.7-p302/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/.rvm/gems/ruby-1.8.7-p302/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
./lib/empty_middleware.rb:9:in `call'
/Users/pmclain/.rvm/gems/ruby-1.8.7-p302/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
======================================
ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        WEBrick/1.3.1
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   25.216 seconds
Complete requests:      10000
Failed requests:        0
Write errors:           0
Total transferred:      2850000 bytes
HTML transferred:       220000 bytes
Requests per second:    396.57 [#/sec] (mean)
Time per request:       25.216 [ms] (mean)
Time per request:       2.522 [ms] (mean, across all concurrent requests)
Transfer rate:          110.37 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    1  23.5      0     977
Processing:     7   24  10.9     21      61
Waiting:        6   22  10.5     19      59
Total:          8   25  25.8     21     998

Percentage of the requests served within a certain time (ms)
  50%     21
  66%     22
  75%     22
  80%     22
  90%     53
  95%     54
  98%     55
  99%     56
 100%    998 (longest request)

***** MRI 1.9.2 Results
****** No middleware

curl http://localhost:3333/info
===== get /info ======================
RUBY_ENGINE  ruby
Ruby         1.9.2
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         2010-10-05 15:43:38 -0700

========== Middleware ================
/Users/pmclain/.rvm/gems/ruby-1.9.2-p0/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `call'
/Users/pmclain/.rvm/gems/ruby-1.9.2-p0/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
/Users/pmclain/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
======================================
ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        WEBrick/1.3.1
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   25.762 seconds
Complete requests:      10000
Failed requests:        1
   (Connect: 1, Receive: 0, Length: 0, Exceptions: 0)
Write errors:           0
Total transferred:      2850000 bytes
HTML transferred:       220000 bytes
Requests per second:    388.17 [#/sec] (mean)
Time per request:       25.762 [ms] (mean)
Time per request:       2.576 [ms] (mean, across all concurrent requests)
Transfer rate:          108.04 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    2  39.4      0    1000
Processing:     5   24   5.9     23     142
Waiting:        0   21   5.6     20     139
Total:          9   26  39.8     23    1029

Percentage of the requests served within a certain time (ms)
  50%     23
  66%     26
  75%     30
  80%     30
  90%     31
  95%     32
  98%     33
  99%     36
 100%   1029 (longest request)

****** Empty middleware:

curl http://localhost:3333/info
===== get /info ======================
RUBY_ENGINE  ruby
Ruby         1.9.2
Sinatra      1.0
Rack         1.2
MagTag       0.0.2
Date         2010-10-05 15:46:32 -0700

========== Middleware ================
/Users/pmclain/.rvm/gems/ruby-1.9.2-p0/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `call'
/Users/pmclain/.rvm/gems/ruby-1.9.2-p0/gems/sinatra-1.0/lib/sinatra/base.rb:399:in `call'
/Users/pmclain/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/session/cookie.rb:37:in `call'
/Users/pmclain/GemStone/checkouts/git/examples/webstack/lib/empty_middleware.rb:9:in `call'
/Users/pmclain/.rvm/gems/ruby-1.9.2-p0/gems/rack-1.2.1/lib/rack/content_length.rb:13:in `call'
======================================
ab -n 10000 -c 10 http://127.0.0.1:3333/magtag.css
This is ApacheBench, Version 2.3 <$Revision: 655654 $>
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        WEBrick/1.3.1
Server Hostname:        127.0.0.1
Server Port:            3333

Document Path:          /magtag.css
Document Length:        22 bytes

Concurrency Level:      10
Time taken for tests:   25.682 seconds
Complete requests:      10000
Failed requests:        2
   (Connect: 2, Receive: 0, Length: 0, Exceptions: 0)
Write errors:           0
Total transferred:      2850000 bytes
HTML transferred:       220000 bytes
Requests per second:    389.38 [#/sec] (mean)
Time per request:       25.682 [ms] (mean)
Time per request:       2.568 [ms] (mean, across all concurrent requests)
Transfer rate:          108.37 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    1  31.6      0    1007
Processing:     8   25   5.0     23      57
Waiting:        6   22   4.8     20      52
Total:          8   26  31.9     23    1030

Percentage of the requests served within a certain time (ms)
  50%     23
  66%     28
  75%     30
  80%     30
  90%     31
  95%     32
  98%     34
  99%     36
 100%   1030 (longest request)



** TODO

   1. The transaction wrapper is committing on too many requests:
      + get /login and other non modifying pages
      + get /magtag.css, get /favicon.ico  (which should really be served by
        the front-end HTTP server, and not dealt with by Sinatra).

** Sample Application

   The sample application is a twitter clone.  The next iteration will add
   tagging.

*** TODO Write a MySQL version of the App
*** TODO Use a job queue to post tweets etc?
** Things to test

   1. Compare maglev performance with txn wrapper on static page, /magtag.css,
      without txn_wrapper to see what the txn wrapper overhead is.

** Notes
   + ab on Mac does not like "localhost", use "127.0.0.1" instead.
