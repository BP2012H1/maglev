#!/usr/bin/env maglev-ruby
# -*- ruby -*-
#
# Migrate from version 1.0.0 to version 2.0.0
require '../lib/core_ext'

raise "No Point class installed" unless defined? Point
raise "Point VERSION #{Point::VERSION} is installed: Please install version 2.0.0" unless Point::VERSION == "2.0.0"

# Create a new-style <r,theta> Point that represents the same
# mathematical point as the old-style <tt>cartesian_point</tt>
def polar_point_from(cartesian_point)
  x = cartesian_point.x
  y = cartesian_point.y

  r = Math.sqrt((x * x) + (y * y))
  theta = Math.atan2(y, x)

  # :Point is the version 2.0.0 point, so it takes r and theta
  Point.new(r, theta)
end

# In this case, all the points of interest are in our points collection, so
# we do not need to search the entire repository.
Maglev::PERSISTENT_ROOT[:points].each do |old_point|

  # We only migrate from version 1.0.0, so only convert 1.0.0 points.
  if old_point.class::VERSION == "1.0.0"
    # Create a new point that is mathematically the same as
    # old_point.
    new_point = polar_point_from old_point

    # At this point we have two objects that represent the same
    # mathematical point:
    #
    #    object    | Object Id | format    | Version
    #    ----------+-----------+-----------+--------
    #    old_point | 0x1234    | <x,y>     |   1.0.0
    #    new_point | 0x5678    | <r,theta> |   2.0.0
    #
    # We will now swap the identities of the two objects (swap their object
    # id).  The new situation will be:
    #
    #    object    | Object Id | format    | Version
    #    ----------+-----------+-----------+--------
    #    old_point | 0x1234    | <r,theta> |   2.0.0
    #    new_point | 0x5678    | <x,y>     |   1.0.0
    #
    # The benefit of this is that any reference anywhere in the system to
    # object id 0x1234, will now automatically point to the new style
    # object.
    #
    # The variable new_point, now points to the old 1.0.0 formatted object,
    # and we simply let the GC collect the now uesless object (the only
    # reference ever to the object with object id 0x5678, was the variable
    # new_point in the previous line...).
    #
    puts "Converting: #{old_point.inspect} to #{new_point.inspect}"
    old_point.become new_point
  else
    puts "Skip conversion of non 1.0.0 point #{old_point.inspect}"
  end
end

Maglev.commit_transaction


