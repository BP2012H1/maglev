= MaglevDB (MDB)

This directory contains some experimental code to wrap MagLev as a NoSQL
Server (MagLevDB, AKA MDB), and makes it available to other applications.
The sample app can be run from MRI, and will connect to the MagLev VM
running the MDB server code using HTTP.

The MaglevDB code is in the +mdb+ directory, and a sample Sinatra
application that connects to MaglevDB is in the +app+ directory.

== Quick Start:

Make sure the maglev server has been started:

  $ cd $MAGLEV_HOME
  $ rake maglev:start

Install prerequisites and load MDB server:

  $ cd $MAGLEV_HOME/examples/persistence/mdb
  $ rake install_gems   # Install serveral gems into MagLev and MRI
  $ rake commit         # Commit code into MDB

Run MDB server:

  $ cd $MAGLEV_HOME/examples/persistence/mdb/mdb
  $ rake server:start  # Starts server...^C to stop it

Setup client app, in a new shell:

  $ cd $MAGLEV_HOME/examples/persistence/mdb/app
  $ rake app:run    # Runs migrations, then starts client app...^C to stop it

Hit http://localhost:3333/

At this point, the client application is running on port 3333, and the
MaglevDB server is running on port 4567.

== Details

=== Prerequisites

1. MagLev must be installed and the <tt>$MAGLEV_HOME</tt> environment
   variable must be correctly set.

2. To install the required RubyGems and load the MDB server, do:

  $ cd $MAGLEV_HOME/examples/persistence/mdb
  $ rake setup

The +setup+ Rake task will install the Rack, Sinatra and MiniTest gems into
your MagLev environment, and will install the Rack, Sinatra, MiniTest and
HttpClient gems into your MRI environment.

It will then load commit the MaglevDB server code into the MagLev
repository.

=== The MDB Server

The server is a MagLev VM running a Sinatra application that waits for DB
requests over HTTP.  It then searches the internal DB for objects and
returns the serialized form back to the MRI client code.

=== The MRI Client

The MRI client is a simple sinatra blog app that treats MDB as its
database.  It uses the MDB client code which is the proxy to MDB.  All of
the methods on the Proxy DB have equivalents in MDB, which would make it
easy to move the entire client app completely into MagLev (eliminate a
network call).
