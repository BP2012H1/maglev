fails:Array#initialize is private
fails:Array#initialize raise an ArgumentError if 3 or more arguments passed and no block given
fails:Array#initialize raise an ArgumentError if 3 or more arguments passed and a block given
fails:Array#initialize with no arguments makes the array empty
fails:Array#initialize with (size, object) is called on subclasses
fails:Array#initialize with (size, object) sets the array to size and fills with the object
fails:Array#initialize with (size, object) sets the array to size and fills with nil when object is omitted
fails:Array#initialize with (size, object) raises an ArgumentError if size is negative
fails:Array#initialize with (size, object) raises an ArgumentError if size is too large
fails:Array#initialize with (size, object) tries to convert the passed size argument to an Integer using #to_int
fails:Array#initialize with (size, object) checks whether the passed size argument responds to #to_int
fails:Array#initialize with (size, object) raises a TypeError if the passed size is no numeric
fails:Array#initialize with (size, object) yields the given block size times passing an index and fills self with values of the block
fails:Array#initialize with (size, object) yields the given block size times passing an index and fills self with values of the block even if a filler value passed
fails:Array#initialize with (size, object) returns the specified value if it would break in the given block
fails:Array#initialize with (size, object) makes the array contain values the given block would yield even if it would break in the block
fails:Array#initialize with (array) replaces self with the other array
fails:Array#initialize with (array) is called on subclasses
