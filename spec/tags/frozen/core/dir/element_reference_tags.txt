fails:Dir.[] converts patterns with to_str
fails:Dir.[] matches non-dotfiles with '*'
fails:Dir.[] matches regexp special +
fails:Dir.[] matches regexp special *
fails:Dir.[] matches regexp special ?
fails:Dir.[] matches regexp special |
fails:Dir.[] matches regexp special ^
fails:Dir.[] matches regexp special $
fails:Dir.[] matches regexp special (
fails:Dir.[] matches regexp special )
fails:Dir.[] matches regexp special [
fails:Dir.[] matches regexp special ]
fails:Dir.[] matches regexp special {
fails:Dir.[] matches regexp special }
fails:Dir.[] matches dotfiles with '.*'
fails:Dir.[] matches non-dotfiles with '*<non-special characters>'
fails:Dir.[] matches dotfiles with '.*<non-special characters>'
fails:Dir.[] matches files with any ending with '<non-special characters>*'
fails:Dir.[] matches files with multiple '*' special characters
fails:Dir.[] matches non-dotfiles in the current directory with '**'
fails:Dir.[] matches dotfiles in the current directory with '.**'
fails:Dir.[] accepts string sets with empty strings with {<string>,,<other>}
fails:Dir.[] matches dot or non-dotfiles with '{,.}*'
fails:Dir.[] matches special characters by escaping with a backslash with '\<character>'
fails:Dir.[] recursively matches directories with '**/<characters>'
fails:Dir.[] matches multiple recursives
