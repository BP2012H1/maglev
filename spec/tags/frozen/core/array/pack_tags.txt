fails:Array#pack just ignores unknown format
fails:Array#pack ignores white spaces
fails:Array#pack treats a white space as a separator of formats
fails:Array#pack returns a tainted string when a pack argument is tainted
fails:Array#pack with format 'A' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'A' raises a TypeError if array item is not String with ('A<count>')
fails:Array#pack with format 'a' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'a' raises a TypeError if array item is not String with ('A<count>')
fails:Array#pack with format 'Z' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'Z' raises a TypeError if array item is not String with ('A<count>')
fails:Array#pack with format 'B' raises a TypeError if corresponding array item is not String
fails:Array#pack with format 'b' raises a TypeError if corresponding array item is not String
fails:Array#pack with format 'H' encodes hexadecimal digits to byte sequence in the order of high-nibble first
fails:Array#pack with format 'H' fills low-nibble of the last byte with 0 when count is odd
fails:Array#pack with format 'H' fills the rest bytes with 0 if pack argument has insufficient length
fails:Array#pack with format 'H' fills low-nibble of the last byte with 0 when count is odd even if pack argument has insufficient length
fails:Array#pack with format 'H' considers count = 1 if count omited
fails:Array#pack with format 'H' consumes only one array item per a format
fails:Array#pack with format 'H' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'h' encodes hexadecimal digits to byte sequence in the order of low-nibble first
fails:Array#pack with format 'h' fills low-nibble of the last byte with 0 when count is odd
fails:Array#pack with format 'h' fills the rest bytes with 0 if pack argument has insufficient length
fails:Array#pack with format 'h' fills high-nibble of the last byte with 0 when count is odd even if pack argument has insufficient length
fails:Array#pack with format 'h' considers count = 1 if count omited
fails:Array#pack with format 'h' consumes only one array item per a format
fails:Array#pack with format 'h' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'n' may raise a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'n' may raise a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'v' may raise a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'v' may raise a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'N' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'N' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'V' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'V' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 's' may raise a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 's' may raise a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'S' may raise a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'S' may raise a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'l' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'l' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'l' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'L' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'L' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'q' returns a string containing 8 bytes for an integer
fails:Array#pack with format 'q' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'q' raises a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'q' raises a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'Q' returns a string containing 8 bytes for an integer
fails:Array#pack with format 'Q' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'Q' raises a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'Q' raises a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 's!' returns a string containing 2 bytes for an integer
fails:Array#pack with format 's!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 's!' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 's!' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 's!' may raise a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 's!' may raise a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 's!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 's!' processes count number of array elements if count given
fails:Array#pack with format 's!' returns empty string if count = 0
fails:Array#pack with format 's!' with star parameter processes all remaining array items
fails:Array#pack with format 's_' may raise a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 's_' may raise a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'S!' may raise a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'S!' may raise a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'S_' may raise a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'S_' may raise a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'i' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'i' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'i' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'i!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'i!' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'i!' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'i!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'i!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'i!' processes count number of array elements if count given
fails:Array#pack with format 'i!' returns empty string if count = 0
fails:Array#pack with format 'i!' with star parameter processes all remaining array items
fails:Array#pack with format 'i_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'i_' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'i_' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'I' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'I' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'I!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'I!' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'I!' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'I!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'I!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'I!' processes count number of array elements if count given
fails:Array#pack with format 'I!' returns empty string if count = 0
fails:Array#pack with format 'I!' with star parameter processes all remaining array items
fails:Array#pack with format 'I_' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'I_' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'f' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'f' calls #to_f to convert a String into a Float
fails:Array#pack with format 'f' accepts a string representation of real number as the pack argument
fails:Array#pack with format 'f' accepts a NaN
fails:Array#pack with format 'd' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'd' calls #to_f to convert a String into a Float
fails:Array#pack with format 'd' accepts a string representation of real number as the pack argument
fails:Array#pack with format 'd' accepts a NaN
fails:Array#pack with format 'e' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'e' calls #to_f to convert a String into a Float
fails:Array#pack with format 'e' accepts a string representation of real number as the pack argument
fails:Array#pack with format 'e' accepts a NaN
fails:Array#pack with format 'E' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'E' calls #to_f to convert a String into a Float
fails:Array#pack with format 'E' accepts a string representation of real number as the pack argument
fails:Array#pack with format 'E' accepts a NaN
fails:Array#pack with format 'g' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'g' calls #to_f to convert a String into a Float
fails:Array#pack with format 'g' accepts a string representation of real number as the pack argument
fails:Array#pack with format 'g' accepts a NaN
fails:Array#pack with format 'g' keeps order of nonnegative real numbers
fails:Array#pack with format 'g' reverses order of nonpositive real numbers
fails:Array#pack with format 'G' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'G' calls #to_f to convert a String into a Float
fails:Array#pack with format 'G' accepts a string representation of real number as the pack argument
fails:Array#pack with format 'G' accepts a NaN
fails:Array#pack with format 'G' keeps order of nonnegative real numbers
fails:Array#pack with format 'G' reverses order of nonpositive real numbers
fails:Array#pack with format 'M' appends soft line break after each specified number of chars + 1 encoded char in encoded string for the specified number > 1
fails:Array#pack with format 'M' comsumres only one array item per a format
fails:Array#pack with format 'M' properly handles recursive arrays
fails:Array#pack with format 'm' appends newline whenever after consumes [number/3]*3 of bytes for the specified number > 2, where [x] is the floor function
fails:Array#pack with format 'm' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'm' raises a TypeError if corresponding array item is not string
fails:Array#pack with format 'U' regards a integer as a Unicode codepoint and encodes into UTF-8 byte sequence
fails:Array#pack with format 'U' raises RangeError when a pack argument is negative
fails:Array#pack with format 'u' appends newline whenever after consumes [number/3]*3 of bytes for the specified number > 2, where [x] is the floor function
fails:Array#pack with format 'u' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'u' raises a TypeError if corresponding array item is not string
fails:Array#pack with format 'p' consumes a String
fails:Array#pack with format 'p' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'p' raises a TypeError if corresponding array item is not String
fails:Array#pack with format 'p' returns empty string if count = 0 with
fails:Array#pack with format 'p' only takes as many elements as specified after ('p')
fails:Array#pack with format 'p' consumes the whole argument string with star parameter
fails:Array#pack with format 'P' consumes a String
fails:Array#pack with format 'P' returns null pointer when passed nil
fails:Array#pack with format 'P' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'P' raises a TypeError if corresponding array item is not String
fails:Array#pack with format 'P' consumes one array item per a format
fails:Array#pack with format 'P' ignores '*' parameter
fails:Array#pack with format 'P' returns a pointer to zero-length byte sequence if count = 0 with
fails:Array#pack with format 'P' raises an ArgumentError if count is greater than the corresponding string in array
